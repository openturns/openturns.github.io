
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_lognormal_bbrc.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_lognormal_bbrc.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_lognormal_bbrc.py:


Analysis of the LogNormal distribution in the BBRC
==================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-49

The goal of this document is to clarify the parametrization of the LogNormal distribution in the BBRC.

From the RPREPO
---------------

https://rprepo.readthedocs.io/en/latest/distributions.html#sec-lognormal

* Type : univariate, continuous
* Support : :math:`x\in(0,\infty)`
* Parameter : :math:`\theta_1=\mu \in (-\infty,\infty)`, shape
* Parameter : :math:`\theta_2=\sigma \in (0,\infty)`, scale
* Mean : :math:`e^{\mu+\frac{\sigma^2}{2}}`
* Variance : :math:`\left(e^{\sigma^2} - 1\right) e^{2\mu + \sigma^2}`

.. math::
    f(x) = \frac{1}{x} \frac{1}{\sigma \sqrt{2\pi}} \exp\left(-\frac{\left(\ln(x) - \mu\right)^2}{2 \sigma^2}\right)

From this description we see that:

* :math:`\theta_1` is the mean of the underlying gaussian and :math:`\theta_2`
  is the standard deviation of the underlying gaussian
* Mean is the Mean of the LogNormal random variable and Std
  is the standard deviation of the LogNormal random variable.

From OpenTURNS
--------------

* http://openturns.github.io/openturns/master/user_manual/_generated/openturns.LogNormal.html
* http://openturns.github.io/openturns/master/user_manual/_generated/openturns.LogNormalMuSigma.html

One of the two following parametrizations must be chosen:

* `LogNormal` with :math:`\mu_\ell=\theta_1, \sigma_\ell=\theta_2` where :math:`\theta_1` is the mean
   of the underlying gaussian and :math:`\theta_2` is the standard deviation of the underlying gaussian
* `LogNormalMuSigma` with Mean, Std where Mean is the Mean of the LogNormal random variable
   and Std is the standard deviation of the LogNormal random variable.

Problem
-------

The problem is to select the parametrization that best corresponds to the problem and the data.
The goal of this document is to make this selection clearer.

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: Python

    import openturns as ot
    ot.__version__





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    '1.24'



.. GENERATED FROM PYTHON SOURCE LINES 55-59

RP60
----

https://rprepo.readthedocs.io/en/latest/reliability_problems.html#rp60

.. GENERATED FROM PYTHON SOURCE LINES 61-63

RP60 with LogNormalMuSigma
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: Python

    Mean = 2200.0
    Std = 220.0
    parameters = ot.LogNormalMuSigma(Mean, Std)








.. GENERATED FROM PYTHON SOURCE LINES 70-72

.. code-block:: Python

    X = ot.ParametrizedDistribution(parameters)








.. GENERATED FROM PYTHON SOURCE LINES 73-75

.. code-block:: Python

    X.getMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=1 values=[2200]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 76-78

.. code-block:: Python

    X.getStandardDeviation()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=1 values=[220]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 79-81

RP60 with LogNormal
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 83-88

.. code-block:: Python

    theta1 = 7.691
    theta2 = 0.09975
    X = ot.LogNormal(7.691, 0.09975, 0.0)
    X






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    LogNormal
    <ul>
      <li>name=LogNormal</li>
      <li>dimension=1</li>
      <li>weight=1</li>
      <li>range=[0, (4694.52) +inf[</li>
      <li>description=[X0]</li>
      <li>isParallel=true</li>
      <li>isCopula=false</li>
    </ul>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 89-91

.. code-block:: Python

    X.getMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=1 values=[2199.48]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: Python

    X.getStandardDeviation()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=1 values=[219.945]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 95-99

RP8
---

https://rprepo.readthedocs.io/en/latest/reliability_problems.html#rp8

.. GENERATED FROM PYTHON SOURCE LINES 101-103

RP8 with LogNormalMuSigma
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 105-111

.. code-block:: Python

    Mean = 120.0
    Std = 12.0
    parameters = ot.LogNormalMuSigma(Mean, Std)
    parameters







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=LogNormalMuSigma name=Unnamed mu=120 sigma=12 gamma=0
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 112-115

.. code-block:: Python

    X = ot.ParametrizedDistribution(parameters)
    X






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    ParametrizedDistribution
    <ul>
      <li>name=Unnamed</li>
      <li>dimension=1</li>
      <li>weight=1</li>
      <li>range=[0, (256.128) +inf[</li>
      <li>description=[X0]</li>
      <li>isParallel=true</li>
      <li>isCopula=false</li>
    </ul>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 116-118

.. code-block:: Python

    X.getMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=1 values=[120]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 119-121

.. code-block:: Python

    X.getStandardDeviation()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=1 values=[12]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 122-124

RP8 with LogNormal
------------------

.. GENERATED FROM PYTHON SOURCE LINES 126-131

.. code-block:: Python

    theta1 = 4.783
    theta2 = 0.09975
    X = ot.LogNormal(4.783, 0.09975, 0.0)
    X






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    LogNormal
    <ul>
      <li>name=LogNormal</li>
      <li>dimension=1</li>
      <li>weight=1</li>
      <li>range=[0, (256.249) +inf[</li>
      <li>description=[X0]</li>
      <li>isParallel=true</li>
      <li>isCopula=false</li>
    </ul>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 132-134

.. code-block:: Python

    X.getMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=1 values=[120.058]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 135-137

.. code-block:: Python

    X.getStandardDeviation()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=1 values=[12.0056]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 138-147

Conclusion
----------

We see that in the RP60 and RP8 problems, the Mean and Std parameters are exact
while :math:`\theta_1` and :math:`\theta_2` are given with 4 significant digits.
This leads to an approximation if the :math:`\theta_1` and :math:`\theta_2` parameters are used.

This is why we choose the Mean and Std parameters as the parametrization for the BBRC.
This corresponds to the following code and comments:

.. GENERATED FROM PYTHON SOURCE LINES 149-154

.. code-block:: Python

    Mean = 120.0
    Std = 12.0
    parameters = ot.LogNormalMuSigma(Mean, Std)
    X = ot.ParametrizedDistribution(parameters)








.. GENERATED FROM PYTHON SOURCE LINES 155-157

* Mean is the Mean of the LogNormal random variable
* Std is the standard deviation of the LogNormal random variable.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.217 seconds)


.. _sphx_glr_download_auto_examples_plot_lognormal_bbrc.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_lognormal_bbrc.ipynb <plot_lognormal_bbrc.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_lognormal_bbrc.py <plot_lognormal_bbrc.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_lognormal_bbrc.zip <plot_lognormal_bbrc.zip>`
