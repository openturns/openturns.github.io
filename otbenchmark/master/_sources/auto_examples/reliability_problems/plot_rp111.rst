
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/reliability_problems/plot_rp111.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_reliability_problems_plot_rp111.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_reliability_problems_plot_rp111.py:


RP111 analysis and 2D graphics
==============================

.. GENERATED FROM PYTHON SOURCE LINES 7-9

The objective of this example is to present problem 111 of the BBRC.
We also present graphic elements for the visualization of the limit state surface in 2 dimensions.

.. GENERATED FROM PYTHON SOURCE LINES 11-15

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as otv
    import otbenchmark as otb








.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. code-block:: Python

    problem = otb.ReliabilityProblem111()
    print(problem)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    name = RP111
    event = class=ThresholdEventImplementation antecedent=class=CompositeRandomVector function=class=Function name=Unnamed implementation=class=FunctionImplementation name=Unnamed description=[x1,x2,y0] evaluationImplementation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x1,x2] outputVariablesNames=[y0] formulas=[12.5 - abs(x1 * x2)] gradientImplementation=class=SymbolicGradient name=Unnamed evaluation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x1,x2] outputVariablesNames=[y0] formulas=[12.5 - abs(x1 * x2)] hessianImplementation=class=SymbolicHessian name=Unnamed evaluation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x1,x2] outputVariablesNames=[y0] formulas=[12.5 - abs(x1 * x2)] antecedent=class=UsualRandomVector distribution=class=JointDistribution name=JointDistribution dimension=2 copula=class=IndependentCopula name=IndependentCopula dimension=2 marginal[0]=class=Normal name=Normal dimension=1 mean=class=Point name=Unnamed dimension=1 values=[0] sigma=class=Point name=Unnamed dimension=1 values=[1] correlationMatrix=class=CorrelationMatrix dimension=1 implementation=class=MatrixImplementation name=Unnamed rows=1 columns=1 values=[1] marginal[1]=class=Normal name=Normal dimension=1 mean=class=Point name=Unnamed dimension=1 values=[0] sigma=class=Point name=Unnamed dimension=1 values=[1] correlationMatrix=class=CorrelationMatrix dimension=1 implementation=class=MatrixImplementation name=Unnamed rows=1 columns=1 values=[1] operator=class=Less name=Unnamed threshold=0
    probability = 7.65e-07





.. GENERATED FROM PYTHON SOURCE LINES 20-23

.. code-block:: Python

    event = problem.getEvent()
    g = event.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 24-26

.. code-block:: Python

    problem.getProbability()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    7.65e-07



.. GENERATED FROM PYTHON SOURCE LINES 27-28

Create the Monte-Carlo algorithm

.. GENERATED FROM PYTHON SOURCE LINES 28-33

.. code-block:: Python

    algoProb = ot.ProbabilitySimulationAlgorithm(event)
    algoProb.setMaximumOuterSampling(1000)
    algoProb.setMaximumCoefficientOfVariation(0.01)
    algoProb.run()








.. GENERATED FROM PYTHON SOURCE LINES 34-35

Get the results

.. GENERATED FROM PYTHON SOURCE LINES 35-46

.. code-block:: Python

    resultAlgo = algoProb.getResult()
    neval = g.getEvaluationCallsNumber()
    print("Number of function calls = %d" % (neval))
    pf = resultAlgo.getProbabilityEstimate()
    print("Failure Probability = %.4f" % (pf))
    level = 0.95
    c95 = resultAlgo.getConfidenceLength(level)
    pmin = pf - 0.5 * c95
    pmax = pf + 0.5 * c95
    print("%.1f %% confidence interval :[%.4f,%.4f] " % (level * 100, pmin, pmax))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of function calls = 1000
    Failure Probability = 0.0000
    95.0 % confidence interval :[0.0000,0.0000] 




.. GENERATED FROM PYTHON SOURCE LINES 47-48

Compute the bounds of the domain

.. GENERATED FROM PYTHON SOURCE LINES 48-61

.. code-block:: Python

    inputVector = event.getAntecedent()
    distribution = inputVector.getDistribution()
    X1 = distribution.getMarginal(0)
    X2 = distribution.getMarginal(1)
    alphaMin = 0.00001
    alphaMax = 1 - alphaMin
    lowerBound = ot.Point(
        [X1.computeQuantile(alphaMin)[0], X2.computeQuantile(alphaMin)[0]]
    )
    upperBound = ot.Point(
        [X1.computeQuantile(alphaMax)[0], X2.computeQuantile(alphaMax)[0]]
    )








.. GENERATED FROM PYTHON SOURCE LINES 62-67

.. code-block:: Python

    nbPoints = [100, 100]
    figure = g.draw(lowerBound, upperBound, nbPoints)
    figure.setTitle(" Iso-values of limit state function")
    figure





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    class=Graph name=y0 as a function of (x1,x2) implementation=class=GraphImplementation name=y0 as a function of (x1,x2) title= Iso-values of limit state function xTitle=x1 yTitle=x2 axes=ON grid=ON legendposition=upper left legendFontSize=1 drawables=[class=Drawable name=Unnamed implementation=class=Contour name=Unnamed x=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=100 dimension=1 data=[[-4.26489],[-4.17873],[-4.09257],[-4.00641],[-3.92025],[-3.83409],[-3.74793],[-3.66177],[-3.57562],[-3.48946],[-3.4033],[-3.31714],[-3.23098],[-3.14482],[-3.05866],[-2.9725],[-2.88634],[-2.80018],[-2.71402],[-2.62786],[-2.5417],[-2.45554],[-2.36938],[-2.28322],[-2.19706],[-2.11091],[-2.02475],[-1.93859],[-1.85243],[-1.76627],[-1.68011],[-1.59395],[-1.50779],[-1.42163],[-1.33547],[-1.24931],[-1.16315],[-1.07699],[-0.990833],[-0.904674],[-0.818514],[-0.732355],[-0.646196],[-0.560036],[-0.473877],[-0.387717],[-0.301558],[-0.215399],[-0.129239],[-0.0430797],[0.0430797],[0.129239],[0.215399],[0.301558],[0.387717],[0.473877],[0.560036],[0.646196],[0.732355],[0.818514],[0.904674],[0.990833],[1.07699],[1.16315],[1.24931],[1.33547],[1.42163],[1.50779],[1.59395],[1.68011],[1.76627],[1.85243],[1.93859],[2.02475],[2.11091],[2.19706],[2.28322],[2.36938],[2.45554],[2.5417],[2.62786],[2.71402],[2.80018],[2.88634],[2.9725],[3.05866],[3.14482],[3.23098],[3.31714],[3.4033],[3.48946],[3.57562],[3.66177],[3.74793],[3.83409],[3.92025],[4.00641],[4.09257],[4.17873],[4.26489]] y=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=100 dimension=1 data=[[-4.26489],[-4.17873],[-4.09257],[-4.00641],[-3.92025],[-3.83409],[-3.74793],[-3.66177],[-3.57562],[-3.48946],[-3.4033],[-3.31714],[-3.23098],[-3.14482],[-3.05866],[-2.9725],[-2.88634],[-2.80018],[-2.71402],[-2.62786],[-2.5417],[-2.45554],[-2.36938],[-2.28322],[-2.19706],[-2.11091],[-2.02475],[-1.93859],[-1.85243],[-1.76627],[-1.68011],[-1.59395],[-1.50779],[-1.42163],[-1.33547],[-1.24931],[-1.16315],[-1.07699],[-0.990833],[-0.904674],[-0.818514],[-0.732355],[-0.646196],[-0.560036],[-0.473877],[-0.387717],[-0.301558],[-0.215399],[-0.129239],[-0.0430797],[0.0430797],[0.129239],[0.215399],[0.301558],[0.387717],[0.473877],[0.560036],[0.646196],[0.732355],[0.818514],[0.904674],[0.990833],[1.07699],[1.16315],[1.24931],[1.33547],[1.42163],[1.50779],[1.59395],[1.68011],[1.76627],[1.85243],[1.93859],[2.02475],[2.11091],[2.19706],[2.28322],[2.36938],[2.45554],[2.5417],[2.62786],[2.71402],[2.80018],[2.88634],[2.9725],[3.05866],[3.14482],[3.23098],[3.31714],[3.4033],[3.48946],[3.57562],[3.66177],[3.74793],[3.83409],[3.92025],[4.00641],[4.09257],[4.17873],[4.26489]] levels=class=Point name=Unnamed dimension=10 values=[-0.544847,3.15203,5.40133,7.10501,8.44866,9.56588,10.4901,11.2473,11.8634,12.346] labels=[-0.544847,3.15203,5.40133,7.10501,8.44866,9.56588,10.4901,11.2473,11.8634,12.346] show labels=false isFilled=false colorBarPosition=right isVminUsed=false vmin=0 isVmaxUsed=false vmax=0 colorMap=hsv alpha=1 norm=linear extend=both hatches=[] derived from class=DrawableImplementation name=Unnamed legend= data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=10000 dimension=1 description=[y0] data=[[-5.68929],[-5.32183],[-4.95437],...,[-4.95437],[-5.32183],[-5.68929]] color=#1f77b4 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=plus lineWidth=1]



.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: Python

    _ = otv.View(distribution.drawPDF())




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp111_001.png
   :alt: [X1,X2] iso-PDF
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp111_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 71-74

.. code-block:: Python

    sampleSize = 100000
    drawEvent = otb.DrawEvent(event)








.. GENERATED FROM PYTHON SOURCE LINES 75-78

.. code-block:: Python

    cloud = drawEvent.drawSampleCrossCut(sampleSize)
    _ = otv.View(cloud)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp111_002.png
   :alt: Points X s.t. g(X) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp111_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 79-81

Draw the limit state surface
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 83-85

.. code-block:: Python

    bounds = ot.Interval(lowerBound, upperBound)








.. GENERATED FROM PYTHON SOURCE LINES 86-90

.. code-block:: Python

    graph = drawEvent.drawLimitStateCrossCut(bounds)
    graph.add(cloud)
    graph





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    class=Graph name=Limit state surface implementation=class=GraphImplementation name=Limit state surface title=Limit state surface xTitle=x1 yTitle=x2 axes=ON grid=ON legendposition= legendFontSize=1 drawables=[class=Drawable name=Unnamed implementation=class=Contour name=Unnamed x=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=52 dimension=1 description=[t] data=[[-4.26489],[-4.09764],[-3.93039],[-3.76314],[-3.59589],[-3.42864],[-3.26139],[-3.09414],[-2.92689],[-2.75964],[-2.59238],[-2.42513],[-2.25788],[-2.09063],[-1.92338],[-1.75613],[-1.58888],[-1.42163],[-1.25438],[-1.08713],[-0.919878],[-0.752628],[-0.585377],[-0.418127],[-0.250876],[-0.0836253],[0.0836253],[0.250876],[0.418127],[0.585377],[0.752628],[0.919878],[1.08713],[1.25438],[1.42163],[1.58888],[1.75613],[1.92338],[2.09063],[2.25788],[2.42513],[2.59238],[2.75964],[2.92689],[3.09414],[3.26139],[3.42864],[3.59589],[3.76314],[3.93039],[4.09764],[4.26489]] y=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=52 dimension=1 description=[t] data=[[-4.26489],[-4.09764],[-3.93039],[-3.76314],[-3.59589],[-3.42864],[-3.26139],[-3.09414],[-2.92689],[-2.75964],[-2.59238],[-2.42513],[-2.25788],[-2.09063],[-1.92338],[-1.75613],[-1.58888],[-1.42163],[-1.25438],[-1.08713],[-0.919878],[-0.752628],[-0.585377],[-0.418127],[-0.250876],[-0.0836253],[0.0836253],[0.250876],[0.418127],[0.585377],[0.752628],[0.919878],[1.08713],[1.25438],[1.42163],[1.58888],[1.75613],[1.92338],[2.09063],[2.25788],[2.42513],[2.59238],[2.75964],[2.92689],[3.09414],[3.26139],[3.42864],[3.59589],[3.76314],[3.93039],[4.09764],[4.26489]] levels=class=Point name=Unnamed dimension=1 values=[0] labels=[0.0] show labels=true isFilled=false colorBarPosition=right isVminUsed=false vmin=0 isVmaxUsed=false vmax=0 colorMap=hsv alpha=1 norm=linear extend=both hatches=[] derived from class=DrawableImplementation name=Unnamed legend= data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=2704 dimension=1 description=[y0] data=[[-5.68929],[-4.97599],[-4.26268],...,[-4.26268],[-4.97599],[-5.68929]] color=#1f77b4 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=plus lineWidth=1,class=Drawable name=Out implementation=class=Cloud name=Out derived from class=DrawableImplementation name=Out legend=Out data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=100000 dimension=2 data=[[-0.0925667,1.1458],[-0.434367,0.365748],[-0.469405,-0.573511],...,[0.514362,-0.635356],[0.799177,0.455565],[1.27895,-0.298332]] color=darkseagreen3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1]



.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: Python

    domain = drawEvent.fillEventCrossCut(bounds)
    _ = otv.View(domain)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp111_003.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp111_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. code-block:: Python

    domain.add(cloud)
    _ = otv.View(domain)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp111_004.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp111_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 99-100

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.293 seconds)


.. _sphx_glr_download_auto_examples_reliability_problems_plot_rp111.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_rp111.ipynb <plot_rp111.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_rp111.py <plot_rp111.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_rp111.zip <plot_rp111.zip>`
