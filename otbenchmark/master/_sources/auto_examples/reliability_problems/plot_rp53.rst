
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/reliability_problems/plot_rp53.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_reliability_problems_plot_rp53.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_reliability_problems_plot_rp53.py:


RP53 analysis and 2D graphics
=============================

.. GENERATED FROM PYTHON SOURCE LINES 7-9

The objective of this example is to present problem 53 of the BBRC.
We also present graphic elements for the visualization of the limit state surface in 2 dimensions.

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as otv
    import otbenchmark as otb









.. GENERATED FROM PYTHON SOURCE LINES 17-19

.. code-block:: Python

    problem = otb.ReliabilityProblem53()








.. GENERATED FROM PYTHON SOURCE LINES 20-23

.. code-block:: Python

    event = problem.getEvent()
    g = event.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 24-26

.. code-block:: Python

    problem.getProbability()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0313



.. GENERATED FROM PYTHON SOURCE LINES 27-28

Create the Monte-Carlo algorithm

.. GENERATED FROM PYTHON SOURCE LINES 28-33

.. code-block:: Python

    algoProb = ot.ProbabilitySimulationAlgorithm(event)
    algoProb.setMaximumOuterSampling(1000)
    algoProb.setMaximumCoefficientOfVariation(0.01)
    algoProb.run()








.. GENERATED FROM PYTHON SOURCE LINES 34-35

Get the results

.. GENERATED FROM PYTHON SOURCE LINES 35-46

.. code-block:: Python

    resultAlgo = algoProb.getResult()
    neval = g.getEvaluationCallsNumber()
    print("Number of function calls = %d" % (neval))
    pf = resultAlgo.getProbabilityEstimate()
    print("Failure Probability = %.4f" % (pf))
    level = 0.95
    c95 = resultAlgo.getConfidenceLength(level)
    pmin = pf - 0.5 * c95
    pmax = pf + 0.5 * c95
    print("%.1f %% confidence interval :[%.4f,%.4f] " % (level * 100, pmin, pmax))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of function calls = 1000
    Failure Probability = 0.0280
    95.0 % confidence interval :[0.0178,0.0382] 




.. GENERATED FROM PYTHON SOURCE LINES 47-57

.. code-block:: Python

    inputVector = event.getAntecedent()
    distribution = inputVector.getDistribution()
    X1 = distribution.getMarginal(0)
    X2 = distribution.getMarginal(0)
    alpha = 1 - 1.0e-4
    bounds, marginalProb = distribution.computeMinimumVolumeIntervalWithMarginalProbability(
        alpha
    )









.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: Python

    _ = otv.View(X1.drawPDF())




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_001.png
   :alt: plot rp53
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 61-63

Print the iso-values of the distribution
----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: Python

    _ = otv.View(distribution.drawPDF())





.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_002.png
   :alt: [X1,X2] iso-PDF
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-73

.. code-block:: Python

    sampleSize = 5000
    drawEvent = otb.DrawEvent(event)









.. GENERATED FROM PYTHON SOURCE LINES 74-77

.. code-block:: Python

    cloud = drawEvent.drawSampleCrossCut(sampleSize)
    _ = otv.View(cloud)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_003.png
   :alt: Points X s.t. g(X) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-80

Draw the limit state surface
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: Python

    graph = drawEvent.drawLimitStateCrossCut(bounds)
    graph.add(cloud)
    graph






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    class=Graph name=Limit state surface implementation=class=GraphImplementation name=Limit state surface title=Limit state surface xTitle=x1 yTitle=x2 axes=ON grid=ON legendposition= legendFontSize=1 drawables=[class=Drawable name=Unnamed implementation=class=Contour name=Unnamed x=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=52 dimension=1 description=[t] data=[[-2.55562],[-2.39658],[-2.23753],[-2.07849],[-1.91945],[-1.7604],[-1.60136],[-1.44231],[-1.28327],[-1.12423],[-0.965181],[-0.806138],[-0.647094],[-0.48805],[-0.329006],[-0.169962],[-0.0109177],[0.148126],[0.30717],[0.466214],[0.625258],[0.784302],[0.943346],[1.10239],[1.26143],[1.42048],[1.57952],[1.73857],[1.89761],[2.05665],[2.2157],[2.37474],[2.53379],[2.69283],[2.85187],[3.01092],[3.16996],[3.32901],[3.48805],[3.64709],[3.80614],[3.96518],[4.12423],[4.28327],[4.44231],[4.60136],[4.7604],[4.91945],[5.07849],[5.23753],[5.39658],[5.55562]] y=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=52 dimension=1 description=[t] data=[[-1.55562],[-1.39658],[-1.23753],[-1.07849],[-0.919445],[-0.760401],[-0.601357],[-0.442313],[-0.283269],[-0.124225],[0.0348185],[0.193862],[0.352906],[0.51195],[0.670994],[0.830038],[0.989082],[1.14813],[1.30717],[1.46621],[1.62526],[1.7843],[1.94335],[2.10239],[2.26143],[2.42048],[2.57952],[2.73857],[2.89761],[3.05665],[3.2157],[3.37474],[3.53379],[3.69283],[3.85187],[4.01092],[4.16996],[4.32901],[4.48805],[4.64709],[4.80614],[4.96518],[5.12423],[5.28327],[5.44231],[5.60136],[5.7604],[5.91945],[6.07849],[6.23753],[6.39658],[6.55562]] levels=class=Point name=Unnamed dimension=1 values=[0] labels=[0.0] show labels=true isFilled=false colorBarPosition=right isVminUsed=false vmin=0 isVmaxUsed=false vmax=0 colorMap=hsv alpha=1 norm=linear extend=both hatches=[] derived from class=DrawableImplementation name=Unnamed legend= data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=2704 dimension=1 description=[y0] data=[[3.24002],[3.53267],[3.7869],...,[-6.2278],[-6.40229],[-6.71544]] color=#1f77b4 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=plus lineWidth=1,class=Drawable name=In implementation=class=Cloud name=In derived from class=DrawableImplementation name=In legend=In data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=157 dimension=2 data=[[1.81743,3.87483],[1.75608,4.12538],[1.74131,4.11419],[1.95455,3.68208],[2.09455,4.2206],[1.86453,3.99757],[1.89634,3.68961],[1.88845,3.74845],[2.40327,4.77522],[1.76872,4.28131],[2.08997,3.93034],[1.97516,3.72885],[2.08355,4.23936],[1.62469,4.64448],[2.03869,4.13083],[1.89358,3.80019],[1.93552,3.60695],[2.0052,3.61016],[2.02739,4.18276],[2.12339,3.80077],[1.97915,3.72173],[1.77578,3.91802],[4.01312,3.20266],[2.23736,4.13514],[1.85226,4.27454],[1.52071,5.49664],[3.45283,4.46156],[4.38249,2.02716],[1.96507,3.65992],[1.67939,5.20169],[3.69752,3.54822],[1.98418,4.18815],[2.05311,3.77574],[2.17374,5.23856],[4.39181,2.69166],[1.99447,4.43024],[2.31587,4.50532],[4.12858,2.92604],[1.83536,3.89734],[1.90521,4.52534],[1.93875,4.31028],[2.14442,3.92582],[4.6594,4.61892],[2.26924,4.16848],[1.95023,3.73793],[1.87581,3.80662],[1.76514,4.97128],[2.22303,4.53389],[2.08736,5.22768],[3.9837,2.94672],[1.75874,4.11277],[1.90658,3.95664],[3.93468,3.76671],[1.91355,4.3162],[1.73656,4.62676],[2.04966,3.77582],[4.06153,2.99404],[1.85787,3.79925],[3.9668,3.57586],[1.74533,4.61946],[1.88917,3.7556],[1.92338,3.99228],[3.9554,3.35163],[4.3718,3.74542],[4.51619,3.32563],[1.82443,3.91636],[3.7452,4.23174],[2.14206,3.80414],[1.74487,4.22914],[2.00153,4.6939],[3.58587,4.2527],[2.03426,3.9416],[2.02164,4.35293],[2.15291,3.88556],[2.09161,4.5208],[4.15903,2.57774],[2.02716,4.10576],[2.06593,4.27596],[1.98504,4.35804],[1.6599,5.20614],[3.55331,4.53257],[2.1595,5.1943],[1.9567,4.13467],[3.77977,3.19613],[3.92426,3.09671],[1.82256,4.93183],[3.69928,3.76031],[1.98932,5.5019],[3.74729,3.75099],[1.94925,4.03651],[2.16835,3.86369],[2.1798,4.00998],[1.81269,4.29334],[2.13131,4.02678],[1.83852,3.74919],[2.11621,3.88332],[1.81558,4.00912],[1.99256,4.32307],[1.66707,4.52886],[1.96266,4.39922],[3.97225,3.38492],[1.65223,5.06795],[4.29057,4.75009],[2.20411,4.14333],[2.17586,4.40367],[3.90231,3.60225],[3.92909,3.8869],[1.70315,4.81818],[2.24425,4.09978],[1.90814,3.63785],[3.47425,4.59311],[3.73113,3.55807],[1.91698,3.77111],[1.81938,3.84056],[1.76361,4.15872],[1.87965,4.78159],[2.09657,3.97079],[1.95035,3.62374],[2.00272,3.78734],[1.81893,4.39918],[2.38622,5.27566],[3.80242,3.31876],[1.81735,4.26504],[1.98203,4.37816],[4.0835,3.15604],[2.11292,3.96548],[1.80881,4.46105],[1.78193,3.99837],[4.27866,3.65668],[2.01838,3.70152],[2.0522,5.91617],[2.0571,4.17637],[4.37215,2.3797],[4.3756,2.8619],[1.9237,3.62198],[1.91684,4.18848],[2.24574,4.38093],[4.08802,2.56542],[1.89337,3.97565],[2.34922,4.3789],[1.84492,4.01561],[2.01531,4.67593],[1.59523,5.2275],[2.10014,3.96242],[2.08421,4.69198],[1.51404,6.09305],[4.06521,2.31225],[2.20556,4.17818],[4.30611,2.48487],[2.00192,3.85128],[2.03614,4.07442],[1.80466,4.02198],[1.91203,4.12527],[1.80386,4.04376],[1.91082,4.02008],[2.40305,5.29279],[1.88667,3.98411]] color=lightsalmon3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1,class=Drawable name=Out implementation=class=Cloud name=Out derived from class=DrawableImplementation name=Out legend=Out data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=4843 dimension=2 data=[[2.00388,1.72029],[2.65555,3.35714],[1.04485,0.644341],...,[0.454129,2.46771],[3.02361,2.97294],[0.380889,2.30563]] color=darkseagreen3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1]



.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: Python

    domain = drawEvent.fillEventCrossCut(bounds)
    _ = otv.View(domain)





.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_004.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-96

.. code-block:: Python

    domain.add(cloud)
    _ = otv.View(domain)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_005.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 97-98

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.870 seconds)


.. _sphx_glr_download_auto_examples_reliability_problems_plot_rp53.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_rp53.ipynb <plot_rp53.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_rp53.py <plot_rp53.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_rp53.zip <plot_rp53.zip>`
