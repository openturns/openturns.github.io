
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/reliability_problems/plot_rp53.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_reliability_problems_plot_rp53.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_reliability_problems_plot_rp53.py:


RP53 analysis and 2D graphics
=============================

.. GENERATED FROM PYTHON SOURCE LINES 7-9

The objective of this example is to present problem 53 of the BBRC.
We also present graphic elements for the visualization of the limit state surface in 2 dimensions.

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as otv
    import otbenchmark as otb









.. GENERATED FROM PYTHON SOURCE LINES 17-19

.. code-block:: Python

    problem = otb.ReliabilityProblem53()








.. GENERATED FROM PYTHON SOURCE LINES 20-23

.. code-block:: Python

    event = problem.getEvent()
    g = event.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 24-26

.. code-block:: Python

    problem.getProbability()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0313



.. GENERATED FROM PYTHON SOURCE LINES 27-28

Create the Monte-Carlo algorithm

.. GENERATED FROM PYTHON SOURCE LINES 28-33

.. code-block:: Python

    algoProb = ot.ProbabilitySimulationAlgorithm(event)
    algoProb.setMaximumOuterSampling(1000)
    algoProb.setMaximumCoefficientOfVariation(0.01)
    algoProb.run()








.. GENERATED FROM PYTHON SOURCE LINES 34-35

Get the results

.. GENERATED FROM PYTHON SOURCE LINES 35-46

.. code-block:: Python

    resultAlgo = algoProb.getResult()
    neval = g.getEvaluationCallsNumber()
    print("Number of function calls = %d" % (neval))
    pf = resultAlgo.getProbabilityEstimate()
    print("Failure Probability = %.4f" % (pf))
    level = 0.95
    c95 = resultAlgo.getConfidenceLength(level)
    pmin = pf - 0.5 * c95
    pmax = pf + 0.5 * c95
    print("%.1f %% confidence interval :[%.4f,%.4f] " % (level * 100, pmin, pmax))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of function calls = 1000
    Failure Probability = 0.0320
    95.0 % confidence interval :[0.0211,0.0429] 




.. GENERATED FROM PYTHON SOURCE LINES 47-57

.. code-block:: Python

    inputVector = event.getAntecedent()
    distribution = inputVector.getDistribution()
    X1 = distribution.getMarginal(0)
    X2 = distribution.getMarginal(0)
    alpha = 1 - 1.0e-4
    bounds, marginalProb = distribution.computeMinimumVolumeIntervalWithMarginalProbability(
        alpha
    )









.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: Python

    _ = otv.View(X1.drawPDF())




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_001.png
   :alt: plot rp53
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 61-63

Print the iso-values of the distribution
----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: Python

    _ = otv.View(distribution.drawPDF())





.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_002.png
   :alt: [X1,X2] iso-PDF
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-73

.. code-block:: Python

    sampleSize = 5000
    drawEvent = otb.DrawEvent(event)









.. GENERATED FROM PYTHON SOURCE LINES 74-77

.. code-block:: Python

    cloud = drawEvent.drawSampleCrossCut(sampleSize)
    _ = otv.View(cloud)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_003.png
   :alt: Points X s.t. g(X) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-80

Draw the limit state surface
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: Python

    graph = drawEvent.drawLimitStateCrossCut(bounds)
    graph.add(cloud)
    graph






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    class=Graph name=Limit state surface implementation=class=GraphImplementation name=Limit state surface title=Limit state surface xTitle=x1 yTitle=x2 axes=ON grid=ON legendposition= legendFontSize=1 drawables=[class=Drawable name=Unnamed implementation=class=Contour name=Unnamed x=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=52 dimension=1 description=[t] data=[[-2.55562],[-2.39658],[-2.23753],[-2.07849],[-1.91945],[-1.7604],[-1.60136],[-1.44231],[-1.28327],[-1.12423],[-0.965181],[-0.806138],[-0.647094],[-0.48805],[-0.329006],[-0.169962],[-0.0109177],[0.148126],[0.30717],[0.466214],[0.625258],[0.784302],[0.943346],[1.10239],[1.26143],[1.42048],[1.57952],[1.73857],[1.89761],[2.05665],[2.2157],[2.37474],[2.53379],[2.69283],[2.85187],[3.01092],[3.16996],[3.32901],[3.48805],[3.64709],[3.80614],[3.96518],[4.12423],[4.28327],[4.44231],[4.60136],[4.7604],[4.91945],[5.07849],[5.23753],[5.39658],[5.55562]] y=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=52 dimension=1 description=[t] data=[[-1.55562],[-1.39658],[-1.23753],[-1.07849],[-0.919445],[-0.760401],[-0.601357],[-0.442313],[-0.283269],[-0.124225],[0.0348185],[0.193862],[0.352906],[0.51195],[0.670994],[0.830038],[0.989082],[1.14813],[1.30717],[1.46621],[1.62526],[1.7843],[1.94335],[2.10239],[2.26143],[2.42048],[2.57952],[2.73857],[2.89761],[3.05665],[3.2157],[3.37474],[3.53379],[3.69283],[3.85187],[4.01092],[4.16996],[4.32901],[4.48805],[4.64709],[4.80614],[4.96518],[5.12423],[5.28327],[5.44231],[5.60136],[5.7604],[5.91945],[6.07849],[6.23753],[6.39658],[6.55562]] levels=class=Point name=Unnamed dimension=1 values=[0] labels=[0.0] show labels=true isFilled=false colorBarPosition=right isVminUsed=false vmin=0 isVmaxUsed=false vmax=0 colorMap=hsv alpha=1 norm=linear extend=both hatches=[] derived from class=DrawableImplementation name=Unnamed legend= data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=2704 dimension=1 description=[y0] data=[[3.24002],[3.53267],[3.7869],...,[-6.2278],[-6.40229],[-6.71544]] color=#1f77b4 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=plus lineWidth=1,class=Drawable name=In implementation=class=Cloud name=In derived from class=DrawableImplementation name=In legend=In data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=166 dimension=2 data=[[3.63244,4.07786],[4.1932,4.26641],[2.08526,4.0444],[3.85207,2.99662],[3.61589,3.97022],[1.92848,3.84556],[4.60941,3.50872],[2.21084,4.14237],[1.70235,4.34053],[1.72731,4.16577],[1.96913,3.7041],[4.25394,2.75154],[2.05014,4.13345],[2.18889,4.82789],[4.17453,3.37902],[1.92234,4.00842],[2.22356,4.10505],[2.18244,4.28282],[1.84032,4.50418],[1.87393,3.9659],[1.91094,4.21034],[4.73175,4.24495],[2.0413,3.8956],[1.90987,3.62539],[2.31884,4.51263],[2.3833,4.64104],[3.39781,4.85938],[1.87883,5.19157],[2.02615,4.05768],[2.39553,4.552],[3.74528,3.8494],[1.84523,4.01022],[1.95554,3.83246],[2.15909,3.91796],[3.94501,2.93173],[2.06349,3.70196],[4.11191,3.68641],[2.29048,4.78005],[2.16284,3.88101],[2.00894,4.15022],[1.98914,4.05441],[2.14443,4.13225],[2.08162,4.23573],[4.46362,3.37158],[2.09946,4.1428],[3.40552,6.2939],[1.88502,3.65125],[1.94115,3.99415],[2.05421,4.73911],[3.28395,5.04444],[2.07221,3.67775],[3.548,4.92252],[3.62871,4.8772],[2.30715,4.30597],[3.86015,4.48043],[1.79369,3.87516],[2.78492,5.48319],[1.99967,4.22977],[1.98974,4.53555],[1.70955,4.66018],[2.05809,4.13039],[1.83611,3.95745],[1.92945,4.84783],[4.67865,2.56959],[1.92505,3.64287],[2.13103,4.17263],[1.9892,4.10013],[3.50865,4.61228],[1.88443,4.76885],[2.21081,5.124],[2.03569,3.7317],[1.88208,4.05761],[2.22551,4.44935],[2.09629,4.56034],[1.86117,3.72204],[2.0921,4.06998],[2.14158,3.90833],[2.32731,4.58304],[2.02714,3.78265],[1.71401,4.8961],[3.92911,3.35801],[2.10605,3.77451],[1.99008,3.72786],[4.2757,5.56539],[1.928,4.1423],[1.96835,4.04374],[1.88244,5.05269],[2.15207,4.36476],[2.2637,4.74695],[2.31868,4.62938],[4.47241,2.08931],[3.94754,3.2058],[2.22298,4.32657],[1.83525,4.15329],[2.44396,4.94475],[1.95566,4.42147],[2.21088,4.82133],[2.10484,4.22672],[2.03155,4.96004],[2.03749,4.27984],[2.03812,4.94846],[1.75413,4.87484],[4.36072,2.73785],[2.03657,4.04928],[2.00126,4.78135],[4.53825,3.82472],[2.03828,4.1076],[2.18519,4.09645],[1.88589,4.50702],[1.97544,3.87336],[2.10883,4.26887],[1.7816,4.33764],[1.87583,5.28895],[4.20564,2.24956],[2.04113,4.02804],[2.52772,4.94034],[1.64894,5.30092],[2.01911,3.99134],[1.8284,3.76239],[2.0776,3.8283],[2.57338,5.10411],[3.94467,2.97784],[2.24435,4.20213],[2.11382,3.81507],[1.82031,3.96071],[2.19081,4.36665],[3.16594,5.34786],[1.95292,4.32287],[4.20431,2.4456],[1.96371,4.20093],[2.03916,3.84001],[2.03734,3.66699],[2.13046,4.16026],[2.20284,4.27149],[5.06991,4.14108],[1.91789,4.39699],[2.13101,4.48323],[1.78337,4.23758],[2.1148,4.7237],[2.14896,4.6625],[2.22402,5.01721],[1.93153,3.96472],[4.33185,3.26782],[1.97262,3.66753],[2.06865,3.77953],[1.93794,4.41327],[4.85126,2.77482],[3.13812,5.49178],[1.67554,4.6273],[4.75294,3.76378],[1.92983,3.7223],[2.48733,5.28641],[1.97964,3.71729],[4.1069,2.99863],[2.32,4.49538],[1.63367,5.41253],[1.94337,5.09258],[2.29115,4.28508],[1.95543,3.98393],[2.23473,4.7701],[1.87473,3.87107],[2.30258,4.57294],[2.21932,4.68489],[1.67704,4.79333],[1.95369,3.83219],[1.80069,4.11676]] color=lightsalmon3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1,class=Drawable name=Out implementation=class=Cloud name=Out derived from class=DrawableImplementation name=Out legend=Out data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=4834 dimension=2 data=[[2.11842,1.46627],[1.61219,2.53197],[2.04519,1.4485],...,[2.57276,3.70032],[0.506962,0.523562],[3.21759,0.695579]] color=darkseagreen3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1]



.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: Python

    domain = drawEvent.fillEventCrossCut(bounds)
    _ = otv.View(domain)





.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_004.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-96

.. code-block:: Python

    domain.add(cloud)
    _ = otv.View(domain)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_005.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp53_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 97-98

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.166 seconds)


.. _sphx_glr_download_auto_examples_reliability_problems_plot_rp53.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_rp53.ipynb <plot_rp53.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_rp53.py <plot_rp53.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_rp53.zip <plot_rp53.zip>`
