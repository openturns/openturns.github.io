
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/reliability_problems/plot_case_rs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_reliability_problems_plot_case_rs.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_reliability_problems_plot_case_rs.py:


R-S analysis and 2D graphics
============================

.. GENERATED FROM PYTHON SOURCE LINES 7-9

The objective of this example is to present the R-S problem.
We also present graphic elements for the visualization of the limit state surface in 2 dimensions.

.. GENERATED FROM PYTHON SOURCE LINES 11-15

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as otv
    import otbenchmark as otb








.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. code-block:: Python

    problem = otb.RminusSReliability()









.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: Python

    event = problem.getEvent()
    g = event.getFunction()









.. GENERATED FROM PYTHON SOURCE LINES 25-27

.. code-block:: Python

    problem.getProbability()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.07864960352514257



.. GENERATED FROM PYTHON SOURCE LINES 28-29

Create the Monte-Carlo algorithm

.. GENERATED FROM PYTHON SOURCE LINES 29-35

.. code-block:: Python

    algoProb = ot.ProbabilitySimulationAlgorithm(event)
    algoProb.setMaximumOuterSampling(1000)
    algoProb.setMaximumCoefficientOfVariation(0.01)
    algoProb.run()









.. GENERATED FROM PYTHON SOURCE LINES 36-37

Get the results

.. GENERATED FROM PYTHON SOURCE LINES 37-48

.. code-block:: Python

    resultAlgo = algoProb.getResult()
    neval = g.getEvaluationCallsNumber()
    print("Number of function calls = %d" % (neval))
    pf = resultAlgo.getProbabilityEstimate()
    print("Failure Probability = %.4f" % (pf))
    level = 0.95
    c95 = resultAlgo.getConfidenceLength(level)
    pmin = pf - 0.5 * c95
    pmax = pf + 0.5 * c95
    print("%.1f %% confidence interval :[%.4f,%.4f] " % (level * 100, pmin, pmax))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of function calls = 1000
    Failure Probability = 0.0680
    95.0 % confidence interval :[0.0524,0.0836] 




.. GENERATED FROM PYTHON SOURCE LINES 49-51

Plot the contours of the function
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: Python

    inputVector = event.getAntecedent()
    distribution = inputVector.getDistribution()








.. GENERATED FROM PYTHON SOURCE LINES 57-60

.. code-block:: Python

    R = distribution.getMarginal(0)
    S = distribution.getMarginal(1)








.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: Python

    alphaMin = 0.001
    alphaMax = 1 - alphaMin
    lowerBound = ot.Point([R.computeQuantile(alphaMin)[0], S.computeQuantile(alphaMin)[0]])
    upperBound = ot.Point([R.computeQuantile(alphaMax)[0], S.computeQuantile(alphaMax)[0]])








.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: Python

    nbPoints = [100, 100]
    _ = otv.View(g.draw(lowerBound, upperBound, nbPoints))




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_001.png
   :alt: y0 as a function of (R,S)
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 71-74

.. code-block:: Python

    Y = R - S
    Y






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    Normal
    <ul>
      <li>name=Normal</li>
      <li>dimension=1</li>
      <li>weight=1</li>
      <li>range=]-inf (-8.81962), (12.8196) +inf[</li>
      <li>description=[X0]</li>
      <li>isParallel=true</li>
      <li>isCopula=false</li>
    </ul>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: Python

    _ = otv.View(Y.drawPDF())




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_002.png
   :alt: plot case rs
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-80

Print the iso-values of the distribution
----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 82-84

.. code-block:: Python

    _ = otv.View(distribution.drawPDF())




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_003.png
   :alt: [R,S] iso-PDF
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 85-87

Visualise the safe and unsafe regions on a sample
-------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 89-91

.. code-block:: Python

    sampleSize = 500








.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: Python

    drawEvent = otb.DrawEvent(event)








.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. code-block:: Python

    cloud = drawEvent.drawSampleCrossCut(sampleSize)
    _ = otv.View(cloud)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_004.png
   :alt: Points X s.t. g(X) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 99-101

Draw the limit state surface
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 103-107

.. code-block:: Python

    bounds = ot.Interval(lowerBound, upperBound)
    bounds







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Interval name=Unnamed dimension=2 lower bound=class=Point name=Unnamed dimension=2 values=[0.909768,-1.09023] upper bound=class=Point name=Unnamed dimension=2 values=[7.09023,5.09023] finite lower bound=[1,1] finite upper bound=[1,1]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 108-112

.. code-block:: Python

    graph = drawEvent.drawLimitStateCrossCut(bounds)
    graph.add(cloud)
    _ = otv.View(graph)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_005.png
   :alt: Limit state surface
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 113-115

Fill the event domain with a color
----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 117-120

.. code-block:: Python

    domain = drawEvent.fillEventCrossCut(bounds)
    _ = otv.View(domain)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_006.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 121-125

.. code-block:: Python

    domain.setLegends(["", ""])
    domain.add(cloud)
    _ = otv.View(domain)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_007.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_case_rs_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 126-127

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.216 seconds)


.. _sphx_glr_download_auto_examples_reliability_problems_plot_case_rs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_case_rs.ipynb <plot_case_rs.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_case_rs.py <plot_case_rs.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_case_rs.zip <plot_case_rs.zip>`
