
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/reliability_problems/plot_rp75.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_reliability_problems_plot_rp75.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_reliability_problems_plot_rp75.py:


RP75 analysis and 2D graphics
=============================

.. GENERATED FROM PYTHON SOURCE LINES 7-15

The objective of this example is to present problem 75 of the BBRC.
We also present graphic elements for the visualization of the limit state surface in 2 dimensions.

This problem has two dimension and a reference probability approximately equal to $10^{-2}$.
Hence, the problem should be relatively easy to solve.
The failure domain is made of two separate sub-domains, leading to two different design points.
Hence, the FORM approximation cannot be accurate, because it systematically ignores one of them,
no matter what point is found by the optimization algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 17-21

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as otv
    import otbenchmark as otb








.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: Python

    problem = otb.ReliabilityProblem75()
    print(problem)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    name = RP75
    event = class=ThresholdEventImplementation antecedent=class=CompositeRandomVector function=class=Function name=Unnamed implementation=class=FunctionImplementation name=Unnamed description=[x1,x2,y0] evaluationImplementation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x1,x2] outputVariablesNames=[y0] formulas=[3 - x1 * x2] gradientImplementation=class=SymbolicGradient name=Unnamed evaluation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x1,x2] outputVariablesNames=[y0] formulas=[3 - x1 * x2] hessianImplementation=class=SymbolicHessian name=Unnamed evaluation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x1,x2] outputVariablesNames=[y0] formulas=[3 - x1 * x2] antecedent=class=UsualRandomVector distribution=class=JointDistribution name=JointDistribution dimension=2 copula=class=IndependentCopula name=IndependentCopula dimension=2 marginal[0]=class=Normal name=Normal dimension=1 mean=class=Point name=Unnamed dimension=1 values=[0] sigma=class=Point name=Unnamed dimension=1 values=[1] correlationMatrix=class=CorrelationMatrix dimension=1 implementation=class=MatrixImplementation name=Unnamed rows=1 columns=1 values=[1] marginal[1]=class=Normal name=Normal dimension=1 mean=class=Point name=Unnamed dimension=1 values=[0] sigma=class=Point name=Unnamed dimension=1 values=[1] correlationMatrix=class=CorrelationMatrix dimension=1 implementation=class=MatrixImplementation name=Unnamed rows=1 columns=1 values=[1] operator=class=Less name=Unnamed threshold=0
    probability = 0.00981929872154689





.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: Python

    event = problem.getEvent()
    g = event.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: Python

    problem.getProbability()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.00981929872154689



.. GENERATED FROM PYTHON SOURCE LINES 33-34

Create the Monte-Carlo algorithm

.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: Python

    algoProb = ot.ProbabilitySimulationAlgorithm(event)
    algoProb.setMaximumOuterSampling(1000)
    algoProb.setMaximumCoefficientOfVariation(0.01)
    algoProb.run()








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Get the results

.. GENERATED FROM PYTHON SOURCE LINES 41-52

.. code-block:: Python

    resultAlgo = algoProb.getResult()
    neval = g.getEvaluationCallsNumber()
    print("Number of function calls = %d" % (neval))
    pf = resultAlgo.getProbabilityEstimate()
    print("Failure Probability = %.4f" % (pf))
    level = 0.95
    c95 = resultAlgo.getConfidenceLength(level)
    pmin = pf - 0.5 * c95
    pmax = pf + 0.5 * c95
    print("%.1f %% confidence interval :[%.4f,%.4f] " % (level * 100, pmin, pmax))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of function calls = 1000
    Failure Probability = 0.0100
    95.0 % confidence interval :[0.0038,0.0162] 




.. GENERATED FROM PYTHON SOURCE LINES 53-55

Compute the bounds of the domain
--------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 57-70

.. code-block:: Python

    inputVector = event.getAntecedent()
    distribution = inputVector.getDistribution()
    X1 = distribution.getMarginal(0)
    X2 = distribution.getMarginal(1)
    alphaMin = 0.00001
    alphaMax = 1 - alphaMin
    lowerBound = ot.Point(
        [X1.computeQuantile(alphaMin)[0], X2.computeQuantile(alphaMin)[0]]
    )
    upperBound = ot.Point(
        [X1.computeQuantile(alphaMax)[0], X2.computeQuantile(alphaMax)[0]]
    )








.. GENERATED FROM PYTHON SOURCE LINES 71-76

.. code-block:: Python

    nbPoints = [100, 100]
    figure = g.draw(lowerBound, upperBound, nbPoints)
    figure.setTitle(" Iso-values of limit state function")
    figure





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    class=Graph name=y0 as a function of (x1,x2) implementation=class=GraphImplementation name=y0 as a function of (x1,x2) title= Iso-values of limit state function xTitle=x1 yTitle=x2 axes=ON grid=ON legendposition=upper left legendFontSize=1 drawables=[class=Drawable name=Unnamed implementation=class=Contour name=Unnamed x=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=100 dimension=1 data=[[-4.26489],[-4.17873],[-4.09257],[-4.00641],[-3.92025],[-3.83409],[-3.74793],[-3.66177],[-3.57562],[-3.48946],[-3.4033],[-3.31714],[-3.23098],[-3.14482],[-3.05866],[-2.9725],[-2.88634],[-2.80018],[-2.71402],[-2.62786],[-2.5417],[-2.45554],[-2.36938],[-2.28322],[-2.19706],[-2.11091],[-2.02475],[-1.93859],[-1.85243],[-1.76627],[-1.68011],[-1.59395],[-1.50779],[-1.42163],[-1.33547],[-1.24931],[-1.16315],[-1.07699],[-0.990833],[-0.904674],[-0.818514],[-0.732355],[-0.646196],[-0.560036],[-0.473877],[-0.387717],[-0.301558],[-0.215399],[-0.129239],[-0.0430797],[0.0430797],[0.129239],[0.215399],[0.301558],[0.387717],[0.473877],[0.560036],[0.646196],[0.732355],[0.818514],[0.904674],[0.990833],[1.07699],[1.16315],[1.24931],[1.33547],[1.42163],[1.50779],[1.59395],[1.68011],[1.76627],[1.85243],[1.93859],[2.02475],[2.11091],[2.19706],[2.28322],[2.36938],[2.45554],[2.5417],[2.62786],[2.71402],[2.80018],[2.88634],[2.9725],[3.05866],[3.14482],[3.23098],[3.31714],[3.4033],[3.48946],[3.57562],[3.66177],[3.74793],[3.83409],[3.92025],[4.00641],[4.09257],[4.17873],[4.26489]] y=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=100 dimension=1 data=[[-4.26489],[-4.17873],[-4.09257],[-4.00641],[-3.92025],[-3.83409],[-3.74793],[-3.66177],[-3.57562],[-3.48946],[-3.4033],[-3.31714],[-3.23098],[-3.14482],[-3.05866],[-2.9725],[-2.88634],[-2.80018],[-2.71402],[-2.62786],[-2.5417],[-2.45554],[-2.36938],[-2.28322],[-2.19706],[-2.11091],[-2.02475],[-1.93859],[-1.85243],[-1.76627],[-1.68011],[-1.59395],[-1.50779],[-1.42163],[-1.33547],[-1.24931],[-1.16315],[-1.07699],[-0.990833],[-0.904674],[-0.818514],[-0.732355],[-0.646196],[-0.560036],[-0.473877],[-0.387717],[-0.301558],[-0.215399],[-0.129239],[-0.0430797],[0.0430797],[0.129239],[0.215399],[0.301558],[0.387717],[0.473877],[0.560036],[0.646196],[0.732355],[0.818514],[0.904674],[0.990833],[1.07699],[1.16315],[1.24931],[1.33547],[1.42163],[1.50779],[1.59395],[1.68011],[1.76627],[1.85243],[1.93859],[2.02475],[2.11091],[2.19706],[2.28322],[2.36938],[2.45554],[2.5417],[2.62786],[2.71402],[2.80018],[2.88634],[2.9725],[3.05866],[3.14482],[3.23098],[3.31714],[3.4033],[3.48946],[3.57562],[3.66177],[3.74793],[3.83409],[3.92025],[4.00641],[4.09257],[4.17873],[4.26489]] levels=class=Point name=Unnamed dimension=10 values=[-7.88462,-3.19301,-0.457469,1.38355,2.61584,3.38416,4.61645,6.4686,9.19301,13.9366] labels=[-7.88462,-3.19301,-0.457469,1.38355,2.61584,3.38416,4.61645,6.4686,9.19301,13.9366] show labels=false isFilled=false colorBarPosition=right isVminUsed=false vmin=0 isVmaxUsed=false vmax=0 colorMap=hsv alpha=1 norm=linear extend=both hatches=[] derived from class=DrawableImplementation name=Unnamed legend= data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=10000 dimension=1 description=[y0] data=[[-15.1893],[-14.8218],[-14.4544],...,[-14.4544],[-14.8218],[-15.1893]] color=#1f77b4 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=plus lineWidth=1]



.. GENERATED FROM PYTHON SOURCE LINES 77-79

Print the iso-values of the distribution
----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 81-83

.. code-block:: Python

    _ = otv.View(distribution.drawPDF())




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp75_001.png
   :alt: [X1,X2] iso-PDF
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp75_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-87

.. code-block:: Python

    sampleSize = 5000
    drawEvent = otb.DrawEvent(event)








.. GENERATED FROM PYTHON SOURCE LINES 88-91

.. code-block:: Python

    cloud = drawEvent.drawSampleCrossCut(sampleSize)
    _ = otv.View(cloud)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp75_002.png
   :alt: Points X s.t. g(X) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp75_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 92-94

Draw the limit state surface
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: Python

    bounds = ot.Interval(lowerBound, upperBound)
    bounds






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Interval name=Unnamed dimension=2 lower bound=class=Point name=Unnamed dimension=2 values=[-4.26489,-4.26489] upper bound=class=Point name=Unnamed dimension=2 values=[4.26489,4.26489] finite lower bound=[1,1] finite upper bound=[1,1]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: Python

    graph = drawEvent.drawLimitStateCrossCut(bounds)
    graph.add(cloud)
    graph





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    class=Graph name=Limit state surface implementation=class=GraphImplementation name=Limit state surface title=Limit state surface xTitle=x1 yTitle=x2 axes=ON grid=ON legendposition= legendFontSize=1 drawables=[class=Drawable name=Unnamed implementation=class=Contour name=Unnamed x=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=52 dimension=1 description=[t] data=[[-4.26489],[-4.09764],[-3.93039],[-3.76314],[-3.59589],[-3.42864],[-3.26139],[-3.09414],[-2.92689],[-2.75964],[-2.59238],[-2.42513],[-2.25788],[-2.09063],[-1.92338],[-1.75613],[-1.58888],[-1.42163],[-1.25438],[-1.08713],[-0.919878],[-0.752628],[-0.585377],[-0.418127],[-0.250876],[-0.0836253],[0.0836253],[0.250876],[0.418127],[0.585377],[0.752628],[0.919878],[1.08713],[1.25438],[1.42163],[1.58888],[1.75613],[1.92338],[2.09063],[2.25788],[2.42513],[2.59238],[2.75964],[2.92689],[3.09414],[3.26139],[3.42864],[3.59589],[3.76314],[3.93039],[4.09764],[4.26489]] y=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=52 dimension=1 description=[t] data=[[-4.26489],[-4.09764],[-3.93039],[-3.76314],[-3.59589],[-3.42864],[-3.26139],[-3.09414],[-2.92689],[-2.75964],[-2.59238],[-2.42513],[-2.25788],[-2.09063],[-1.92338],[-1.75613],[-1.58888],[-1.42163],[-1.25438],[-1.08713],[-0.919878],[-0.752628],[-0.585377],[-0.418127],[-0.250876],[-0.0836253],[0.0836253],[0.250876],[0.418127],[0.585377],[0.752628],[0.919878],[1.08713],[1.25438],[1.42163],[1.58888],[1.75613],[1.92338],[2.09063],[2.25788],[2.42513],[2.59238],[2.75964],[2.92689],[3.09414],[3.26139],[3.42864],[3.59589],[3.76314],[3.93039],[4.09764],[4.26489]] levels=class=Point name=Unnamed dimension=1 values=[0] labels=[0.0] show labels=true isFilled=false colorBarPosition=right isVminUsed=false vmin=0 isVmaxUsed=false vmax=0 colorMap=hsv alpha=1 norm=linear extend=both hatches=[] derived from class=DrawableImplementation name=Unnamed legend= data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=2704 dimension=1 description=[y0] data=[[-15.1893],[-14.476],[-13.7627],...,[-13.7627],[-14.476],[-15.1893]] color=#1f77b4 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=plus lineWidth=1,class=Drawable name=In implementation=class=Cloud name=In derived from class=DrawableImplementation name=In legend=In data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=61 dimension=2 data=[[-1.34819,-2.99407],[-2.08875,-1.93242],[-2.03456,-1.72363],[2.49915,1.26252],[1.97895,1.6723],[1.09624,3.09055],[1.13631,2.71964],[1.82218,2.68576],[1.51052,2.302],[-1.04806,-3.524],[2.00456,3.52552],[1.44624,2.52663],[-1.91784,-1.87078],[1.67195,2.66483],[1.95178,2.26255],[-1.86479,-1.81695],[-2.19636,-1.7],[2.50555,1.28352],[2.36524,1.8556],[-1.82682,-1.65377],[1.97674,1.77297],[-2.56065,-2.54087],[1.34744,2.82412],[1.12801,2.7621],[2.2636,1.90626],[-2.76545,-1.38561],[2.07717,1.4591],[-1.86391,-2.12519],[-2.0195,-1.86233],[-2.19896,-1.69712],[-2.63522,-2.00721],[-1.83842,-1.76217],[2.18619,1.80621],[2.17302,1.58099],[1.97239,3.06436],[-2.8622,-1.33292],[2.10986,1.48008],[1.69267,2.21628],[2.26703,1.52558],[2.04762,2.88467],[-2.49719,-1.29891],[2.02934,1.831],[-1.93856,-1.63908],[1.82287,1.66377],[2.7139,1.43914],[-1.52777,-2.97041],[2.14403,2.40132],[2.04077,1.77751],[-2.29153,-2.19108],[2.23117,1.942],[-2.06362,-1.62375],[-1.70934,-2.01463],[-1.52207,-2.55256],[1.32591,2.67354],[-1.32759,-2.48679],[-1.53127,-1.97925],[-1.62576,-2.17554],[1.40189,2.34083],[-2.04507,-1.47174],[1.49769,2.06651],[-1.85611,-2.24385]] color=lightsalmon3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1,class=Drawable name=Out implementation=class=Cloud name=Out derived from class=DrawableImplementation name=Out legend=Out data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=4939 dimension=2 data=[[-0.744752,-1.17004],[0.223184,-0.0188594],[-0.220696,0.528501],...,[-1.13176,-0.065086],[-0.26244,0.840577],[0.849263,-1.07025]] color=darkseagreen3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1]



.. GENERATED FROM PYTHON SOURCE LINES 105-108

.. code-block:: Python

    domain = drawEvent.fillEventCrossCut(bounds)
    _ = otv.View(domain)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp75_003.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp75_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-112

.. code-block:: Python

    domain.add(cloud)
    _ = otv.View(domain)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp75_004.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp75_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 113-115

Test with FORM method
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 117-118

We create a NearestPoint algorithm

.. GENERATED FROM PYTHON SOURCE LINES 118-127

.. code-block:: Python

    nearestPointAlgorithm = ot.Cobyla()
    # Resolution options:
    eps = 1e-3
    nearestPointAlgorithm.setMaximumCallsNumber(1000)
    nearestPointAlgorithm.setMaximumAbsoluteError(eps)
    nearestPointAlgorithm.setMaximumRelativeError(eps)
    nearestPointAlgorithm.setMaximumResidualError(eps)
    nearestPointAlgorithm.setMaximumConstraintError(eps)








.. GENERATED FROM PYTHON SOURCE LINES 128-138

.. code-block:: Python

    initialNumberOfCall = g.getEvaluationCallsNumber()
    mean = distribution.getMean()
    algoFORM = ot.FORM(nearestPointAlgorithm, event, mean)
    algoFORM.run()
    resultFORM = algoFORM.getResult()
    numberOfFunctionEvaluationsFORM = g.getEvaluationCallsNumber() - initialNumberOfCall
    probabilityFORM = resultFORM.getEventProbability()
    print("Number of calls to the limit state =", numberOfFunctionEvaluationsFORM)
    print("Pf =", probabilityFORM)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of calls to the limit state = 155
    Pf = 0.007161044716104123




.. GENERATED FROM PYTHON SOURCE LINES 139-140

We create a NearestPoint algorithm

.. GENERATED FROM PYTHON SOURCE LINES 140-149

.. code-block:: Python

    nearestPointAlgorithm = ot.AbdoRackwitz()
    # Resolution options:
    eps = 1e-3
    nearestPointAlgorithm.setMaximumCallsNumber(100)
    nearestPointAlgorithm.setMaximumAbsoluteError(eps)
    nearestPointAlgorithm.setMaximumRelativeError(eps)
    nearestPointAlgorithm.setMaximumResidualError(eps)
    nearestPointAlgorithm.setMaximumConstraintError(eps)








.. GENERATED FROM PYTHON SOURCE LINES 150-155

If the mean point is used as a starting point with the `AbdoRackwitz` class, then the algorithm fails with:
```
RuntimeError: InternalException : Error in Abdo Rackwitz algorithm: the gradient of the level function is zero ...
```
In order to fix this, we just use a different starting point.

.. GENERATED FROM PYTHON SOURCE LINES 157-159

.. code-block:: Python

    startingPoint = mean + [1.0e-3] * 2








.. GENERATED FROM PYTHON SOURCE LINES 160-170

.. code-block:: Python

    initialNumberOfCall = g.getEvaluationCallsNumber()
    mean = distribution.getMean()
    algoFORM = ot.FORM(nearestPointAlgorithm, event, startingPoint)
    algoFORM.run()
    resultFORM = algoFORM.getResult()
    numberOfFunctionEvaluationsFORM = g.getEvaluationCallsNumber() - initialNumberOfCall
    probabilityFORM = resultFORM.getEventProbability()
    print("Number of calls to the limit state =", numberOfFunctionEvaluationsFORM)
    print("Pf =", probabilityFORM)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of calls to the limit state = 16
    Pf = 0.007148267752544499




.. GENERATED FROM PYTHON SOURCE LINES 171-173

.. code-block:: Python

    mean






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[0,0]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 174-176

.. code-block:: Python

    g.gradient(mean)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ -0 ]<br>
     [ -0 ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 177-178

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.139 seconds)


.. _sphx_glr_download_auto_examples_reliability_problems_plot_rp75.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_rp75.ipynb <plot_rp75.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_rp75.py <plot_rp75.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_rp75.zip <plot_rp75.zip>`
