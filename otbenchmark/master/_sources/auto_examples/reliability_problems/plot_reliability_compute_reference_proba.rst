
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/reliability_problems/plot_reliability_compute_reference_proba.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_reliability_problems_plot_reliability_compute_reference_proba.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_reliability_problems_plot_reliability_compute_reference_proba.py:


Compute reference probabilities with Monte-Carlo
================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-10

In this example, we perform a reliability benchmark based on a large Monte-Carlo sample.
In order to limit the elapsed time, we consider a limited elapsed time for each problem.
In order to get the best possible accuracy within this time limit, we set the coefficient of variation to zero.

.. GENERATED FROM PYTHON SOURCE LINES 12-19

.. code-block:: Python

    import otbenchmark as otb
    import pandas as pd
    import numpy as np
    from tqdm import tqdm
    import time









.. GENERATED FROM PYTHON SOURCE LINES 20-25

.. code-block:: Python

    problemslist = otb.ReliabilityBenchmarkProblemList()
    numberOfProblems = len(problemslist)
    numberOfProblems






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    26



.. GENERATED FROM PYTHON SOURCE LINES 26-31

.. code-block:: Python

    coefficientOfVariation = 0.0
    maximumOuterSampling = 10 ** 4  # 10 ** 6 for real
    blockSize = 10 ** 0  # 10 ** 4 for real simulations
    blockSize





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1



.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: Python

    confidenceLevel = 0.95
    maximumDurationSeconds = 5 * 60.0








.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: Python

    totalDurationMinutes = numberOfProblems * maximumDurationSeconds / 60.0
    totalDurationMinutes





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    130.0



.. GENERATED FROM PYTHON SOURCE LINES 40-79

.. code-block:: Python

    model_names = [problemslist[i].getName() for i in range(numberOfProblems)]
    metrics = ["PF", "N. function calls", "PMin", "PMax", "C.O.V.", "Digits", "Time (s)"]
    resultArray = np.zeros((numberOfProblems, len(metrics)))
    for i in tqdm(range(numberOfProblems)):
        startTime = time.time()
        problem = problemslist[i]
        name = problem.getName()
        event = problem.getEvent()
        g = event.getFunction()
        factory = otb.ProbabilitySimulationAlgorithmFactory()
        algo = factory.buildMonteCarlo(problem)
        algo.setMaximumOuterSampling(maximumOuterSampling)
        algo.setBlockSize(blockSize)
        algo.setMaximumCoefficientOfVariation(coefficientOfVariation)
        algo.setMaximumTimeDuration(maximumDurationSeconds)
        initialNumberOfCall = g.getEvaluationCallsNumber()
        algo.run()
        result = algo.getResult()
        numberOfFunctionEvaluations = g.getEvaluationCallsNumber() - initialNumberOfCall
        computedProbability = result.getProbabilityEstimate()
        confidenceLength = result.getConfidenceLength(confidenceLevel)
        pmin = computedProbability - 0.5 * confidenceLength
        pmax = computedProbability + 0.5 * confidenceLength
        cov = result.getCoefficientOfVariation()
        if cov > 0.0:
            expectedDigits = -np.log10(cov) - 1.0
        else:
            expectedDigits = 0.0
        stopTime = time.time()
        elapsedTime = stopTime - startTime
        resultArray[i][0] = computedProbability
        resultArray[i][1] = numberOfFunctionEvaluations
        resultArray[i][2] = pmin
        resultArray[i][3] = pmax
        resultArray[i][4] = cov
        resultArray[i][5] = expectedDigits
        resultArray[i][6] = elapsedTime






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/26 [00:00<?, ?it/s]      4%|▍         | 1/26 [00:00<00:16,  1.53it/s]      8%|▊         | 2/26 [00:00<00:09,  2.63it/s]     15%|█▌        | 4/26 [00:00<00:03,  5.71it/s]     23%|██▎       | 6/26 [00:01<00:02,  8.31it/s]     31%|███       | 8/26 [00:01<00:01, 10.65it/s]     38%|███▊      | 10/26 [00:01<00:01, 11.85it/s]     46%|████▌     | 12/26 [00:01<00:01, 13.41it/s]     54%|█████▍    | 14/26 [00:01<00:01, 11.12it/s]     62%|██████▏   | 16/26 [00:01<00:00, 12.70it/s]     69%|██████▉   | 18/26 [00:01<00:00, 11.86it/s]     77%|███████▋  | 20/26 [00:03<00:01,  4.54it/s]     85%|████████▍ | 22/26 [00:03<00:00,  4.00it/s]     92%|█████████▏| 24/26 [00:03<00:00,  5.22it/s]    100%|██████████| 26/26 [00:03<00:00,  6.72it/s]    100%|██████████| 26/26 [00:03<00:00,  6.72it/s]




.. GENERATED FROM PYTHON SOURCE LINES 80-84

.. code-block:: Python

    df = pd.DataFrame(resultArray, index=model_names, columns=metrics)
    # df.to_csv("reliability_compute_reference_proba.csv")
    df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>PF</th>
          <th>N. function calls</th>
          <th>PMin</th>
          <th>PMax</th>
          <th>C.O.V.</th>
          <th>Digits</th>
          <th>Time (s)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>RP8</th>
          <td>0.0007</td>
          <td>10000.0</td>
          <td>0.000182</td>
          <td>0.001218</td>
          <td>0.377832</td>
          <td>-0.577299</td>
          <td>0.652181</td>
        </tr>
        <tr>
          <th>RP14</th>
          <td>0.0009</td>
          <td>10000.0</td>
          <td>0.000312</td>
          <td>0.001488</td>
          <td>0.333183</td>
          <td>-0.522683</td>
          <td>0.189734</td>
        </tr>
        <tr>
          <th>RP22</th>
          <td>0.0031</td>
          <td>10000.0</td>
          <td>0.002010</td>
          <td>0.004190</td>
          <td>0.179327</td>
          <td>-0.253645</td>
          <td>0.051208</td>
        </tr>
        <tr>
          <th>RP24</th>
          <td>0.0030</td>
          <td>10000.0</td>
          <td>0.001928</td>
          <td>0.004072</td>
          <td>0.182300</td>
          <td>-0.260787</td>
          <td>0.054883</td>
        </tr>
        <tr>
          <th>RP25</th>
          <td>0.0000</td>
          <td>10000.0</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>-1.000000</td>
          <td>0.000000</td>
          <td>0.059412</td>
        </tr>
        <tr>
          <th>RP28</th>
          <td>0.0000</td>
          <td>10000.0</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>-1.000000</td>
          <td>0.000000</td>
          <td>0.058447</td>
        </tr>
        <tr>
          <th>RP31</th>
          <td>0.0032</td>
          <td>10000.0</td>
          <td>0.002093</td>
          <td>0.004307</td>
          <td>0.176494</td>
          <td>-0.246729</td>
          <td>0.054910</td>
        </tr>
        <tr>
          <th>RP33</th>
          <td>0.0028</td>
          <td>10000.0</td>
          <td>0.001764</td>
          <td>0.003836</td>
          <td>0.188717</td>
          <td>-0.275812</td>
          <td>0.054384</td>
        </tr>
        <tr>
          <th>RP35</th>
          <td>0.0034</td>
          <td>10000.0</td>
          <td>0.002259</td>
          <td>0.004541</td>
          <td>0.171207</td>
          <td>-0.233521</td>
          <td>0.044850</td>
        </tr>
        <tr>
          <th>RP38</th>
          <td>0.0082</td>
          <td>10000.0</td>
          <td>0.006432</td>
          <td>0.009968</td>
          <td>0.109978</td>
          <td>-0.041305</td>
          <td>0.090779</td>
        </tr>
        <tr>
          <th>RP53</th>
          <td>0.0339</td>
          <td>10000.0</td>
          <td>0.030353</td>
          <td>0.037447</td>
          <td>0.053384</td>
          <td>0.272589</td>
          <td>0.055494</td>
        </tr>
        <tr>
          <th>RP55</th>
          <td>0.5588</td>
          <td>10000.0</td>
          <td>0.549068</td>
          <td>0.568532</td>
          <td>0.008886</td>
          <td>1.051310</td>
          <td>0.055751</td>
        </tr>
        <tr>
          <th>RP54</th>
          <td>0.0009</td>
          <td>10000.0</td>
          <td>0.000312</td>
          <td>0.001488</td>
          <td>0.333183</td>
          <td>-0.522683</td>
          <td>0.186060</td>
        </tr>
        <tr>
          <th>RP57</th>
          <td>0.0283</td>
          <td>10000.0</td>
          <td>0.025050</td>
          <td>0.031550</td>
          <td>0.058597</td>
          <td>0.232127</td>
          <td>0.056069</td>
        </tr>
        <tr>
          <th>RP75</th>
          <td>0.0094</td>
          <td>10000.0</td>
          <td>0.007509</td>
          <td>0.011291</td>
          <td>0.102656</td>
          <td>-0.011385</td>
          <td>0.054269</td>
        </tr>
        <tr>
          <th>RP89</th>
          <td>0.0055</td>
          <td>10000.0</td>
          <td>0.004050</td>
          <td>0.006950</td>
          <td>0.134469</td>
          <td>-0.128621</td>
          <td>0.055397</td>
        </tr>
        <tr>
          <th>RP107</th>
          <td>0.0000</td>
          <td>10000.0</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>-1.000000</td>
          <td>0.000000</td>
          <td>0.136680</td>
        </tr>
        <tr>
          <th>RP110</th>
          <td>0.0000</td>
          <td>10000.0</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>-1.000000</td>
          <td>0.000000</td>
          <td>0.056107</td>
        </tr>
        <tr>
          <th>RP111</th>
          <td>0.0000</td>
          <td>10000.0</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>-1.000000</td>
          <td>0.000000</td>
          <td>0.046841</td>
        </tr>
        <tr>
          <th>RP63</th>
          <td>0.0005</td>
          <td>10000.0</td>
          <td>0.000062</td>
          <td>0.000938</td>
          <td>0.447102</td>
          <td>-0.650406</td>
          <td>1.001051</td>
        </tr>
        <tr>
          <th>RP91</th>
          <td>0.0008</td>
          <td>10000.0</td>
          <td>0.000246</td>
          <td>0.001354</td>
          <td>0.353412</td>
          <td>-0.548281</td>
          <td>0.070034</td>
        </tr>
        <tr>
          <th>RP60</th>
          <td>0.0439</td>
          <td>10000.0</td>
          <td>0.039885</td>
          <td>0.047915</td>
          <td>0.046668</td>
          <td>0.330981</td>
          <td>0.563308</td>
        </tr>
        <tr>
          <th>RP77</th>
          <td>0.0000</td>
          <td>10000.0</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>-1.000000</td>
          <td>0.000000</td>
          <td>0.064567</td>
        </tr>
        <tr>
          <th>Four-branch serial system</th>
          <td>0.0028</td>
          <td>10000.0</td>
          <td>0.001764</td>
          <td>0.003836</td>
          <td>0.188717</td>
          <td>-0.275812</td>
          <td>0.052443</td>
        </tr>
        <tr>
          <th>R-S</th>
          <td>0.0770</td>
          <td>10000.0</td>
          <td>0.071775</td>
          <td>0.082225</td>
          <td>0.034622</td>
          <td>0.460645</td>
          <td>0.050569</td>
        </tr>
        <tr>
          <th>Axial stressed beam</th>
          <td>0.0313</td>
          <td>10000.0</td>
          <td>0.027887</td>
          <td>0.034713</td>
          <td>0.055632</td>
          <td>0.254678</td>
          <td>0.050478</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 85-127

The problems with higher failture probabilities are obviously solved with more accuracy with the Monte-Carlo method.
For example, the RP55 problem which has the highest probability equal to 0.560 has more than 3 significant digits.
On the opposite side, the problems with probabilities close to zero are much more difficult to solve.
The RP28 with a probability close to :math:`10^{-7}` has no significant digit.

These previous results are consistent with the distribution of the Monte-Carlo estimator.
The properties of the binomial distribution imply that its variance is:

.. math::
    \sigma_{p_f}^2 = \frac{p_f (1-p_f)}{n}

where :math:`n` is the sample size and :math:`p_f` is the failure probability.
The coefficient of variation is:

.. math::
    CV = \frac{\sigma_{p_f}}{p_f}.

Since we do not know the exact value of :math:`p_f`, we use is approximation :math:`\tilde{p_f}` instead
(this turns rigorous equations into approximate ones, but does not change the outcome).
This implies:

.. math::
    CV = \sqrt{\frac{1 - p_f}{p_f n}}.

When :math:`p_f\rightarrow 0`, we have :math:`p_f \rightarrow 0` which implies:

.. math::
     CV \rightarrow \sqrt{\frac{1}{p_f n}}.

Inverting the previous equation, we get the sample size given the coefficient of variation:

.. math::
    n \approx \frac{1}{p_f CV^2}.

This leads to the rule of thumb that, in order to estimate the probability :math:`p_f = 10^{-m}`,
where :math:`m` is an integer, we need a sample size equal to:

.. math::
    n \approx \frac{1}{10^{-m} 10^{-2}} = 10^{m+2}.

For example, estimating the probability of the RP28 problem with just one single digit leads to
a sample size equal to :math:`n=10^9`, since the exact :math:`p_f \approx 10^{-7}`.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.315 seconds)


.. _sphx_glr_download_auto_examples_reliability_problems_plot_reliability_compute_reference_proba.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_reliability_compute_reference_proba.ipynb <plot_reliability_compute_reference_proba.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_reliability_compute_reference_proba.py <plot_reliability_compute_reference_proba.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_reliability_compute_reference_proba.zip <plot_reliability_compute_reference_proba.zip>`
