
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/reliability_problems/plot_reliability_benchmark_table.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_reliability_problems_plot_reliability_benchmark_table.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_reliability_problems_plot_reliability_benchmark_table.py:


Benchmark the reliability solvers on the problems
=================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-8

In this example, we show how to run all the methods on all the problems and get the computed probability.

.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: Python

    import openturns as ot
    import numpy as np
    import otbenchmark as otb
    import pandas as pd
    from tqdm import tqdm








.. GENERATED FROM PYTHON SOURCE LINES 17-19

.. code-block:: Python

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 20-21

We import the list of reliability problems.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: Python

    benchmarkProblemList = otb.ReliabilityBenchmarkProblemList()
    numberOfProblems = len(benchmarkProblemList)
    numberOfProblems





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    26



.. GENERATED FROM PYTHON SOURCE LINES 26-27

For each problem in the benchmark, print the problem name and the exact failure probability.

.. GENERATED FROM PYTHON SOURCE LINES 27-33

.. code-block:: Python

    for i in range(numberOfProblems):
        problem = benchmarkProblemList[i]
        name = problem.getName()
        pf = problem.getProbability()
        print("#", i, " : ", name, ", exact PF : ", pf)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    # 0  :  RP8 , exact PF :  0.0007897927545597477
    # 1  :  RP14 , exact PF :  0.00077285
    # 2  :  RP22 , exact PF :  0.004207305511299618
    # 3  :  RP24 , exact PF :  0.00286
    # 4  :  RP25 , exact PF :  4.148566293759747e-05
    # 5  :  RP28 , exact PF :  1.4532945550025393e-07
    # 6  :  RP31 , exact PF :  0.003226681209587691
    # 7  :  RP33 , exact PF :  0.00257
    # 8  :  RP35 , exact PF :  0.00347894632
    # 9  :  RP38 , exact PF :  0.0081
    # 10  :  RP53 , exact PF :  0.0313
    # 11  :  RP55 , exact PF :  0.5600144282863704
    # 12  :  RP54 , exact PF :  0.000998
    # 13  :  RP57 , exact PF :  0.0284
    # 14  :  RP75 , exact PF :  0.00981929872154689
    # 15  :  RP89 , exact PF :  0.00543
    # 16  :  RP107 , exact PF :  2.92e-07
    # 17  :  RP110 , exact PF :  3.19e-05
    # 18  :  RP111 , exact PF :  7.65e-07
    # 19  :  RP63 , exact PF :  0.000379
    # 20  :  RP91 , exact PF :  0.000697
    # 21  :  RP60 , exact PF :  0.0456
    # 22  :  RP77 , exact PF :  2.87e-07
    # 23  :  Four-branch serial system , exact PF :  0.0022227950661944398
    # 24  :  R-S , exact PF :  0.07864960352514257
    # 25  :  Axial stressed beam , exact PF :  0.02919819462483095




.. GENERATED FROM PYTHON SOURCE LINES 34-36

Run several algorithms on a single problem
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 38-40

We want to run several algorithms on a single problem.
We set the parameters of the algorithms and run them on a single problem.

.. GENERATED FROM PYTHON SOURCE LINES 40-53

.. code-block:: Python

    maximumEvaluationNumber = 1000
    maximumAbsoluteError = 1.0e-3
    maximumRelativeError = 1.0e-3
    maximumResidualError = 1.0e-3
    maximumConstraintError = 1.0e-3
    nearestPointAlgorithm = ot.AbdoRackwitz()
    nearestPointAlgorithm.setMaximumCallsNumber(maximumEvaluationNumber)
    nearestPointAlgorithm.setMaximumAbsoluteError(maximumAbsoluteError)
    nearestPointAlgorithm.setMaximumRelativeError(maximumRelativeError)
    nearestPointAlgorithm.setMaximumResidualError(maximumResidualError)
    nearestPointAlgorithm.setMaximumConstraintError(maximumConstraintError)









.. GENERATED FROM PYTHON SOURCE LINES 54-58

.. code-block:: Python

    i = 3
    problem = benchmarkProblemList[i]
    metaAlgorithm = otb.ReliabilityBenchmarkMetaAlgorithm(problem)








.. GENERATED FROM PYTHON SOURCE LINES 59-60

We try the FORM algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 60-64

.. code-block:: Python

    benchmarkFORM = metaAlgorithm.runFORM(nearestPointAlgorithm)
    s1 = benchmarkFORM.summary()
    print(s1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    computedProbability = 0.006209245091320793
    exactProbability = 0.00286
    absoluteError = 0.003349245091320793
    numberOfCorrectDigits = 0.0
    numberOfFunctionEvaluations = 6
    numberOfDigitsPerEvaluation = 0.0




.. GENERATED FROM PYTHON SOURCE LINES 65-66

Then the SORM algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 66-70

.. code-block:: Python

    benchmarkSORM = metaAlgorithm.runSORM(nearestPointAlgorithm)
    s2 = benchmarkSORM.summary()
    print(s2)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    computedProbability = 0.006209245091320793
    exactProbability = 0.00286
    absoluteError = 0.003349245091320793
    numberOfCorrectDigits = 0.0
    numberOfFunctionEvaluations = 6
    numberOfDigitsPerEvaluation = 0.0




.. GENERATED FROM PYTHON SOURCE LINES 71-77

.. code-block:: Python

    benchmarkMC = metaAlgorithm.runMonteCarlo(
        maximumOuterSampling=1000000, coefficientOfVariation=0.1, blockSize=1,
    )
    s3 = benchmarkMC.summary()
    print(s3)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    computedProbability = 0.0027446890267332565
    exactProbability = 0.00286
    absoluteError = 0.00011531097326674365
    numberOfCorrectDigits = 1.3944953953709118
    numberOfFunctionEvaluations = 36434
    numberOfDigitsPerEvaluation = 3.827456209504616e-05




.. GENERATED FROM PYTHON SOURCE LINES 78-87

.. code-block:: Python

    benchmarkFORMIS = metaAlgorithm.runFORMImportanceSampling(
        nearestPointAlgorithm,
        maximumOuterSampling=1000,
        coefficientOfVariation=0.1,
        blockSize=1,
    )
    s4 = benchmarkFORMIS.summary()
    print(s4)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    computedProbability = 0.003000190354079886
    exactProbability = 0.00286
    absoluteError = 0.00014019035407988574
    numberOfCorrectDigits = 1.309647900482675
    numberOfFunctionEvaluations = 651
    numberOfDigitsPerEvaluation = 0.0020117479270087175




.. GENERATED FROM PYTHON SOURCE LINES 88-94

.. code-block:: Python

    benchmarkSS = metaAlgorithm.runSubsetSampling(
        maximumOuterSampling=5000, coefficientOfVariation=0.1, blockSize=1,
    )
    s5 = benchmarkSS.summary()
    print(s5)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    computedProbability = 0.0022359999999999993
    exactProbability = 0.00286
    absoluteError = 0.0006240000000000009
    numberOfCorrectDigits = 0.6611814434466183
    numberOfFunctionEvaluations = 15000
    numberOfDigitsPerEvaluation = 4.4078762896441224e-05




.. GENERATED FROM PYTHON SOURCE LINES 95-99

Run all algorithms on all problems and produce a single result table
--------------------------------------------------------------------

For several algorithms and all the reliability problems, we want to estimate the failure probability and compare them.

.. GENERATED FROM PYTHON SOURCE LINES 101-102

We create a list of problem names.

.. GENERATED FROM PYTHON SOURCE LINES 102-109

.. code-block:: Python

    problem_names = []
    for i in range(numberOfProblems):
        problem = benchmarkProblemList[i]
        name = problem.getName()
        problem_names.append(name)









.. GENERATED FROM PYTHON SOURCE LINES 110-155

.. code-block:: Python

    metrics = [
        "Exact",
        "FORM",
        "SORM",
        "Monte Carlo",
        "FORM-IS",
        "Subset",
    ]
    results = np.zeros((numberOfProblems, len(metrics)))
    maximumOuterSampling = 10 ** 2
    blockSize = 10 ** 2
    coefficientOfVariation = 0.0

    for i in tqdm(range(numberOfProblems)):
        problem = benchmarkProblemList[i]
        results[i][0] = problem.getProbability()
        metaAlgorithm = otb.ReliabilityBenchmarkMetaAlgorithm(problem)
        benchmarkResult = metaAlgorithm.runFORM(nearestPointAlgorithm)
        results[i][1] = benchmarkResult.computedProbability
        benchmarkResult = metaAlgorithm.runSORM(nearestPointAlgorithm)
        results[i][2] = benchmarkResult.computedProbability
        benchmarkResult = metaAlgorithm.runMonteCarlo(
            maximumOuterSampling=maximumOuterSampling,
            coefficientOfVariation=coefficientOfVariation,
            blockSize=blockSize,
        )
        results[i][3] = benchmarkResult.computedProbability
        benchmarkResult = metaAlgorithm.runFORMImportanceSampling(
            nearestPointAlgorithm,
            maximumOuterSampling=maximumOuterSampling,
            coefficientOfVariation=coefficientOfVariation,
            blockSize=blockSize,
        )
        results[i][4] = benchmarkResult.computedProbability
        benchmarkResult = metaAlgorithm.runSubsetSampling(
            maximumOuterSampling=maximumOuterSampling,
            coefficientOfVariation=coefficientOfVariation,
            blockSize=blockSize,
        )
        results[i][5] = benchmarkResult.computedProbability

    df = pd.DataFrame(results, index=problem_names, columns=metrics)
    # df.to_csv("reliability_benchmark_table-output.csv")
    df





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/26 [00:00<?, ?it/s]      4%|▍         | 1/26 [00:02<00:55,  2.23s/it]      8%|▊         | 2/26 [00:02<00:26,  1.12s/it]     15%|█▌        | 4/26 [00:02<00:09,  2.21it/s]     23%|██▎       | 6/26 [00:02<00:05,  3.59it/s]     31%|███       | 8/26 [00:02<00:03,  5.25it/s]     38%|███▊      | 10/26 [00:03<00:02,  6.39it/s]     50%|█████     | 13/26 [00:03<00:01,  8.33it/s]     62%|██████▏   | 16/26 [00:03<00:00, 10.98it/s]     69%|██████▉   | 18/26 [00:03<00:00,  9.12it/s]     77%|███████▋  | 20/26 [00:05<00:02,  2.73it/s]     81%|████████  | 21/26 [00:06<00:01,  3.07it/s]     85%|████████▍ | 22/26 [00:06<00:01,  2.38it/s]     88%|████████▊ | 23/26 [00:06<00:01,  2.80it/s]    100%|██████████| 26/26 [00:07<00:00,  4.81it/s]    100%|██████████| 26/26 [00:07<00:00,  3.65it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Exact</th>
          <th>FORM</th>
          <th>SORM</th>
          <th>Monte Carlo</th>
          <th>FORM-IS</th>
          <th>Subset</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>RP8</th>
          <td>7.897928e-04</td>
          <td>6.598878e-04</td>
          <td>7.838036e-04</td>
          <td>0.0012</td>
          <td>8.027553e-04</td>
          <td>7.504488e-04</td>
        </tr>
        <tr>
          <th>RP14</th>
          <td>7.728500e-04</td>
          <td>7.003011e-04</td>
          <td>6.995436e-04</td>
          <td>0.0004</td>
          <td>7.836862e-04</td>
          <td>8.051000e-04</td>
        </tr>
        <tr>
          <th>RP22</th>
          <td>4.207306e-03</td>
          <td>6.209672e-03</td>
          <td>4.390902e-03</td>
          <td>0.0035</td>
          <td>4.255177e-03</td>
          <td>4.145000e-03</td>
        </tr>
        <tr>
          <th>RP24</th>
          <td>2.860000e-03</td>
          <td>6.209245e-03</td>
          <td>6.209245e-03</td>
          <td>0.0027</td>
          <td>2.779718e-03</td>
          <td>3.042000e-03</td>
        </tr>
        <tr>
          <th>RP25</th>
          <td>4.148566e-05</td>
          <td>0.000000e+00</td>
          <td>0.000000e+00</td>
          <td>0.0000</td>
          <td>0.000000e+00</td>
          <td>4.029928e-05</td>
        </tr>
        <tr>
          <th>RP28</th>
          <td>1.453295e-07</td>
          <td>2.850470e-08</td>
          <td>0.000000e+00</td>
          <td>0.0000</td>
          <td>1.149432e-07</td>
          <td>1.398600e-07</td>
        </tr>
        <tr>
          <th>RP31</th>
          <td>3.226681e-03</td>
          <td>2.275013e-02</td>
          <td>2.275013e-02</td>
          <td>0.0033</td>
          <td>3.187961e-03</td>
          <td>3.550000e-03</td>
        </tr>
        <tr>
          <th>RP33</th>
          <td>2.570000e-03</td>
          <td>1.349898e-03</td>
          <td>1.349898e-03</td>
          <td>0.0031</td>
          <td>3.901464e-03</td>
          <td>2.527000e-03</td>
        </tr>
        <tr>
          <th>RP35</th>
          <td>3.478946e-03</td>
          <td>1.349898e-03</td>
          <td>2.134376e-03</td>
          <td>0.0031</td>
          <td>2.595438e-03</td>
          <td>3.811000e-03</td>
        </tr>
        <tr>
          <th>RP38</th>
          <td>8.100000e-03</td>
          <td>7.902212e-03</td>
          <td>8.029356e-03</td>
          <td>0.0085</td>
          <td>7.939954e-03</td>
          <td>8.122000e-03</td>
        </tr>
        <tr>
          <th>RP53</th>
          <td>3.130000e-02</td>
          <td>1.180398e-01</td>
          <td>2.986164e-02</td>
          <td>0.0375</td>
          <td>3.053405e-02</td>
          <td>3.094000e-02</td>
        </tr>
        <tr>
          <th>RP55</th>
          <td>5.600144e-01</td>
          <td>0.000000e+00</td>
          <td>0.000000e+00</td>
          <td>0.5618</td>
          <td>0.000000e+00</td>
          <td>5.663000e-01</td>
        </tr>
        <tr>
          <th>RP54</th>
          <td>9.980000e-04</td>
          <td>5.555704e-02</td>
          <td>3.554811e-03</td>
          <td>0.0004</td>
          <td>1.036058e-03</td>
          <td>9.459000e-04</td>
        </tr>
        <tr>
          <th>RP57</th>
          <td>2.840000e-02</td>
          <td>0.000000e+00</td>
          <td>0.000000e+00</td>
          <td>0.0261</td>
          <td>0.000000e+00</td>
          <td>2.805000e-02</td>
        </tr>
        <tr>
          <th>RP75</th>
          <td>9.819299e-03</td>
          <td>0.000000e+00</td>
          <td>0.000000e+00</td>
          <td>0.0111</td>
          <td>0.000000e+00</td>
          <td>8.927110e-03</td>
        </tr>
        <tr>
          <th>RP89</th>
          <td>5.430000e-03</td>
          <td>2.008594e-09</td>
          <td>2.008594e-09</td>
          <td>0.0061</td>
          <td>3.950858e-04</td>
          <td>5.979000e-03</td>
        </tr>
        <tr>
          <th>RP107</th>
          <td>2.920000e-07</td>
          <td>2.866516e-07</td>
          <td>2.866516e-07</td>
          <td>0.0000</td>
          <td>2.771060e-07</td>
          <td>3.283423e-07</td>
        </tr>
        <tr>
          <th>RP110</th>
          <td>3.190000e-05</td>
          <td>3.167124e-05</td>
          <td>3.167124e-05</td>
          <td>0.0000</td>
          <td>3.238514e-05</td>
          <td>5.863250e-05</td>
        </tr>
        <tr>
          <th>RP111</th>
          <td>7.650000e-07</td>
          <td>0.000000e+00</td>
          <td>0.000000e+00</td>
          <td>0.0000</td>
          <td>0.000000e+00</td>
          <td>7.555437e-07</td>
        </tr>
        <tr>
          <th>RP63</th>
          <td>3.790000e-04</td>
          <td>9.999966e-01</td>
          <td>0.000000e+00</td>
          <td>0.0002</td>
          <td>0.000000e+00</td>
          <td>3.996000e-04</td>
        </tr>
        <tr>
          <th>RP91</th>
          <td>6.970000e-04</td>
          <td>6.994296e-04</td>
          <td>7.011592e-04</td>
          <td>0.0005</td>
          <td>6.983050e-04</td>
          <td>6.631000e-04</td>
        </tr>
        <tr>
          <th>RP60</th>
          <td>4.560000e-02</td>
          <td>4.483968e-02</td>
          <td>4.483968e-02</td>
          <td>0.0427</td>
          <td>4.331617e-02</td>
          <td>4.465000e-02</td>
        </tr>
        <tr>
          <th>RP77</th>
          <td>2.870000e-07</td>
          <td>0.000000e+00</td>
          <td>0.000000e+00</td>
          <td>0.0000</td>
          <td>0.000000e+00</td>
          <td>2.619856e-07</td>
        </tr>
        <tr>
          <th>Four-branch serial system</th>
          <td>2.222795e-03</td>
          <td>0.000000e+00</td>
          <td>0.000000e+00</td>
          <td>0.0026</td>
          <td>0.000000e+00</td>
          <td>1.958000e-03</td>
        </tr>
        <tr>
          <th>R-S</th>
          <td>7.864960e-02</td>
          <td>7.864960e-02</td>
          <td>7.864960e-02</td>
          <td>0.0780</td>
          <td>7.687762e-02</td>
          <td>8.242000e-02</td>
        </tr>
        <tr>
          <th>Axial stressed beam</th>
          <td>2.919819e-02</td>
          <td>2.998280e-02</td>
          <td>2.933256e-02</td>
          <td>0.0324</td>
          <td>2.869938e-02</td>
          <td>2.929000e-02</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 156-160

Run several algorithms on all problems and get detailed statistics
------------------------------------------------------------------

Run several algorithms on all reliability benchmark problems: print statistics on each problem.

.. GENERATED FROM PYTHON SOURCE LINES 162-177

.. code-block:: Python



    def FormatRow(benchmarkResult):
        """Format a single row of the benchmark table"""
        result = [
            benchmarkResult.exactProbability,
            benchmarkResult.computedProbability,
            benchmarkResult.absoluteError,
            benchmarkResult.numberOfCorrectDigits,
            benchmarkResult.numberOfFunctionEvaluations,
            benchmarkResult.numberOfDigitsPerEvaluation,
        ]
        return result









.. GENERATED FROM PYTHON SOURCE LINES 178-242

.. code-block:: Python

    method_names = ["Monte-Carlo", "FORM", "SORM", "FORM-IS", "SUBSET"]

    maximumOuterSampling = 10 ** 2
    blockSize = 10 ** 2
    coefficientOfVariation = 0.0

    result = dict()
    for i in range(numberOfProblems):
        problem = benchmarkProblemList[i]
        name = problem_names[i]
        exact_pf_name = "%10s" % ("Exact PF " + name[0:10])
        metrics = [
            exact_pf_name,
            "Estimated PF",
            "Absolute Error",
            "Correct Digits",
            "Function Calls",
            "Digits / Evaluation",
        ]
        results = np.zeros((len(method_names), len(metrics)))
        metaAlgorithm = otb.ReliabilityBenchmarkMetaAlgorithm(problem)
        # Monte-Carlo
        benchmarkResult = metaAlgorithm.runMonteCarlo(
            maximumOuterSampling=maximumOuterSampling,
            coefficientOfVariation=coefficientOfVariation,
            blockSize=blockSize,
        )
        results[0, :] = FormatRow(benchmarkResult)
        # FORM
        benchmarkResult = metaAlgorithm.runFORM(nearestPointAlgorithm)
        results[1, :] = FormatRow(benchmarkResult)
        # SORM
        benchmarkResult = metaAlgorithm.runSORM(nearestPointAlgorithm)
        results[2, :] = FormatRow(benchmarkResult)
        # FORM-IS
        benchmarkResult = metaAlgorithm.runFORMImportanceSampling(
            nearestPointAlgorithm,
            maximumOuterSampling=maximumOuterSampling,
            coefficientOfVariation=coefficientOfVariation,
            blockSize=blockSize,
        )
        results[3, :] = FormatRow(benchmarkResult)
        # Subset
        benchmarkResult = metaAlgorithm.runSubsetSampling(
            maximumOuterSampling=maximumOuterSampling,
            coefficientOfVariation=coefficientOfVariation,
            blockSize=blockSize,
        )
        results[4, :] = FormatRow(benchmarkResult)
        # Gather statistics and print them
        df = pd.DataFrame(results, index=method_names, columns=metrics,)
        # Format the columns for readability
        s = df.style.format(
            {
                exact_pf_name: lambda x: "{:.3e}".format(x),
                "Estimated PF": lambda x: "{:.3e}".format(x),
                "Absolute Error": lambda x: "{:.3e}".format(x),
                "Correct Digits": lambda x: "{:.1f}".format(x),
                "Function Calls": lambda x: "{:d}".format(int(x)),
                "Digits / Evaluation": lambda x: "{:.1f}".format(x),
            }
        )
        result[name] = s








.. GENERATED FROM PYTHON SOURCE LINES 243-245

.. code-block:: Python

    result["RP33"]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style type="text/css">
    </style>
    <table id="T_f0365">
      <thead>
        <tr>
          <th class="blank level0" >&nbsp;</th>
          <th id="T_f0365_level0_col0" class="col_heading level0 col0" >Exact PF RP33</th>
          <th id="T_f0365_level0_col1" class="col_heading level0 col1" >Estimated PF</th>
          <th id="T_f0365_level0_col2" class="col_heading level0 col2" >Absolute Error</th>
          <th id="T_f0365_level0_col3" class="col_heading level0 col3" >Correct Digits</th>
          <th id="T_f0365_level0_col4" class="col_heading level0 col4" >Function Calls</th>
          <th id="T_f0365_level0_col5" class="col_heading level0 col5" >Digits / Evaluation</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th id="T_f0365_level0_row0" class="row_heading level0 row0" >Monte-Carlo</th>
          <td id="T_f0365_row0_col0" class="data row0 col0" >2.570e-03</td>
          <td id="T_f0365_row0_col1" class="data row0 col1" >3.200e-03</td>
          <td id="T_f0365_row0_col2" class="data row0 col2" >6.300e-04</td>
          <td id="T_f0365_row0_col3" class="data row0 col3" >0.6</td>
          <td id="T_f0365_row0_col4" class="data row0 col4" >10000</td>
          <td id="T_f0365_row0_col5" class="data row0 col5" >0.0</td>
        </tr>
        <tr>
          <th id="T_f0365_level0_row1" class="row_heading level0 row1" >FORM</th>
          <td id="T_f0365_row1_col0" class="data row1 col0" >2.570e-03</td>
          <td id="T_f0365_row1_col1" class="data row1 col1" >1.350e-03</td>
          <td id="T_f0365_row1_col2" class="data row1 col2" >1.220e-03</td>
          <td id="T_f0365_row1_col3" class="data row1 col3" >0.3</td>
          <td id="T_f0365_row1_col4" class="data row1 col4" >26</td>
          <td id="T_f0365_row1_col5" class="data row1 col5" >0.0</td>
        </tr>
        <tr>
          <th id="T_f0365_level0_row2" class="row_heading level0 row2" >SORM</th>
          <td id="T_f0365_row2_col0" class="data row2 col0" >2.570e-03</td>
          <td id="T_f0365_row2_col1" class="data row2 col1" >1.350e-03</td>
          <td id="T_f0365_row2_col2" class="data row2 col2" >1.220e-03</td>
          <td id="T_f0365_row2_col3" class="data row2 col3" >0.3</td>
          <td id="T_f0365_row2_col4" class="data row2 col4" >51</td>
          <td id="T_f0365_row2_col5" class="data row2 col5" >0.0</td>
        </tr>
        <tr>
          <th id="T_f0365_level0_row3" class="row_heading level0 row3" >FORM-IS</th>
          <td id="T_f0365_row3_col0" class="data row3 col0" >2.570e-03</td>
          <td id="T_f0365_row3_col1" class="data row3 col1" >2.195e-03</td>
          <td id="T_f0365_row3_col2" class="data row3 col2" >3.754e-04</td>
          <td id="T_f0365_row3_col3" class="data row3 col3" >0.8</td>
          <td id="T_f0365_row3_col4" class="data row3 col4" >10026</td>
          <td id="T_f0365_row3_col5" class="data row3 col5" >0.0</td>
        </tr>
        <tr>
          <th id="T_f0365_level0_row4" class="row_heading level0 row4" >SUBSET</th>
          <td id="T_f0365_row4_col0" class="data row4 col0" >2.570e-03</td>
          <td id="T_f0365_row4_col1" class="data row4 col1" >2.745e-03</td>
          <td id="T_f0365_row4_col2" class="data row4 col2" >1.750e-04</td>
          <td id="T_f0365_row4_col3" class="data row4 col3" >1.2</td>
          <td id="T_f0365_row4_col4" class="data row4 col4" >30000</td>
          <td id="T_f0365_row4_col5" class="data row4 col5" >0.0</td>
        </tr>
      </tbody>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 246-247

.. code-block:: Python

    result["RP35"]





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style type="text/css">
    </style>
    <table id="T_286eb">
      <thead>
        <tr>
          <th class="blank level0" >&nbsp;</th>
          <th id="T_286eb_level0_col0" class="col_heading level0 col0" >Exact PF RP35</th>
          <th id="T_286eb_level0_col1" class="col_heading level0 col1" >Estimated PF</th>
          <th id="T_286eb_level0_col2" class="col_heading level0 col2" >Absolute Error</th>
          <th id="T_286eb_level0_col3" class="col_heading level0 col3" >Correct Digits</th>
          <th id="T_286eb_level0_col4" class="col_heading level0 col4" >Function Calls</th>
          <th id="T_286eb_level0_col5" class="col_heading level0 col5" >Digits / Evaluation</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th id="T_286eb_level0_row0" class="row_heading level0 row0" >Monte-Carlo</th>
          <td id="T_286eb_row0_col0" class="data row0 col0" >3.479e-03</td>
          <td id="T_286eb_row0_col1" class="data row0 col1" >3.000e-03</td>
          <td id="T_286eb_row0_col2" class="data row0 col2" >4.789e-04</td>
          <td id="T_286eb_row0_col3" class="data row0 col3" >0.9</td>
          <td id="T_286eb_row0_col4" class="data row0 col4" >10000</td>
          <td id="T_286eb_row0_col5" class="data row0 col5" >0.0</td>
        </tr>
        <tr>
          <th id="T_286eb_level0_row1" class="row_heading level0 row1" >FORM</th>
          <td id="T_286eb_row1_col0" class="data row1 col0" >3.479e-03</td>
          <td id="T_286eb_row1_col1" class="data row1 col1" >1.350e-03</td>
          <td id="T_286eb_row1_col2" class="data row1 col2" >2.129e-03</td>
          <td id="T_286eb_row1_col3" class="data row1 col3" >0.2</td>
          <td id="T_286eb_row1_col4" class="data row1 col4" >20</td>
          <td id="T_286eb_row1_col5" class="data row1 col5" >0.0</td>
        </tr>
        <tr>
          <th id="T_286eb_level0_row2" class="row_heading level0 row2" >SORM</th>
          <td id="T_286eb_row2_col0" class="data row2 col0" >3.479e-03</td>
          <td id="T_286eb_row2_col1" class="data row2 col1" >2.134e-03</td>
          <td id="T_286eb_row2_col2" class="data row2 col2" >1.345e-03</td>
          <td id="T_286eb_row2_col3" class="data row2 col3" >0.4</td>
          <td id="T_286eb_row2_col4" class="data row2 col4" >33</td>
          <td id="T_286eb_row2_col5" class="data row2 col5" >0.0</td>
        </tr>
        <tr>
          <th id="T_286eb_level0_row3" class="row_heading level0 row3" >FORM-IS</th>
          <td id="T_286eb_row3_col0" class="data row3 col0" >3.479e-03</td>
          <td id="T_286eb_row3_col1" class="data row3 col1" >2.435e-03</td>
          <td id="T_286eb_row3_col2" class="data row3 col2" >1.043e-03</td>
          <td id="T_286eb_row3_col3" class="data row3 col3" >0.5</td>
          <td id="T_286eb_row3_col4" class="data row3 col4" >10020</td>
          <td id="T_286eb_row3_col5" class="data row3 col5" >0.0</td>
        </tr>
        <tr>
          <th id="T_286eb_level0_row4" class="row_heading level0 row4" >SUBSET</th>
          <td id="T_286eb_row4_col0" class="data row4 col0" >3.479e-03</td>
          <td id="T_286eb_row4_col1" class="data row4 col1" >3.465e-03</td>
          <td id="T_286eb_row4_col2" class="data row4 col2" >1.395e-05</td>
          <td id="T_286eb_row4_col3" class="data row4 col3" >2.4</td>
          <td id="T_286eb_row4_col4" class="data row4 col4" >30000</td>
          <td id="T_286eb_row4_col5" class="data row4 col5" >0.0</td>
        </tr>
      </tbody>
    </table>

    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 13.897 seconds)


.. _sphx_glr_download_auto_examples_reliability_problems_plot_reliability_benchmark_table.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_reliability_benchmark_table.ipynb <plot_reliability_benchmark_table.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_reliability_benchmark_table.py <plot_reliability_benchmark_table.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_reliability_benchmark_table.zip <plot_reliability_benchmark_table.zip>`
