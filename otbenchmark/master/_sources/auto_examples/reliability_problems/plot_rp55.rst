
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/reliability_problems/plot_rp55.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_reliability_problems_plot_rp55.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_reliability_problems_plot_rp55.py:


RP55 analysis and 2D graphics
=============================

.. GENERATED FROM PYTHON SOURCE LINES 7-17

The objective of this example is to present problem 55 of the BBRC.
We also present graphic elements for the visualization of the limit state surface in 2 dimensions.

The dimension is equal to 2 and the probability is close to $10^{-2}$.
This makes this problem relatively easy to solve.
The distribution is uniform in the square $[-1,1]^2$.
The failure domain is made of 5 diagonal bands.
Capturing these bands is relatively easy and a Monte-Carlo simulation perform well in this case.
The FORM method cannot perform correctly, since the failure domain cannot be linearized in the gaussian space.
Hence, the SORM or FORM-IS methods do not perform satisfactorily.

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python

    import openturns as ot
    import otbenchmark as otb
    import openturns.viewer as otv








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Disable warnings

.. GENERATED FROM PYTHON SOURCE LINES 25-27

.. code-block:: Python

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: Python

    problem = otb.ReliabilityProblem55()
    print(problem)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    name = RP55
    event = class=ThresholdEventImplementation antecedent=class=CompositeRandomVector function=class=Function name=Unnamed implementation=class=FunctionImplementation name=Unnamed description=[x1,x2,gsys] evaluationImplementation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x1,x2] outputVariablesNames=[gsys] formulas=[var g1 := 0.2 + 0.6 * (x1 - x2)^4 - (x1 - x2) / sqrt(2);var g2 := 0.2 + 0.6 * (x1 - x2)^4 + (x1 - x2) / sqrt(2);var g3 := (x1 - x2) + 5 / sqrt(2) - 2.2;var g4 := (x2 - x1) + 5 / sqrt(2) - 2.2;gsys := min(g1, g2, g3, g4)] gradientImplementation=class=SymbolicGradient name=Unnamed evaluation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x1,x2] outputVariablesNames=[gsys] formulas=[var g1 := 0.2 + 0.6 * (x1 - x2)^4 - (x1 - x2) / sqrt(2);var g2 := 0.2 + 0.6 * (x1 - x2)^4 + (x1 - x2) / sqrt(2);var g3 := (x1 - x2) + 5 / sqrt(2) - 2.2;var g4 := (x2 - x1) + 5 / sqrt(2) - 2.2;gsys := min(g1, g2, g3, g4)] hessianImplementation=class=SymbolicHessian name=Unnamed evaluation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x1,x2] outputVariablesNames=[gsys] formulas=[var g1 := 0.2 + 0.6 * (x1 - x2)^4 - (x1 - x2) / sqrt(2);var g2 := 0.2 + 0.6 * (x1 - x2)^4 + (x1 - x2) / sqrt(2);var g3 := (x1 - x2) + 5 / sqrt(2) - 2.2;var g4 := (x2 - x1) + 5 / sqrt(2) - 2.2;gsys := min(g1, g2, g3, g4)] antecedent=class=UsualRandomVector distribution=class=JointDistribution name=JointDistribution dimension=2 copula=class=IndependentCopula name=IndependentCopula dimension=2 marginal[0]=class=Uniform name=Uniform dimension=1 a=-1 b=1 marginal[1]=class=Uniform name=Uniform dimension=1 a=-1 b=1 operator=class=Less name=Unnamed threshold=0
    probability = 0.5600144282863704





.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: Python

    event = problem.getEvent()
    g = event.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: Python

    problem.getProbability()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.5600144282863704



.. GENERATED FROM PYTHON SOURCE LINES 39-41

Compute the bounds of the domain
--------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 43-57

.. code-block:: Python

    inputVector = event.getAntecedent()
    distribution = inputVector.getDistribution()
    X1 = distribution.getMarginal(0)
    X2 = distribution.getMarginal(1)
    alphaMin = 0.00001
    alphaMax = 1 - alphaMin
    lowerBound = ot.Point(
        [X1.computeQuantile(alphaMin)[0], X2.computeQuantile(alphaMin)[0]]
    )
    upperBound = ot.Point(
        [X1.computeQuantile(alphaMax)[0], X2.computeQuantile(alphaMax)[0]]
    )









.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: Python

    nbPoints = [100, 100]
    figure = g.draw(lowerBound, upperBound, nbPoints)
    figure.setTitle(" Iso-values of limit state function")
    figure





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    class=Graph name=gsys as a function of (x1,x2) implementation=class=GraphImplementation name=gsys as a function of (x1,x2) title= Iso-values of limit state function xTitle=x1 yTitle=x2 axes=ON grid=ON legendposition=upper left legendFontSize=1 drawables=[class=Drawable name=Unnamed implementation=class=Contour name=Unnamed x=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=100 dimension=1 data=[[-0.99998],[-0.979778],[-0.959577],[-0.939375],[-0.919174],[-0.898972],[-0.87877],[-0.858569],[-0.838367],[-0.818165],[-0.797964],[-0.777762],[-0.757561],[-0.737359],[-0.717157],[-0.696956],[-0.676754],[-0.656553],[-0.636351],[-0.616149],[-0.595948],[-0.575746],[-0.555544],[-0.535343],[-0.515141],[-0.49494],[-0.474738],[-0.454536],[-0.434335],[-0.414133],[-0.393932],[-0.37373],[-0.353528],[-0.333327],[-0.313125],[-0.292923],[-0.272722],[-0.25252],[-0.232319],[-0.212117],[-0.191915],[-0.171714],[-0.151512],[-0.131311],[-0.111109],[-0.0909073],[-0.0707057],[-0.050504],[-0.0303024],[-0.0101008],[0.0101008],[0.0303024],[0.050504],[0.0707057],[0.0909073],[0.111109],[0.131311],[0.151512],[0.171714],[0.191915],[0.212117],[0.232319],[0.25252],[0.272722],[0.292923],[0.313125],[0.333327],[0.353528],[0.37373],[0.393932],[0.414133],[0.434335],[0.454536],[0.474738],[0.49494],[0.515141],[0.535343],[0.555544],[0.575746],[0.595948],[0.616149],[0.636351],[0.656553],[0.676754],[0.696956],[0.717157],[0.737359],[0.757561],[0.777762],[0.797964],[0.818165],[0.838367],[0.858569],[0.87877],[0.898972],[0.919174],[0.939375],[0.959577],[0.979778],[0.99998]] y=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=100 dimension=1 data=[[-0.99998],[-0.979778],[-0.959577],[-0.939375],[-0.919174],[-0.898972],[-0.87877],[-0.858569],[-0.838367],[-0.818165],[-0.797964],[-0.777762],[-0.757561],[-0.737359],[-0.717157],[-0.696956],[-0.676754],[-0.656553],[-0.636351],[-0.616149],[-0.595948],[-0.575746],[-0.555544],[-0.535343],[-0.515141],[-0.49494],[-0.474738],[-0.454536],[-0.434335],[-0.414133],[-0.393932],[-0.37373],[-0.353528],[-0.333327],[-0.313125],[-0.292923],[-0.272722],[-0.25252],[-0.232319],[-0.212117],[-0.191915],[-0.171714],[-0.151512],[-0.131311],[-0.111109],[-0.0909073],[-0.0707057],[-0.050504],[-0.0303024],[-0.0101008],[0.0101008],[0.0303024],[0.050504],[0.0707057],[0.0909073],[0.111109],[0.131311],[0.151512],[0.171714],[0.191915],[0.212117],[0.232319],[0.25252],[0.272722],[0.292923],[0.313125],[0.333327],[0.353528],[0.37373],[0.393932],[0.414133],[0.434335],[0.454536],[0.474738],[0.49494],[0.515141],[0.535343],[0.555544],[0.575746],[0.595948],[0.616149],[0.636351],[0.656553],[0.676754],[0.696956],[0.717157],[0.737359],[0.757561],[0.777762],[0.797964],[0.818165],[0.838367],[0.858569],[0.87877],[0.898972],[0.919174],[0.939375],[0.959577],[0.979778],[0.99998]] levels=class=Point name=Unnamed dimension=10 values=[-0.240192,-0.147598,-0.125737,-0.0908542,-0.0539797,-0.00921154,0.0443314,0.100247,0.142887,0.187845] labels=[-0.240192,-0.147598,-0.125737,-0.0908542,-0.0539797,-0.00921154,0.0443314,0.100247,0.142887,0.187845] show labels=false isFilled=false colorBarPosition=right isVminUsed=false vmin=0 isVmaxUsed=false vmax=0 colorMap=hsv alpha=1 norm=linear extend=both hatches=[] derived from class=DrawableImplementation name=Unnamed legend= data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=10000 dimension=1 description=[gsys] data=[[0.2],[0.185715],[0.171432],...,[0.171432],[0.185715],[0.2]] color=#1f77b4 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=plus lineWidth=1]



.. GENERATED FROM PYTHON SOURCE LINES 64-66

Print the iso-values of the distribution
----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: Python

    _ = otv.View(distribution.drawPDF())





.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp55_001.png
   :alt: [X1,X2] iso-PDF
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp55_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.9.20/x64/lib/python3.9/site-packages/openturns/viewer.py:679: UserWarning: No contour levels were found within the data range.
      contourset = self._ax[0].contour(X, Y, Z, **contour_kw)




.. GENERATED FROM PYTHON SOURCE LINES 72-78

.. code-block:: Python

    sampleSize = 5000
    sampleInput = inputVector.getSample(sampleSize)
    sampleOutput = g(sampleInput)
    drawEvent = otb.DrawEvent(event)









.. GENERATED FROM PYTHON SOURCE LINES 79-82

.. code-block:: Python

    cloud = drawEvent.drawSampleCrossCut(sampleSize)
    cloud





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    class=Graph name=Points X s.t. g(X) < 0.0 implementation=class=GraphImplementation name=Points X s.t. g(X) < 0.0 title=Points X s.t. g(X) < 0.0 xTitle=x1 yTitle=x2 axes=ON grid=ON legendposition=topright legendFontSize=1 drawables=[class=Drawable name=In implementation=class=Cloud name=In derived from class=DrawableImplementation name=In legend=In data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=2795 dimension=2 data=[[-0.216542,-0.717038],[-0.709982,-0.163616],[-0.0885707,0.817025],...,[0.161184,-0.753466],[-0.191443,0.256177],[-0.125406,-0.509523]] color=lightsalmon3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1,class=Drawable name=Out implementation=class=Cloud name=Out derived from class=DrawableImplementation name=Out legend=Out data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=2205 dimension=2 data=[[-0.76937,-0.544996],[0.548274,-0.699706],[-0.598424,0.708715],...,[-0.778612,0.353584],[0.959799,-0.278671],[-0.771768,-0.787455]] color=darkseagreen3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1]



.. GENERATED FROM PYTHON SOURCE LINES 83-84

## Draw the limit state surface

.. GENERATED FROM PYTHON SOURCE LINES 86-90

.. code-block:: Python

    bounds = ot.Interval(lowerBound, upperBound)
    bounds







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Interval name=Unnamed dimension=2 lower bound=class=Point name=Unnamed dimension=2 values=[-0.99998,-0.99998] upper bound=class=Point name=Unnamed dimension=2 values=[0.99998,0.99998] finite lower bound=[1,1] finite upper bound=[1,1]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 91-96

.. code-block:: Python

    graph = drawEvent.drawLimitStateCrossCut(bounds)
    graph.add(cloud)
    graph






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    class=Graph name=Limit state surface implementation=class=GraphImplementation name=Limit state surface title=Limit state surface xTitle=x1 yTitle=x2 axes=ON grid=ON legendposition= legendFontSize=1 drawables=[class=Drawable name=Unnamed implementation=class=Contour name=Unnamed x=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=52 dimension=1 description=[t] data=[[-0.99998],[-0.960765],[-0.92155],[-0.882335],[-0.84312],[-0.803905],[-0.764691],[-0.725476],[-0.686261],[-0.647046],[-0.607831],[-0.568616],[-0.529401],[-0.490186],[-0.450971],[-0.411756],[-0.372542],[-0.333327],[-0.294112],[-0.254897],[-0.215682],[-0.176467],[-0.137252],[-0.0980373],[-0.0588224],[-0.0196075],[0.0196075],[0.0588224],[0.0980373],[0.137252],[0.176467],[0.215682],[0.254897],[0.294112],[0.333327],[0.372542],[0.411756],[0.450971],[0.490186],[0.529401],[0.568616],[0.607831],[0.647046],[0.686261],[0.725476],[0.764691],[0.803905],[0.84312],[0.882335],[0.92155],[0.960765],[0.99998]] y=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=52 dimension=1 description=[t] data=[[-0.99998],[-0.960765],[-0.92155],[-0.882335],[-0.84312],[-0.803905],[-0.764691],[-0.725476],[-0.686261],[-0.647046],[-0.607831],[-0.568616],[-0.529401],[-0.490186],[-0.450971],[-0.411756],[-0.372542],[-0.333327],[-0.294112],[-0.254897],[-0.215682],[-0.176467],[-0.137252],[-0.0980373],[-0.0588224],[-0.0196075],[0.0196075],[0.0588224],[0.0980373],[0.137252],[0.176467],[0.215682],[0.254897],[0.294112],[0.333327],[0.372542],[0.411756],[0.450971],[0.490186],[0.529401],[0.568616],[0.607831],[0.647046],[0.686261],[0.725476],[0.764691],[0.803905],[0.84312],[0.882335],[0.92155],[0.960765],[0.99998]] levels=class=Point name=Unnamed dimension=1 values=[0] labels=[0.0] show labels=true isFilled=false colorBarPosition=right isVminUsed=false vmin=0 isVmaxUsed=false vmax=0 colorMap=hsv alpha=1 norm=linear extend=both hatches=[] derived from class=DrawableImplementation name=Unnamed legend= data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=2704 dimension=1 description=[gsys] data=[[0.2],[0.172272],[0.144564],...,[0.144564],[0.172272],[0.2]] color=#1f77b4 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=plus lineWidth=1,class=Drawable name=In implementation=class=Cloud name=In derived from class=DrawableImplementation name=In legend=In data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=2795 dimension=2 data=[[-0.216542,-0.717038],[-0.709982,-0.163616],[-0.0885707,0.817025],...,[0.161184,-0.753466],[-0.191443,0.256177],[-0.125406,-0.509523]] color=lightsalmon3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1,class=Drawable name=Out implementation=class=Cloud name=Out derived from class=DrawableImplementation name=Out legend=Out data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=2205 dimension=2 data=[[-0.76937,-0.544996],[0.548274,-0.699706],[-0.598424,0.708715],...,[-0.778612,0.353584],[0.959799,-0.278671],[-0.771768,-0.787455]] color=darkseagreen3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1]



.. GENERATED FROM PYTHON SOURCE LINES 97-101

.. code-block:: Python

    domain = drawEvent.fillEventCrossCut(bounds)
    _ = otv.View(domain)





.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp55_002.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp55_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-105

.. code-block:: Python

    domain.add(cloud)
    _ = otv.View(domain)




.. image-sg:: /auto_examples/reliability_problems/images/sphx_glr_plot_rp55_003.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/reliability_problems/images/sphx_glr_plot_rp55_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 106-108

Perform Monte-Carlo simulation
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 110-116

.. code-block:: Python

    algoProb = ot.ProbabilitySimulationAlgorithm(event)
    algoProb.setMaximumOuterSampling(1000)
    algoProb.setMaximumCoefficientOfVariation(0.01)
    algoProb.run()









.. GENERATED FROM PYTHON SOURCE LINES 117-128

.. code-block:: Python

    resultAlgo = algoProb.getResult()
    neval = g.getEvaluationCallsNumber()
    print("Number of function calls = %d" % (neval))
    pf = resultAlgo.getProbabilityEstimate()
    print("Failure Probability = %.4f" % (pf))
    level = 0.95
    c95 = resultAlgo.getConfidenceLength(level)
    pmin = pf - 0.5 * c95
    pmax = pf + 0.5 * c95
    print("%.1f %% confidence interval :[%.4f,%.4f] " % (level * 100, pmin, pmax))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of function calls = 43704
    Failure Probability = 0.5630
    95.0 % confidence interval :[0.5323,0.5937] 




.. GENERATED FROM PYTHON SOURCE LINES 129-131

With FORM-IS
------------

.. GENERATED FROM PYTHON SOURCE LINES 133-146

.. code-block:: Python

    maximumEvaluationNumber = 1000
    maximumAbsoluteError = 1.0e-3
    maximumRelativeError = 1.0e-3
    maximumResidualError = 1.0e-3
    maximumConstraintError = 1.0e-3
    nearestPointAlgorithm = ot.AbdoRackwitz()
    nearestPointAlgorithm.setMaximumCallsNumber(maximumEvaluationNumber)
    nearestPointAlgorithm.setMaximumAbsoluteError(maximumAbsoluteError)
    nearestPointAlgorithm.setMaximumRelativeError(maximumRelativeError)
    nearestPointAlgorithm.setMaximumResidualError(maximumResidualError)
    nearestPointAlgorithm.setMaximumConstraintError(maximumConstraintError)









.. GENERATED FROM PYTHON SOURCE LINES 147-153

.. code-block:: Python

    metaAlgorithm = otb.ReliabilityBenchmarkMetaAlgorithm(problem)
    benchmarkResult = metaAlgorithm.runFORMImportanceSampling(
        nearestPointAlgorithm, maximumOuterSampling=10 ** 5, coefficientOfVariation=0.0
    )









.. GENERATED FROM PYTHON SOURCE LINES 154-156

.. code-block:: Python

    print(benchmarkResult.summary())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    computedProbability = 0.0
    exactProbability = 0.5600144282863704
    absoluteError = 0.5600144282863704
    numberOfCorrectDigits = 0.0
    numberOfFunctionEvaluations = 1006
    numberOfDigitsPerEvaluation = 0.0




.. GENERATED FROM PYTHON SOURCE LINES 157-159

With Quasi-Monte-Carlo
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-166

.. code-block:: Python

    sequence = ot.SobolSequence()
    experiment = ot.LowDiscrepancyExperiment(sequence, 1)
    experiment.setRandomize(False)









.. GENERATED FROM PYTHON SOURCE LINES 167-174

.. code-block:: Python

    algo = ot.ProbabilitySimulationAlgorithm(event, experiment)
    algo.setMaximumOuterSampling(10 ** 3)
    algo.setMaximumCoefficientOfVariation(0.0)
    algo.setBlockSize(10 ** 3)
    algo.run()









.. GENERATED FROM PYTHON SOURCE LINES 175-179

.. code-block:: Python

    result = algo.getResult()
    probability = result.getProbabilityEstimate()
    print("Pf=", probability)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pf= 0.5593869999999994




.. GENERATED FROM PYTHON SOURCE LINES 180-181

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.268 seconds)


.. _sphx_glr_download_auto_examples_reliability_problems_plot_rp55.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_rp55.ipynb <plot_rp55.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_rp55.py <plot_rp55.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_rp55.zip <plot_rp55.zip>`
