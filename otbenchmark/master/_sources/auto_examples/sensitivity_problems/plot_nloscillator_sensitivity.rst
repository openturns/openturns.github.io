
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/sensitivity_problems/plot_nloscillator_sensitivity.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_sensitivity_problems_plot_nloscillator_sensitivity.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_sensitivity_problems_plot_nloscillator_sensitivity.py:


Benchmark the NLOscillator test function
========================================

.. GENERATED FROM PYTHON SOURCE LINES 7-11

.. code-block:: Python

    import openturns as ot
    import otbenchmark as otb
    import openturns.viewer as otv








.. GENERATED FROM PYTHON SOURCE LINES 12-15

.. code-block:: Python

    problem = otb.NLOscillatorSensitivity()
    print(problem)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    name = N.L. Oscillator
    distribution = ComposedDistribution(class=ParametrizedDistribution parameters=class=LogNormalMuSigma name=Unnamed mu=21.5 sigma=2.15 gamma=0 distribution=class=LogNormal name=LogNormal dimension=1 muLog=3.06308 sigmaLog=0.0997513 gamma=0, class=ParametrizedDistribution parameters=class=LogNormalMuSigma name=Unnamed mu=1.5 sigma=0.15 gamma=0 distribution=class=LogNormal name=LogNormal dimension=1 muLog=0.40049 sigmaLog=0.0997513 gamma=0, class=ParametrizedDistribution parameters=class=LogNormalMuSigma name=Unnamed mu=0.01 sigma=0.001 gamma=0 distribution=class=LogNormal name=LogNormal dimension=1 muLog=-4.61015 sigmaLog=0.0997513 gamma=0, class=ParametrizedDistribution parameters=class=LogNormalMuSigma name=Unnamed mu=1 sigma=0.2 gamma=0 distribution=class=LogNormal name=LogNormal dimension=1 muLog=-0.0196104 sigmaLog=0.198042 gamma=0, class=ParametrizedDistribution parameters=class=LogNormalMuSigma name=Unnamed mu=0.01 sigma=0.002 gamma=0 distribution=class=LogNormal name=LogNormal dimension=1 muLog=-4.62478 sigmaLog=0.198042 gamma=0, class=ParametrizedDistribution parameters=class=LogNormalMuSigma name=Unnamed mu=0.05 sigma=0.02 gamma=0 distribution=class=LogNormal name=LogNormal dimension=1 muLog=-3.06994 sigmaLog=0.385253 gamma=0, class=ParametrizedDistribution parameters=class=LogNormalMuSigma name=Unnamed mu=0.02 sigma=0.01 gamma=0 distribution=class=LogNormal name=LogNormal dimension=1 muLog=-4.02359 sigmaLog=0.472381 gamma=0, class=ParametrizedDistribution parameters=class=LogNormalMuSigma name=Unnamed mu=100 sigma=10 gamma=0 distribution=class=LogNormal name=LogNormal dimension=1 muLog=4.6002 sigmaLog=0.0997513 gamma=0, IndependentCopula(dimension = 8))
    function = class=PythonEvaluation name=OpenTURNSPythonFunction
    firstOrderIndices = [0.4,0.03,0.09,0.18,0.12,0.05,0.05,0]
    totalOrderIndices = [0.4,0.04,0.1,0.23,0.16,0.07,0.06,0.01]




.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. code-block:: Python

    distribution = problem.getInputDistribution()
    model = problem.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 20-21

Exact first and total order

.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: Python

    exact_first_order = problem.getFirstOrderIndices()
    exact_first_order






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=8 values=[0.4,0.03,0.09,0.18,0.12,0.05,0.05,0]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: Python

    exact_total_order = problem.getTotalOrderIndices()
    exact_total_order






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=8 values=[0.4,0.04,0.1,0.23,0.16,0.07,0.06,0.01]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 29-31

Plot the function
-----------------

.. GENERATED FROM PYTHON SOURCE LINES 33-34

Create X/Y data

.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: Python

    ot.RandomGenerator.SetSeed(0)
    size = 200
    inputDesign = ot.MonteCarloExperiment(distribution, size).generate()
    outputDesign = model(inputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 40-48

.. code-block:: Python

    dimension = distribution.getDimension()
    full_sample = ot.Sample(size, 1 + dimension)
    full_sample[:, range(dimension)] = inputDesign
    full_sample[:, dimension] = outputDesign
    full_description = list(inputDesign.getDescription())
    full_description.append(outputDesign.getDescription()[0])
    full_sample.setDescription(full_description)








.. GENERATED FROM PYTHON SOURCE LINES 49-58

.. code-block:: Python

    marginal_distribution = ot.ComposedDistribution(
        [
            ot.KernelSmoothing().build(full_sample.getMarginal(i))
            for i in range(1 + dimension)
        ]
    )
    clouds = ot.VisualTest.DrawPairsMarginals(full_sample, marginal_distribution)
    _ = otv.View(clouds, figure_kw={"figsize": (10.0, 10.0)})




.. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_nloscillator_sensitivity_001.png
   :alt: plot nloscillator sensitivity
   :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_nloscillator_sensitivity_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: Python

    output_distribution = ot.KernelSmoothing().build(outputDesign)
    _ = otv.View(output_distribution.drawPDF())




.. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_nloscillator_sensitivity_002.png
   :alt: plot nloscillator sensitivity
   :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_nloscillator_sensitivity_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-65

Perform sensitivity analysis
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-68

Create X/Y data

.. GENERATED FROM PYTHON SOURCE LINES 68-73

.. code-block:: Python

    ot.RandomGenerator.SetSeed(0)
    size = 10000
    inputDesign = ot.SobolIndicesExperiment(distribution, size).generate()
    outputDesign = model(inputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 74-75

Compute first order indices using the Saltelli estimator

.. GENERATED FROM PYTHON SOURCE LINES 75-79

.. code-block:: Python

    sensitivityAnalysis = ot.SaltelliSensitivityAlgorithm(inputDesign, outputDesign, size)
    computed_first_order = sensitivityAnalysis.getFirstOrderIndices()
    computed_total_order = sensitivityAnalysis.getTotalOrderIndices()








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Compare with exact results

.. GENERATED FROM PYTHON SOURCE LINES 81-91

.. code-block:: Python

    print("Sample size : ", size)
    # First order
    # Compute absolute error (the LRE cannot be computed,
    # because S can be zero)
    print("Computed first order = ", computed_first_order)
    print("Exact first order = ", exact_first_order)
    # Total order
    print("Computed total order = ", computed_total_order)
    print("Exact total order = ", exact_total_order)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sample size :  10000
    Computed first order =  [0.374552,0.0347919,0.0853174,0.186246,0.120437,0.04356,0.0358369,0.00467826]
    Exact first order =  [0.4,0.03,0.09,0.18,0.12,0.05,0.05,0]
    Computed total order =  [0.375092,0.0778412,0.127126,0.279952,0.201389,0.0667096,0.0458004,0.00812321]
    Exact total order =  [0.4,0.04,0.1,0.23,0.16,0.07,0.06,0.01]




.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: Python

    _ = otv.View(sensitivityAnalysis.draw())




.. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_nloscillator_sensitivity_003.png
   :alt: Sobol' indices - SaltelliSensitivityAlgorithm
   :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_nloscillator_sensitivity_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-96

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.803 seconds)


.. _sphx_glr_download_auto_examples_sensitivity_problems_plot_nloscillator_sensitivity.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_nloscillator_sensitivity.ipynb <plot_nloscillator_sensitivity.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_nloscillator_sensitivity.py <plot_nloscillator_sensitivity.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_nloscillator_sensitivity.zip <plot_nloscillator_sensitivity.zip>`
