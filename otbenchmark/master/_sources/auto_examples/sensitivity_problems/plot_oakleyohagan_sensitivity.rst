
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/sensitivity_problems/plot_oakleyohagan_sensitivity.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_sensitivity_problems_plot_oakleyohagan_sensitivity.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_sensitivity_problems_plot_oakleyohagan_sensitivity.py:


Benchmark the Oakley-O'Hagan test function
==========================================

.. GENERATED FROM PYTHON SOURCE LINES 7-11

.. code-block:: Python

    import openturns as ot
    import otbenchmark as otb
    import openturns.viewer as otv








.. GENERATED FROM PYTHON SOURCE LINES 12-15

.. code-block:: Python

    problem = otb.OakleyOHaganSensitivity()
    print(problem)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    name = Oakley-O'Hagan
    distribution = ComposedDistribution(Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), IndependentCopula(dimension = 15))
    function = class=PythonEvaluation name=OpenTURNSPythonFunction
    firstOrderIndices = [0,0,0,0,0,0.02,0.02,0.03,0.05,0.01,0.1,0.14,0.1,0.11,0.12]#15
    totalOrderIndices = [0.06,0.06,0.04,0.05,0.02,0.04,0.06,0.08,0.1,0.04,0.15,0.15,0.14,0.14,0.16]#15




.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. code-block:: Python

    distribution = problem.getInputDistribution()
    model = problem.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 20-21

Exact first and total order

.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: Python

    exact_first_order = problem.getFirstOrderIndices()
    print(exact_first_order)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0,0,0,0,0,0.02,0.02,0.03,0.05,0.01,0.1,0.14,0.1,0.11,0.12]#15




.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: Python

    exact_total_order = problem.getTotalOrderIndices()
    print(exact_total_order)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.06,0.06,0.04,0.05,0.02,0.04,0.06,0.08,0.1,0.04,0.15,0.15,0.14,0.14,0.16]#15




.. GENERATED FROM PYTHON SOURCE LINES 29-31

Plot the function
-----------------

.. GENERATED FROM PYTHON SOURCE LINES 33-34

Create X/Y data

.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: Python

    ot.RandomGenerator.SetSeed(0)
    size = 200
    inputDesign = ot.MonteCarloExperiment(distribution, size).generate()
    outputDesign = model(inputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 40-61

.. code-block:: Python

    dimension = distribution.getDimension()
    nbcolumns = 5
    nbrows = int(dimension / nbcolumns)
    grid = ot.GridLayout(nbrows, nbcolumns)
    inputDescription = distribution.getDescription()
    outputDescription = model.getOutputDescription()[0]
    index = 0
    for i in range(nbrows):
        for j in range(nbcolumns):
            graph = ot.Graph(
                "n=%d" % (size), inputDescription[index], outputDescription, True, ""
            )
            sample = ot.Sample(size, 2)
            sample[:, 0] = inputDesign[:, index]
            sample[:, 1] = outputDesign[:, 0]
            cloud = ot.Cloud(sample)
            graph.add(cloud)
            grid.setGraph(i, j, graph)
            index += 1
    _ = otv.View(grid, figure_kw={"figsize": (10.0, 10.0)})




.. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_oakleyohagan_sensitivity_001.png
   :alt: , n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200
   :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_oakleyohagan_sensitivity_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: Python

    output_distribution = ot.KernelSmoothing().build(outputDesign)
    _ = otv.View(output_distribution.drawPDF())




.. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_oakleyohagan_sensitivity_002.png
   :alt: plot oakleyohagan sensitivity
   :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_oakleyohagan_sensitivity_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 66-68

Perform sensitivity analysis
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 70-71

Create X/Y data

.. GENERATED FROM PYTHON SOURCE LINES 71-76

.. code-block:: Python

    ot.RandomGenerator.SetSeed(0)
    size = 1000
    inputDesign = ot.SobolIndicesExperiment(distribution, size).generate()
    outputDesign = model(inputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 77-78

Compute first order indices using the Saltelli estimator

.. GENERATED FROM PYTHON SOURCE LINES 78-82

.. code-block:: Python

    sensitivityAnalysis = ot.SaltelliSensitivityAlgorithm(inputDesign, outputDesign, size)
    computed_first_order = sensitivityAnalysis.getFirstOrderIndices()
    computed_total_order = sensitivityAnalysis.getTotalOrderIndices()








.. GENERATED FROM PYTHON SOURCE LINES 83-84

Compare with exact results

.. GENERATED FROM PYTHON SOURCE LINES 84-94

.. code-block:: Python

    print("Sample size : ", size)
    # First order
    # Compute absolute error (the LRE cannot be computed,
    # because S can be zero)
    print("Computed first order = ", computed_first_order)
    print("Exact first order = ", exact_first_order)
    # Total order
    print("Computed total order = ", computed_total_order)
    print("Exact total order = ", exact_total_order)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sample size :  1000
    Computed first order =  [0.00686154,0.0173649,0.0121877,-0.0153947,-0.0223964,0.0038293,0.0373239,0.014391,0.0568532,0.0057647,0.0867005,0.162502,0.0882588,0.0706715,0.108779]#15
    Exact first order =  [0,0,0,0,0,0.02,0.02,0.03,0.05,0.01,0.1,0.14,0.1,0.11,0.12]#15
    Computed total order =  [0.0565808,0.0625981,0.0461935,0.0758801,0.0356766,0.028928,0.058367,0.101891,0.087846,0.0501691,0.128598,0.146953,0.125396,0.149566,0.16276]#15
    Exact total order =  [0.06,0.06,0.04,0.05,0.02,0.04,0.06,0.08,0.1,0.04,0.15,0.15,0.14,0.14,0.16]#15




.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: Python

    _ = otv.View(sensitivityAnalysis.draw())




.. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_oakleyohagan_sensitivity_003.png
   :alt: Sobol' indices - SaltelliSensitivityAlgorithm
   :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_oakleyohagan_sensitivity_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 98-99

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.712 seconds)


.. _sphx_glr_download_auto_examples_sensitivity_problems_plot_oakleyohagan_sensitivity.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oakleyohagan_sensitivity.ipynb <plot_oakleyohagan_sensitivity.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oakleyohagan_sensitivity.py <plot_oakleyohagan_sensitivity.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_oakleyohagan_sensitivity.zip <plot_oakleyohagan_sensitivity.zip>`
