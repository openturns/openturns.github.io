
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/sensitivity_problems/plot_gaussian_product_sensitivity.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_sensitivity_problems_plot_gaussian_product_sensitivity.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_sensitivity_problems_plot_gaussian_product_sensitivity.py:


Benchmark the gaussian product test function
============================================

.. GENERATED FROM PYTHON SOURCE LINES 7-11

.. code-block:: Python

    import openturns as ot
    import otbenchmark as otb
    import openturns.viewer as otv








.. GENERATED FROM PYTHON SOURCE LINES 12-14

.. code-block:: Python

    problem = otb.GaussianProductSensitivity()








.. GENERATED FROM PYTHON SOURCE LINES 15-17

.. code-block:: Python

    print(problem)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    name = GaussianProduct
    distribution = ComposedDistribution(Normal(mu = 0, sigma = 1), Normal(mu = 0, sigma = 1), IndependentCopula(dimension = 2))
    function = class=PythonEvaluation name=OpenTURNSPythonFunction
    firstOrderIndices = [0,0]
    totalOrderIndices = [1,1]




.. GENERATED FROM PYTHON SOURCE LINES 18-21

.. code-block:: Python

    distribution = problem.getInputDistribution()
    model = problem.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 22-23

Exact first and total order

.. GENERATED FROM PYTHON SOURCE LINES 23-26

.. code-block:: Python

    exact_first_order = problem.getFirstOrderIndices()
    print(exact_first_order)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0,0]




.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: Python

    exact_total_order = problem.getTotalOrderIndices()
    print(exact_total_order)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1,1]




.. GENERATED FROM PYTHON SOURCE LINES 31-33

Plot the function
-----------------

.. GENERATED FROM PYTHON SOURCE LINES 35-36

Create X/Y data

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: Python

    ot.RandomGenerator.SetSeed(0)
    size = 200
    inputDesign = ot.MonteCarloExperiment(distribution, size).generate()
    outputDesign = model(inputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 42-50

.. code-block:: Python

    dimension = distribution.getDimension()
    full_sample = ot.Sample(size, 1 + dimension)
    full_sample[:, range(dimension)] = inputDesign
    full_sample[:, dimension] = outputDesign
    full_description = list(inputDesign.getDescription())
    full_description.append(outputDesign.getDescription()[0])
    full_sample.setDescription(full_description)








.. GENERATED FROM PYTHON SOURCE LINES 51-60

.. code-block:: Python

    marginal_distribution = ot.ComposedDistribution(
        [
            ot.KernelSmoothing().build(full_sample.getMarginal(i))
            for i in range(1 + dimension)
        ]
    )
    clouds = ot.VisualTest.DrawPairsMarginals(full_sample, marginal_distribution)
    view = otv.View(clouds, figure_kw={"figsize": (6.0, 6.0)})




.. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_gaussian_product_sensitivity_001.png
   :alt: plot gaussian product sensitivity
   :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_gaussian_product_sensitivity_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: Python

    output_distribution = ot.KernelSmoothing().build(outputDesign)
    _ = otv.View(output_distribution.drawPDF())




.. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_gaussian_product_sensitivity_002.png
   :alt: plot gaussian product sensitivity
   :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_gaussian_product_sensitivity_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-67

Perform sensitivity analysis
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-70

Create X/Y data

.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: Python

    ot.RandomGenerator.SetSeed(0)
    size = 10000
    inputDesign = ot.SobolIndicesExperiment(distribution, size).generate()
    outputDesign = model(inputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 76-77

Compute first order indices using the Saltelli estimator

.. GENERATED FROM PYTHON SOURCE LINES 77-81

.. code-block:: Python

    sensitivityAnalysis = ot.SaltelliSensitivityAlgorithm(inputDesign, outputDesign, size)
    computed_first_order = sensitivityAnalysis.getFirstOrderIndices()
    computed_total_order = sensitivityAnalysis.getTotalOrderIndices()








.. GENERATED FROM PYTHON SOURCE LINES 82-83

Compare with exact results

.. GENERATED FROM PYTHON SOURCE LINES 83-93

.. code-block:: Python

    print("Sample size : ", size)
    # First order
    # Compute absolute error (the LRE cannot be computed,
    # because S can be zero)
    print("Computed first order = ", computed_first_order)
    print("Exact first order = ", exact_first_order)
    # Total order
    print("Computed total order = ", computed_total_order)
    print("Exact total order = ", exact_total_order)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sample size :  10000
    Computed first order =  [-0.00181798,-0.00311334]
    Exact first order =  [0,0]
    Computed total order =  [1.00086,1.00496]
    Exact total order =  [1,1]




.. GENERATED FROM PYTHON SOURCE LINES 94-96

.. code-block:: Python

    _ = otv.View(sensitivityAnalysis.draw())




.. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_gaussian_product_sensitivity_003.png
   :alt: Sobol' indices - SaltelliSensitivityAlgorithm
   :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_gaussian_product_sensitivity_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 97-98

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.641 seconds)


.. _sphx_glr_download_auto_examples_sensitivity_problems_plot_gaussian_product_sensitivity.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_gaussian_product_sensitivity.ipynb <plot_gaussian_product_sensitivity.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_gaussian_product_sensitivity.py <plot_gaussian_product_sensitivity.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_gaussian_product_sensitivity.zip <plot_gaussian_product_sensitivity.zip>`
