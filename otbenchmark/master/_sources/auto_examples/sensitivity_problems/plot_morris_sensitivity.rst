
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/sensitivity_problems/plot_morris_sensitivity.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_sensitivity_problems_plot_morris_sensitivity.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_sensitivity_problems_plot_morris_sensitivity.py:


Benchmark the Morris test function
==================================

.. GENERATED FROM PYTHON SOURCE LINES 7-11

.. code-block:: Python

    import openturns as ot
    import otbenchmark as otb
    import openturns.viewer as otv








.. GENERATED FROM PYTHON SOURCE LINES 12-15

.. code-block:: Python

    problem = otb.MorrisSensitivity()
    print(problem)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    name = Morris
    distribution = ComposedDistribution(Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), Uniform(a = 0, b = 1), IndependentCopula(dimension = 20))
    function = class=PythonEvaluation name=MorrisFunction
    firstOrderIndices = [0.08,0.08,0.06,0.08,0.06,0.13,0.06,0.13,0.13,0.12,0,0,0,0,0,0,0,0,0,0]#20
    totalOrderIndices = [0.11,0.11,0.06,0.11,0.06,0.13,0.06,0.13,0.13,0.12,0,0,0,0,0,0,0,0,0,0]#20




.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. code-block:: Python

    distribution = problem.getInputDistribution()
    model = problem.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 20-21

Exact first and total order

.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: Python

    exact_first_order = problem.getFirstOrderIndices()
    exact_first_order






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=20 values=[0.08,0.08,0.06,0.08,0.06,0.13,0.06,0.13,0.13,0.12,0,0,0,0,0,0,0,0,0,0]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: Python

    exact_total_order = problem.getTotalOrderIndices()
    exact_total_order






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=20 values=[0.11,0.11,0.06,0.11,0.06,0.13,0.06,0.13,0.13,0.12,0,0,0,0,0,0,0,0,0,0]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 29-31

Plot the function
-----------------

.. GENERATED FROM PYTHON SOURCE LINES 33-34

Create X/Y data

.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: Python

    ot.RandomGenerator.SetSeed(0)
    size = 200
    inputDesign = ot.MonteCarloExperiment(distribution, size).generate()
    outputDesign = model(inputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 40-65

.. code-block:: Python

    dimension = distribution.getDimension()
    nbcolumns = 4
    nbrows = int(dimension / nbcolumns)
    grid = ot.GridLayout(nbrows, nbcolumns)
    inputDescription = distribution.getDescription()
    outputDescription = model.getOutputDescription()[0]
    index = 0
    for i in range(nbrows):
        for j in range(nbcolumns):
            graph = ot.Graph(
                "n=%d" % (size), inputDescription[index], outputDescription, True, ""
            )
            sample = ot.Sample(size, 2)
            sample[:, 0] = inputDesign[:, index]
            sample[:, 1] = outputDesign[:, 0]
            cloud = ot.Cloud(sample)
            graph.add(cloud)
            grid.setGraph(i, j, graph)
            index += 1
    _ = otv.View(grid, figure_kw={"figsize": (10.0, 10.0)})

    # %
    output_distribution = ot.KernelSmoothing().build(outputDesign)
    _ = otv.View(output_distribution.drawPDF())




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_morris_sensitivity_001.png
         :alt: , n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200, n=200
         :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_morris_sensitivity_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_morris_sensitivity_002.png
         :alt: plot morris sensitivity
         :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_morris_sensitivity_002.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 66-68

Perform sensitivity analysis
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 70-71

Create X/Y data

.. GENERATED FROM PYTHON SOURCE LINES 71-76

.. code-block:: Python

    ot.RandomGenerator.SetSeed(0)
    size = 30
    inputDesign = ot.SobolIndicesExperiment(distribution, size).generate()
    outputDesign = model(inputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 77-78

Compute first order indices using the Saltelli estimator

.. GENERATED FROM PYTHON SOURCE LINES 78-82

.. code-block:: Python

    sensitivityAnalysis = ot.SaltelliSensitivityAlgorithm(inputDesign, outputDesign, size)
    computed_first_order = sensitivityAnalysis.getFirstOrderIndices()
    computed_total_order = sensitivityAnalysis.getTotalOrderIndices()








.. GENERATED FROM PYTHON SOURCE LINES 83-84

Compare with exact results

.. GENERATED FROM PYTHON SOURCE LINES 84-94

.. code-block:: Python

    print("Sample size : ", size)
    # First order
    # Compute absolute error (the LRE cannot be computed,
    # because S can be zero)
    print("Computed first order = ", computed_first_order)
    print("Exact first order = ", exact_first_order)
    # Total order
    print("Computed total order = ", computed_total_order)
    print("Exact total order = ", exact_total_order)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sample size :  30
    Computed first order =  [-0.133001,-0.284659,-0.244261,-0.013848,0.0717474,-0.189384,-0.192788,-0.232371,0.176264,-0.119774,-0.220786,-0.275918,-0.232678,-0.25769,-0.276469,-0.278563,-0.261348,-0.287263,-0.242783,-0.248379]#20
    Exact first order =  [0.08,0.08,0.06,0.08,0.06,0.13,0.06,0.13,0.13,0.12,0,0,0,0,0,0,0,0,0,0]#20
    Computed total order =  [0.14052,0.0954675,-0.0522002,0.153156,0.0131494,0.113636,0.109581,0.150205,0.169807,0.268959,0.0473076,0.00448006,0.00150032,0.00855239,-0.0238276,-0.0252896,0.0187677,-0.00886828,-0.0161144,-0.00844209]#20
    Exact total order =  [0.11,0.11,0.06,0.11,0.06,0.13,0.06,0.13,0.13,0.12,0,0,0,0,0,0,0,0,0,0]#20




.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: Python

    _ = otv.View(sensitivityAnalysis.draw())




.. image-sg:: /auto_examples/sensitivity_problems/images/sphx_glr_plot_morris_sensitivity_003.png
   :alt: Sobol' indices - SaltelliSensitivityAlgorithm
   :srcset: /auto_examples/sensitivity_problems/images/sphx_glr_plot_morris_sensitivity_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 98-99

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.886 seconds)


.. _sphx_glr_download_auto_examples_sensitivity_problems_plot_morris_sensitivity.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_morris_sensitivity.ipynb <plot_morris_sensitivity.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_morris_sensitivity.py <plot_morris_sensitivity.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_morris_sensitivity.zip <plot_morris_sensitivity.zip>`
