
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_uncecomp_ot_examples.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_uncecomp_ot_examples.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_uncecomp_ot_examples.py:


Introduction to OpenTURNS objects
=================================

.. GENERATED FROM PYTHON SOURCE LINES 7-15

In the otbenchmark package, we use several objects that must be known in order to distinguish which objects
come from the OpenTURNS library or from otbenchmark.
For reliability problems, there are three objects that cannot be ignored:

* the :class:`openturns.Distribution`,
* the :class:`openturns.Function`,
* the :class:`openturns.ThresholdEvent`.


.. GENERATED FROM PYTHON SOURCE LINES 17-21

.. code-block:: Python

    import openturns as ot
    import matplotlib.pyplot as plt
    import openturns.viewer as otv








.. GENERATED FROM PYTHON SOURCE LINES 22-23

Avoid mixture warnings

.. GENERATED FROM PYTHON SOURCE LINES 23-25

.. code-block:: Python

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 26-28

Distribution
------------

.. GENERATED FROM PYTHON SOURCE LINES 30-31

Define two marginals

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: Python

    X0 = ot.Normal(0.0, 1.0)
    X1 = ot.Uniform(0.0, 1.0)








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Define an independent joint distribution

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: Python

    X_ind = ot.ComposedDistribution([X0, X1])








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Define a dependent joint distribution using a copula (e.g., Frank copula)

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: Python

    copula = ot.FrankCopula(5)
    X_dep = ot.ComposedDistribution([X0, X1], copula)








.. GENERATED FROM PYTHON SOURCE LINES 44-45

Generate a sample of each joint distribution

.. GENERATED FROM PYTHON SOURCE LINES 45-49

.. code-block:: Python

    X_ind_sample = X_ind.getSample(1000)
    X_dep_sample = X_dep.getSample(1000)









.. GENERATED FROM PYTHON SOURCE LINES 50-54

.. code-block:: Python

    method_list = [method for method in dir(X0) if method.startswith("__") is False]
    print(len(method_list))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    145




.. GENERATED FROM PYTHON SOURCE LINES 55-74

.. code-block:: Python

    plt.figure(figsize=(8, 8))
    plt.scatter(
        X_dep_sample[:, 0],
        X_dep_sample[:, 1],
        label="X dependent (Frank copula) - Monte Carlo (size 1000)",
        marker="x",
    )
    plt.scatter(
        X_ind_sample[:, 0],
        X_ind_sample[:, 1],
        label="X independent - Monte Carlo (size 1000)",
        marker=".",
    )

    plt.xlabel(r"$X_0 \sim Normal(0, 1)$", fontsize=14)
    plt.ylabel(r"$X_1 \sim Uniform(0, 1)$", fontsize=14)
    _ = plt.legend(loc="best", fontsize=14)





.. image-sg:: /auto_examples/images/sphx_glr_plot_uncecomp_ot_examples_001.png
   :alt: plot uncecomp ot examples
   :srcset: /auto_examples/images/sphx_glr_plot_uncecomp_ot_examples_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 75-92

.. code-block:: Python

    graph = ot.Graph(
        "Two samples with the same marginals ($n=1000$)",
        r"$X_0 \sim \mathcal{N}(0, 1)$",
        r"$X_1 \sim \mathcal{U}(0, 1)$",
        True,
    )
    cloud = ot.Cloud(X_dep_sample[:, 0], X_dep_sample[:, 1])
    cloud.setLegend("Frank copula")
    graph.add(cloud)
    cloud = ot.Cloud(X_ind_sample[:, 0], X_ind_sample[:, 1])
    cloud.setLegend("Independent")
    graph.add(cloud)
    graph.setLegendPosition("topright")
    graph.setColors(ot.Drawable.BuildDefaultPalette(2))
    view = otv.View(graph, figure_kw={"figsize": (4.5, 3.5)})
    # view.save("two_samples.pdf")




.. image-sg:: /auto_examples/images/sphx_glr_plot_uncecomp_ot_examples_002.png
   :alt: Two samples with the same marginals ($n=1000$)
   :srcset: /auto_examples/images/sphx_glr_plot_uncecomp_ot_examples_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-95

Function
--------

.. GENERATED FROM PYTHON SOURCE LINES 97-98

Define a symbolic function

.. GENERATED FROM PYTHON SOURCE LINES 98-102

.. code-block:: Python

    myfunction = ot.SymbolicFunction(["x0", "x1"], ["sin(x0) * (1 + x1 ^ 2)"])
    myfunction.setInputDescription(["$x_0$", "$x_1$"])
    myfunction.setOutputDescription(["$y$"])








.. GENERATED FROM PYTHON SOURCE LINES 103-104

Define input random vectors

.. GENERATED FROM PYTHON SOURCE LINES 104-107

.. code-block:: Python

    inputVect_ind = ot.RandomVector(X_ind)
    inputVect_dep = ot.RandomVector(X_dep)








.. GENERATED FROM PYTHON SOURCE LINES 108-109

Compose input random vectors by the symbolic function

.. GENERATED FROM PYTHON SOURCE LINES 109-112

.. code-block:: Python

    outputVect_ind = ot.CompositeRandomVector(myfunction, inputVect_ind)
    outputVect_dep = ot.CompositeRandomVector(myfunction, inputVect_dep)








.. GENERATED FROM PYTHON SOURCE LINES 113-114

Sample the output random variable

.. GENERATED FROM PYTHON SOURCE LINES 114-118

.. code-block:: Python

    outputSample_ind = outputVect_ind.getSample(10000)
    outputSample_dep = outputVect_dep.getSample(10000)









.. GENERATED FROM PYTHON SOURCE LINES 119-139

.. code-block:: Python

    plt.figure(figsize=(9, 6))
    plt.hist(
        outputSample_ind,
        bins=40,
        histtype="stepfilled",
        alpha=0.3,
        ec="k",
        label="X independent",
    )
    plt.hist(
        outputSample_dep,
        bins=40,
        histtype="stepfilled",
        alpha=0.3,
        ec="k",
        label="X dependent (Frank copula)",
    )
    plt.xlabel("$g(X)$ histogram", fontsize=14)
    _ = plt.legend(loc="best", fontsize=14)




.. image-sg:: /auto_examples/images/sphx_glr_plot_uncecomp_ot_examples_003.png
   :alt: plot uncecomp ot examples
   :srcset: /auto_examples/images/sphx_glr_plot_uncecomp_ot_examples_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 140-150

.. code-block:: Python

    graph = ot.HistogramFactory().build(outputSample_ind).drawPDF()
    graph.setLegends(["Independent"])
    graph.setTitle(r"Distribution of the output $y=g(\mathbf{X})$")
    curve = ot.HistogramFactory().build(outputSample_dep).drawPDF()
    curve.setLegends(["Frank"])
    graph.add(curve)
    graph.setColors(ot.Drawable.BuildDefaultPalette(2))
    view = otv.View(graph, figure_kw={"figsize": (4.5, 3.5)})
    # view.save("histo_output.pdf")




.. image-sg:: /auto_examples/images/sphx_glr_plot_uncecomp_ot_examples_004.png
   :alt: Distribution of the output $y=g(\mathbf{X})$
   :srcset: /auto_examples/images/sphx_glr_plot_uncecomp_ot_examples_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 151-161

.. code-block:: Python

    graph = ot.KernelSmoothing().build(outputSample_ind).drawPDF()
    graph.setLegends(["Independent"])
    graph.setTitle(r"Distribution of the output $y=g(\mathbf{X})$")
    curve = ot.KernelSmoothing().build(outputSample_dep).drawPDF()
    curve.setLegends(["Frank"])
    graph.add(curve)
    graph.setColors(ot.Drawable.BuildDefaultPalette(2))
    view = otv.View(graph, figure_kw={"figsize": (4.5, 3.5)})
    # view.save("kernel_output.pdf")




.. image-sg:: /auto_examples/images/sphx_glr_plot_uncecomp_ot_examples_005.png
   :alt: Distribution of the output $y=g(\mathbf{X})$
   :srcset: /auto_examples/images/sphx_glr_plot_uncecomp_ot_examples_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 162-164

ThresholdEvent
--------------

.. GENERATED FROM PYTHON SOURCE LINES 166-170

.. code-block:: Python

    threshold = 1.0  # Change this to 2.0 to turn it into a difficult problem
    event = ot.ThresholdEvent(outputVect_ind, ot.Greater(), threshold)
    event






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>class=ThresholdEventImplementation antecedent=class=CompositeRandomVector function=class=Function name=Unnamed implementation=class=FunctionImplementation name=Unnamed description=[$x_0$,$x_1$,$y$] evaluationImplementation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x0,x1] outputVariablesNames=[y0] formulas=[sin(x0) * (1 + x1 ^ 2)] gradientImplementation=class=SymbolicGradient name=Unnamed evaluation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x0,x1] outputVariablesNames=[y0] formulas=[sin(x0) * (1 + x1 ^ 2)] hessianImplementation=class=SymbolicHessian name=Unnamed evaluation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[x0,x1] outputVariablesNames=[y0] formulas=[sin(x0) * (1 + x1 ^ 2)] antecedent=class=UsualRandomVector distribution=class=JointDistribution name=JointDistribution dimension=2 copula=class=IndependentCopula name=IndependentCopula dimension=2 marginal[0]=class=Normal name=Normal dimension=1 mean=class=Point name=Unnamed dimension=1 values=[0] sigma=class=Point name=Unnamed dimension=1 values=[1] correlationMatrix=class=CorrelationMatrix dimension=1 implementation=class=MatrixImplementation name=Unnamed rows=1 columns=1 values=[1] marginal[1]=class=Uniform name=Uniform dimension=1 a=0 b=1 operator=class=Greater name=Unnamed threshold=1</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 171-179

.. code-block:: Python

    maximumCoV = 0.05  # Coefficient of variation
    maximumNumberOfBlocks = 100000
    experiment = ot.MonteCarloExperiment()
    algoMC = ot.ProbabilitySimulationAlgorithm(event, experiment)
    algoMC.setMaximumOuterSampling(maximumNumberOfBlocks)
    algoMC.setBlockSize(1)
    algoMC.setMaximumCoefficientOfVariation(maximumCoV)








.. GENERATED FROM PYTHON SOURCE LINES 180-182

.. code-block:: Python

    algoMC.run()








.. GENERATED FROM PYTHON SOURCE LINES 183-186

.. code-block:: Python

    result = algoMC.getResult()
    probability = result.getProbabilityEstimate()
    print("Pf = ", probability)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pf =  0.15821596244131447





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 35.870 seconds)


.. _sphx_glr_download_auto_examples_plot_uncecomp_ot_examples.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_uncecomp_ot_examples.ipynb <plot_uncecomp_ot_examples.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_uncecomp_ot_examples.py <plot_uncecomp_ot_examples.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_uncecomp_ot_examples.zip <plot_uncecomp_ot_examples.zip>`
