
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_convergence_reliability_mc.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_convergence_reliability_mc.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_convergence_reliability_mc.py:


Convergence of Monte-Carlo to estimate the probability in a reliability problem
===============================================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-12

The goal of this document is to present the convergence of the Monte-Carlo algorithm
to the exact probability when the sample size increases.
This convergence is expressed in terms of absolute error.
We show that the rate of convergence is :math:`O(\sqrt{n})`,
where :math:`n` is the sample size.

.. GENERATED FROM PYTHON SOURCE LINES 14-20

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as otv
    import numpy as np
    import otbenchmark as otb
    import time








.. GENERATED FROM PYTHON SOURCE LINES 21-63

.. code-block:: Python

    problem = otb.RminusSReliability()
    print(problem)


    def ComputeProbabilityFromMonteCarlo(
        problem, coefficientOfVariation=0.1, maximumOuterSampling=1000, blockSize=2
    ):
        event = problem.getEvent()
        g = event.getFunction()
        # Create the Monte-Carlo algorithm
        algoProb = ot.ProbabilitySimulationAlgorithm(event)
        algoProb.setMaximumOuterSampling(maximumOuterSampling)
        algoProb.setBlockSize(blockSize)
        algoProb.setMaximumCoefficientOfVariation(coefficientOfVariation)
        initialNumberOfFunctionEvaluations = g.getEvaluationCallsNumber()
        algoProb.run()
        # Get the results
        resultAlgo = algoProb.getResult()
        numberOfFunctionEvaluations = (
            g.getEvaluationCallsNumber() - initialNumberOfFunctionEvaluations
        )
        pf = resultAlgo.getProbabilityEstimate()
        level = 0.95
        c95 = resultAlgo.getConfidenceLength(level)
        pmin = pf - 0.5 * c95
        pmax = pf + 0.5 * c95
        print(
            "Number of function calls = %d" % (numberOfFunctionEvaluations),
            ", Pf = %.4f" % (pf),
            ", %.1f %% confidence interval :[%.4f,%.4f] " % (level * 100, pmin, pmax),
        )
        absoluteError = abs(pf - problem.getProbability())
        result = {
            "numberOfFunctionEvaluations": numberOfFunctionEvaluations,
            "pf": pf,
            "pmin": pmin,
            "pmax": pmax,
            "absoluteError": absoluteError,
        }
        return result






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    name = R-S
    event = class=ThresholdEventImplementation antecedent=class=CompositeRandomVector function=class=Function name=Unnamed implementation=class=FunctionImplementation name=Unnamed description=[R,S,y0] evaluationImplementation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[R,S] outputVariablesNames=[y0] formulas=[R - S] gradientImplementation=class=SymbolicGradient name=Unnamed evaluation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[R,S] outputVariablesNames=[y0] formulas=[R - S] hessianImplementation=class=SymbolicHessian name=Unnamed evaluation=class=SymbolicEvaluation name=Unnamed inputVariablesNames=[R,S] outputVariablesNames=[y0] formulas=[R - S] antecedent=class=UsualRandomVector distribution=class=JointDistribution name=JointDistribution dimension=2 copula=class=IndependentCopula name=IndependentCopula dimension=2 marginal[0]=class=Normal name=Normal dimension=1 mean=class=Point name=Unnamed dimension=1 values=[4] sigma=class=Point name=Unnamed dimension=1 values=[1] correlationMatrix=class=CorrelationMatrix dimension=1 implementation=class=MatrixImplementation name=Unnamed rows=1 columns=1 values=[1] marginal[1]=class=Normal name=Normal dimension=1 mean=class=Point name=Unnamed dimension=1 values=[2] sigma=class=Point name=Unnamed dimension=1 values=[1] correlationMatrix=class=CorrelationMatrix dimension=1 implementation=class=MatrixImplementation name=Unnamed rows=1 columns=1 values=[1] operator=class=Less name=Unnamed threshold=0
    probability = 0.07864960352514257





.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: Python

    result = ComputeProbabilityFromMonteCarlo(problem)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of function calls = 1842 , Pf = 0.0765 , 95.0 % confidence interval :[0.0616,0.0915] 




.. GENERATED FROM PYTHON SOURCE LINES 67-72

.. code-block:: Python

    numberOfPoints = 15  # Number of atomic experiments
    numberOfRepetitions = 10  # Number of repetitions of each experiment
    sampleSizeAbsoluteErrorTable = ot.Sample(numberOfPoints * numberOfRepetitions, 2)
    sampleSizeAbsoluteErrorTable.setDescription(["Sample size", "Absolute error"])








.. GENERATED FROM PYTHON SOURCE LINES 73-76

.. code-block:: Python

    cov = 0.0
    startTime = time.time()








.. GENERATED FROM PYTHON SOURCE LINES 77-91

.. code-block:: Python

    maximumOuterSampling = 1
    index = 0
    for i in range(numberOfPoints):
        maximumOuterSampling *= 2
        for j in range(numberOfRepetitions):
            result = ComputeProbabilityFromMonteCarlo(
                problem,
                coefficientOfVariation=cov,
                maximumOuterSampling=maximumOuterSampling,
            )
            sampleSizeAbsoluteErrorTable[index, 0] = result["numberOfFunctionEvaluations"]
            sampleSizeAbsoluteErrorTable[index, 1] = result["absoluteError"]
            index += 1





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of function calls = 4 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 4 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 4 , Pf = 0.2500 , 95.0 % confidence interval :[-0.2978,0.7978] 
    Number of function calls = 4 , Pf = 0.2500 , 95.0 % confidence interval :[-0.2978,0.7978] 
    Number of function calls = 4 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 4 , Pf = 0.2500 , 95.0 % confidence interval :[-0.2978,0.7978] 
    Number of function calls = 4 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 4 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 4 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 4 , Pf = 0.2500 , 95.0 % confidence interval :[-0.2978,0.7978] 
    Number of function calls = 8 , Pf = 0.1250 , 95.0 % confidence interval :[-0.1623,0.4123] 
    Number of function calls = 8 , Pf = 0.1250 , 95.0 % confidence interval :[-0.1623,0.4123] 
    Number of function calls = 8 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 8 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 8 , Pf = 0.1250 , 95.0 % confidence interval :[-0.1623,0.4123] 
    Number of function calls = 8 , Pf = 0.1250 , 95.0 % confidence interval :[-0.1623,0.4123] 
    Number of function calls = 8 , Pf = 0.1250 , 95.0 % confidence interval :[-0.1623,0.4123] 
    Number of function calls = 8 , Pf = 0.2500 , 95.0 % confidence interval :[-0.1374,0.6374] 
    Number of function calls = 8 , Pf = 0.2500 , 95.0 % confidence interval :[-0.1374,0.6374] 
    Number of function calls = 8 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 16 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 16 , Pf = 0.0625 , 95.0 % confidence interval :[-0.0844,0.2094] 
    Number of function calls = 16 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 16 , Pf = 0.1250 , 95.0 % confidence interval :[-0.0781,0.3281] 
    Number of function calls = 16 , Pf = 0.0625 , 95.0 % confidence interval :[-0.0844,0.2094] 
    Number of function calls = 16 , Pf = 0.0625 , 95.0 % confidence interval :[-0.0844,0.2094] 
    Number of function calls = 16 , Pf = 0.2500 , 95.0 % confidence interval :[-0.0239,0.5239] 
    Number of function calls = 16 , Pf = 0.0625 , 95.0 % confidence interval :[-0.0844,0.2094] 
    Number of function calls = 16 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 16 , Pf = 0.0000 , 95.0 % confidence interval :[0.0000,0.0000] 
    Number of function calls = 32 , Pf = 0.0312 , 95.0 % confidence interval :[-0.0430,0.1055] 
    Number of function calls = 32 , Pf = 0.0938 , 95.0 % confidence interval :[-0.0161,0.2036] 
    Number of function calls = 32 , Pf = 0.0625 , 95.0 % confidence interval :[-0.0414,0.1664] 
    Number of function calls = 32 , Pf = 0.0625 , 95.0 % confidence interval :[-0.0414,0.1664] 
    Number of function calls = 32 , Pf = 0.1562 , 95.0 % confidence interval :[-0.0025,0.3150] 
    Number of function calls = 32 , Pf = 0.0312 , 95.0 % confidence interval :[-0.0430,0.1055] 
    Number of function calls = 32 , Pf = 0.0625 , 95.0 % confidence interval :[-0.0414,0.1664] 
    Number of function calls = 32 , Pf = 0.0312 , 95.0 % confidence interval :[-0.0430,0.1055] 
    Number of function calls = 32 , Pf = 0.0625 , 95.0 % confidence interval :[-0.0214,0.1464] 
    Number of function calls = 32 , Pf = 0.0625 , 95.0 % confidence interval :[-0.0414,0.1664] 
    Number of function calls = 64 , Pf = 0.1406 , 95.0 % confidence interval :[0.0335,0.2477] 
    Number of function calls = 64 , Pf = 0.0938 , 95.0 % confidence interval :[0.0102,0.1773] 
    Number of function calls = 64 , Pf = 0.0625 , 95.0 % confidence interval :[-0.0109,0.1359] 
    Number of function calls = 64 , Pf = 0.1094 , 95.0 % confidence interval :[0.0138,0.2049] 
    Number of function calls = 64 , Pf = 0.0312 , 95.0 % confidence interval :[-0.0212,0.0837] 
    Number of function calls = 64 , Pf = 0.1719 , 95.0 % confidence interval :[0.0675,0.2762] 
    Number of function calls = 64 , Pf = 0.0469 , 95.0 % confidence interval :[-0.0171,0.1108] 
    Number of function calls = 64 , Pf = 0.0938 , 95.0 % confidence interval :[0.0048,0.1827] 
    Number of function calls = 64 , Pf = 0.0625 , 95.0 % confidence interval :[-0.0109,0.1359] 
    Number of function calls = 64 , Pf = 0.0781 , 95.0 % confidence interval :[-0.0035,0.1598] 
    Number of function calls = 128 , Pf = 0.0937 , 95.0 % confidence interval :[0.0308,0.1567] 
    Number of function calls = 128 , Pf = 0.0781 , 95.0 % confidence interval :[0.0204,0.1359] 
    Number of function calls = 128 , Pf = 0.0781 , 95.0 % confidence interval :[0.0204,0.1359] 
    Number of function calls = 128 , Pf = 0.1016 , 95.0 % confidence interval :[0.0363,0.1669] 
    Number of function calls = 128 , Pf = 0.1172 , 95.0 % confidence interval :[0.0475,0.1869] 
    Number of function calls = 128 , Pf = 0.0703 , 95.0 % confidence interval :[0.0154,0.1252] 
    Number of function calls = 128 , Pf = 0.0391 , 95.0 % confidence interval :[-0.0023,0.0804] 
    Number of function calls = 128 , Pf = 0.0859 , 95.0 % confidence interval :[0.0255,0.1463] 
    Number of function calls = 128 , Pf = 0.0547 , 95.0 % confidence interval :[0.0060,0.1034] 
    Number of function calls = 128 , Pf = 0.0938 , 95.0 % confidence interval :[0.0327,0.1548] 
    Number of function calls = 256 , Pf = 0.0781 , 95.0 % confidence interval :[0.0380,0.1182] 
    Number of function calls = 256 , Pf = 0.0859 , 95.0 % confidence interval :[0.0432,0.1286] 
    Number of function calls = 256 , Pf = 0.0664 , 95.0 % confidence interval :[0.0286,0.1042] 
    Number of function calls = 256 , Pf = 0.0664 , 95.0 % confidence interval :[0.0286,0.1042] 
    Number of function calls = 256 , Pf = 0.0742 , 95.0 % confidence interval :[0.0344,0.1141] 
    Number of function calls = 256 , Pf = 0.0742 , 95.0 % confidence interval :[0.0351,0.1133] 
    Number of function calls = 256 , Pf = 0.0664 , 95.0 % confidence interval :[0.0286,0.1042] 
    Number of function calls = 256 , Pf = 0.0586 , 95.0 % confidence interval :[0.0238,0.0934] 
    Number of function calls = 256 , Pf = 0.1016 , 95.0 % confidence interval :[0.0554,0.1477] 
    Number of function calls = 256 , Pf = 0.0977 , 95.0 % confidence interval :[0.0536,0.1417] 
    Number of function calls = 512 , Pf = 0.0508 , 95.0 % confidence interval :[0.0276,0.0740] 
    Number of function calls = 512 , Pf = 0.0723 , 95.0 % confidence interval :[0.0450,0.0996] 
    Number of function calls = 512 , Pf = 0.0762 , 95.0 % confidence interval :[0.0482,0.1042] 
    Number of function calls = 512 , Pf = 0.0645 , 95.0 % confidence interval :[0.0390,0.0900] 
    Number of function calls = 512 , Pf = 0.0645 , 95.0 % confidence interval :[0.0381,0.0908] 
    Number of function calls = 512 , Pf = 0.0762 , 95.0 % confidence interval :[0.0490,0.1034] 
    Number of function calls = 512 , Pf = 0.0586 , 95.0 % confidence interval :[0.0334,0.0838] 
    Number of function calls = 512 , Pf = 0.1055 , 95.0 % confidence interval :[0.0729,0.1380] 
    Number of function calls = 512 , Pf = 0.0781 , 95.0 % confidence interval :[0.0498,0.1065] 
    Number of function calls = 512 , Pf = 0.0840 , 95.0 % confidence interval :[0.0546,0.1134] 
    Number of function calls = 1024 , Pf = 0.0850 , 95.0 % confidence interval :[0.0639,0.1060] 
    Number of function calls = 1024 , Pf = 0.0742 , 95.0 % confidence interval :[0.0546,0.0939] 
    Number of function calls = 1024 , Pf = 0.0889 , 95.0 % confidence interval :[0.0675,0.1102] 
    Number of function calls = 1024 , Pf = 0.0674 , 95.0 % confidence interval :[0.0485,0.0862] 
    Number of function calls = 1024 , Pf = 0.0850 , 95.0 % confidence interval :[0.0642,0.1058] 
    Number of function calls = 1024 , Pf = 0.0635 , 95.0 % confidence interval :[0.0456,0.0814] 
    Number of function calls = 1024 , Pf = 0.0781 , 95.0 % confidence interval :[0.0580,0.0983] 
    Number of function calls = 1024 , Pf = 0.0967 , 95.0 % confidence interval :[0.0744,0.1189] 
    Number of function calls = 1024 , Pf = 0.0820 , 95.0 % confidence interval :[0.0615,0.1026] 
    Number of function calls = 1024 , Pf = 0.0752 , 95.0 % confidence interval :[0.0553,0.0951] 
    Number of function calls = 2048 , Pf = 0.0786 , 95.0 % confidence interval :[0.0644,0.0929] 
    Number of function calls = 2048 , Pf = 0.0776 , 95.0 % confidence interval :[0.0636,0.0917] 
    Number of function calls = 2048 , Pf = 0.0840 , 95.0 % confidence interval :[0.0692,0.0988] 
    Number of function calls = 2048 , Pf = 0.0664 , 95.0 % confidence interval :[0.0531,0.0797] 
    Number of function calls = 2048 , Pf = 0.0786 , 95.0 % confidence interval :[0.0643,0.0930] 
    Number of function calls = 2048 , Pf = 0.0742 , 95.0 % confidence interval :[0.0605,0.0880] 
    Number of function calls = 2048 , Pf = 0.0791 , 95.0 % confidence interval :[0.0647,0.0935] 
    Number of function calls = 2048 , Pf = 0.0815 , 95.0 % confidence interval :[0.0670,0.0961] 
    Number of function calls = 2048 , Pf = 0.0767 , 95.0 % confidence interval :[0.0626,0.0907] 
    Number of function calls = 2048 , Pf = 0.0801 , 95.0 % confidence interval :[0.0658,0.0944] 
    Number of function calls = 4096 , Pf = 0.0820 , 95.0 % confidence interval :[0.0717,0.0923] 
    Number of function calls = 4096 , Pf = 0.0789 , 95.0 % confidence interval :[0.0688,0.0889] 
    Number of function calls = 4096 , Pf = 0.0754 , 95.0 % confidence interval :[0.0656,0.0853] 
    Number of function calls = 4096 , Pf = 0.0806 , 95.0 % confidence interval :[0.0703,0.0908] 
    Number of function calls = 4096 , Pf = 0.0833 , 95.0 % confidence interval :[0.0728,0.0937] 
    Number of function calls = 4096 , Pf = 0.0786 , 95.0 % confidence interval :[0.0686,0.0887] 
    Number of function calls = 4096 , Pf = 0.0720 , 95.0 % confidence interval :[0.0623,0.0817] 
    Number of function calls = 4096 , Pf = 0.0723 , 95.0 % confidence interval :[0.0625,0.0820] 
    Number of function calls = 4096 , Pf = 0.0754 , 95.0 % confidence interval :[0.0656,0.0853] 
    Number of function calls = 4096 , Pf = 0.0732 , 95.0 % confidence interval :[0.0635,0.0830] 
    Number of function calls = 8192 , Pf = 0.0786 , 95.0 % confidence interval :[0.0715,0.0858] 
    Number of function calls = 8192 , Pf = 0.0797 , 95.0 % confidence interval :[0.0725,0.0869] 
    Number of function calls = 8192 , Pf = 0.0785 , 95.0 % confidence interval :[0.0713,0.0856] 
    Number of function calls = 8192 , Pf = 0.0809 , 95.0 % confidence interval :[0.0737,0.0882] 
    Number of function calls = 8192 , Pf = 0.0785 , 95.0 % confidence interval :[0.0714,0.0856] 
    Number of function calls = 8192 , Pf = 0.0764 , 95.0 % confidence interval :[0.0694,0.0834] 
    Number of function calls = 8192 , Pf = 0.0833 , 95.0 % confidence interval :[0.0759,0.0906] 
    Number of function calls = 8192 , Pf = 0.0803 , 95.0 % confidence interval :[0.0731,0.0875] 
    Number of function calls = 8192 , Pf = 0.0789 , 95.0 % confidence interval :[0.0717,0.0860] 
    Number of function calls = 8192 , Pf = 0.0859 , 95.0 % confidence interval :[0.0785,0.0934] 
    Number of function calls = 16384 , Pf = 0.0776 , 95.0 % confidence interval :[0.0726,0.0827] 
    Number of function calls = 16384 , Pf = 0.0801 , 95.0 % confidence interval :[0.0750,0.0852] 
    Number of function calls = 16384 , Pf = 0.0792 , 95.0 % confidence interval :[0.0741,0.0842] 
    Number of function calls = 16384 , Pf = 0.0768 , 95.0 % confidence interval :[0.0718,0.0818] 
    Number of function calls = 16384 , Pf = 0.0770 , 95.0 % confidence interval :[0.0720,0.0820] 
    Number of function calls = 16384 , Pf = 0.0778 , 95.0 % confidence interval :[0.0728,0.0829] 
    Number of function calls = 16384 , Pf = 0.0804 , 95.0 % confidence interval :[0.0753,0.0855] 
    Number of function calls = 16384 , Pf = 0.0817 , 95.0 % confidence interval :[0.0765,0.0868] 
    Number of function calls = 16384 , Pf = 0.0779 , 95.0 % confidence interval :[0.0728,0.0829] 
    Number of function calls = 16384 , Pf = 0.0802 , 95.0 % confidence interval :[0.0751,0.0853] 
    Number of function calls = 32768 , Pf = 0.0785 , 95.0 % confidence interval :[0.0749,0.0821] 
    Number of function calls = 32768 , Pf = 0.0782 , 95.0 % confidence interval :[0.0746,0.0818] 
    Number of function calls = 32768 , Pf = 0.0803 , 95.0 % confidence interval :[0.0767,0.0839] 
    Number of function calls = 32768 , Pf = 0.0782 , 95.0 % confidence interval :[0.0747,0.0818] 
    Number of function calls = 32768 , Pf = 0.0802 , 95.0 % confidence interval :[0.0766,0.0838] 
    Number of function calls = 32768 , Pf = 0.0775 , 95.0 % confidence interval :[0.0740,0.0811] 
    Number of function calls = 32768 , Pf = 0.0794 , 95.0 % confidence interval :[0.0758,0.0830] 
    Number of function calls = 32768 , Pf = 0.0794 , 95.0 % confidence interval :[0.0758,0.0830] 
    Number of function calls = 32768 , Pf = 0.0799 , 95.0 % confidence interval :[0.0763,0.0835] 
    Number of function calls = 32768 , Pf = 0.0789 , 95.0 % confidence interval :[0.0753,0.0825] 
    Number of function calls = 65536 , Pf = 0.0781 , 95.0 % confidence interval :[0.0756,0.0806] 
    Number of function calls = 65536 , Pf = 0.0777 , 95.0 % confidence interval :[0.0752,0.0802] 
    Number of function calls = 65536 , Pf = 0.0804 , 95.0 % confidence interval :[0.0779,0.0830] 
    Number of function calls = 65536 , Pf = 0.0778 , 95.0 % confidence interval :[0.0753,0.0803] 
    Number of function calls = 65536 , Pf = 0.0786 , 95.0 % confidence interval :[0.0761,0.0812] 
    Number of function calls = 65536 , Pf = 0.0779 , 95.0 % confidence interval :[0.0754,0.0804] 
    Number of function calls = 65536 , Pf = 0.0818 , 95.0 % confidence interval :[0.0792,0.0844] 
    Number of function calls = 65536 , Pf = 0.0793 , 95.0 % confidence interval :[0.0768,0.0819] 
    Number of function calls = 65536 , Pf = 0.0786 , 95.0 % confidence interval :[0.0761,0.0811] 
    Number of function calls = 65536 , Pf = 0.0814 , 95.0 % confidence interval :[0.0788,0.0839] 




.. GENERATED FROM PYTHON SOURCE LINES 92-95

.. code-block:: Python

    elapsedTime = time.time() - startTime
    print("Elapsed = %.2f (s)" % (elapsedTime))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Elapsed = 1.75 (s)




.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: Python

    sampleSizeArray = [int(n) for n in np.logspace(0.0, 5.0)]
    expectedConvergence = [1.0 / np.sqrt(n) for n in sampleSizeArray]








.. GENERATED FROM PYTHON SOURCE LINES 100-112

.. code-block:: Python

    title = "Convergence of Monte-Carlo method - problem = %s" % (problem.getName())
    graph = ot.Graph(title, "Sample size", "Absolute error", True, "topright")
    curve = ot.Cloud(sampleSizeAbsoluteErrorTable, "blue", "fsquare", "")
    curve.setLegend("Monte-Carlo")
    graph.add(curve)
    curve = ot.Curve(sampleSizeArray, expectedConvergence)
    curve.setLegend(r"$1/\sqrt{n}$")
    graph.add(curve)
    graph.setLogScale(ot.GraphImplementation.LOGXY)
    graph.setColors(["dodgerblue3", "darkorange1"])
    _ = otv.View(graph)




.. image-sg:: /auto_examples/images/sphx_glr_plot_convergence_reliability_mc_001.png
   :alt: Convergence of Monte-Carlo method - problem = R-S
   :srcset: /auto_examples/images/sphx_glr_plot_convergence_reliability_mc_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 113-114

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.174 seconds)


.. _sphx_glr_download_auto_examples_plot_convergence_reliability_mc.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_convergence_reliability_mc.ipynb <plot_convergence_reliability_mc.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_convergence_reliability_mc.py <plot_convergence_reliability_mc.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_convergence_reliability_mc.zip <plot_convergence_reliability_mc.zip>`
