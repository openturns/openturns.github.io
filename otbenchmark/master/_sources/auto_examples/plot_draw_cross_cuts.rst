
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_draw_cross_cuts.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_draw_cross_cuts.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_draw_cross_cuts.py:


Draw multidimensional functions, distributions and events
=========================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-11

This example shows how to represent multidimensional functions, distributions and events.
When 2D plots are to draw, contours are used.
We use 2D cross-sections to represent multidimensional objects when required,
which leads to cross-cuts representations.

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: Python

    import otbenchmark as otb
    import openturns.viewer as otv
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 18-20

.. code-block:: Python

    problem = otb.ReliabilityProblem33()








.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: Python

    event = problem.getEvent()
    g = event.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 25-27

Compute the bounds of the domain
--------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: Python

    inputVector = event.getAntecedent()
    distribution = inputVector.getDistribution()








.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: Python

    inputDimension = distribution.getDimension()
    inputDimension





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    3



.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: Python

    alpha = 1 - 1.0e-5

    bounds, marginalProb = distribution.computeMinimumVolumeIntervalWithMarginalProbability(
        alpha
    )








.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: Python

    referencePoint = distribution.getMean()
    referencePoint






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=3 values=[0,0,0]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 48-58

.. code-block:: Python

    crossCut = otb.CrossCutFunction(g, referencePoint)
    fig = crossCut.draw(bounds)
    # Remove the legend labels because there
    # are too many for such a small figure
    for ax in fig.axes:
        ax.legend("")
    # Increase space between sub-figures so that
    # there are no overlap
    plt.subplots_adjust(hspace=0.4, wspace=0.4)




.. image-sg:: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_001.png
   :alt: Cross-cuts of function
   :srcset: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-60

Plot cross-cuts of the distribution

.. GENERATED FROM PYTHON SOURCE LINES 60-62

.. code-block:: Python

    crossCut = otb.CrossCutDistribution(distribution)








.. GENERATED FROM PYTHON SOURCE LINES 63-72

.. code-block:: Python

    fig = crossCut.drawMarginalPDF()
    # Remove the legend labels because there
    # are too many for such a small figure
    for ax in fig.axes:
        ax.legend("")
    # Increase space between sub-figures so that
    # there are no overlap
    plt.subplots_adjust(hspace=0.4, wspace=0.4)




.. image-sg:: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_002.png
   :alt: Iso-values of marginal PDF
   :srcset: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-75

The correct way to represent cross-cuts of a distribution is to draw the contours
of the PDF of the conditional distribution.

.. GENERATED FROM PYTHON SOURCE LINES 75-84

.. code-block:: Python

    fig = crossCut.drawConditionalPDF(referencePoint)
    # Remove the legend labels because there
    # are too many for such a small figure
    for ax in fig.axes:
        ax.legend("")
    # Increase space between sub-figures so that
    # there are no overlap
    plt.subplots_adjust(hspace=0.4, wspace=0.4)




.. image-sg:: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_003.png
   :alt: Iso-values of conditional PDF
   :srcset: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Descr =  1 0
    Descr =  2 0
    Descr =  2 1




.. GENERATED FROM PYTHON SOURCE LINES 85-89

.. code-block:: Python

    inputVector = event.getAntecedent()
    event = problem.getEvent()
    g = event.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 90-92

.. code-block:: Python

    drawEvent = otb.DrawEvent(event)








.. GENERATED FROM PYTHON SOURCE LINES 93-95

.. code-block:: Python

    _ = drawEvent.drawLimitState(bounds)




.. image-sg:: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_004.png
   :alt: Limit state surface
   :srcset: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 96-102

In the following figure, we present the cross-cuts of samples with size equal to 500.
These are three different samples, each of which is plotted with the `drawSampleCrossCut` method.
For each cross-cut plot (i,j), the current implementation uses the marginal bivariate distribution,
then generates a sample from this distribution.
A more rigorous method would draw the conditional distribution, but this might reduce the performance in general.
See https://github.com/mbaudin47/otbenchmark/issues/47 for details.

.. GENERATED FROM PYTHON SOURCE LINES 102-105

.. code-block:: Python

    sampleSize = 500
    _ = drawEvent.drawSample(sampleSize)




.. image-sg:: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_005.png
   :alt: Points X s.t. g(X) < 0.0
   :srcset: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 106-108

.. code-block:: Python

    _ = drawEvent.fillEvent(bounds)




.. image-sg:: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_006.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/images/sphx_glr_plot_draw_cross_cuts_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-110

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 10.456 seconds)


.. _sphx_glr_download_auto_examples_plot_draw_cross_cuts.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_draw_cross_cuts.ipynb <plot_draw_cross_cuts.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_draw_cross_cuts.py <plot_draw_cross_cuts.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_draw_cross_cuts.zip <plot_draw_cross_cuts.zip>`
