
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_drawevent.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_drawevent.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_drawevent.py:


Demonstration of the DrawEvent class
====================================

.. GENERATED FROM PYTHON SOURCE LINES 5-9

.. code-block:: Python


    import otbenchmark as otb
    import openturns.viewer as otv








.. GENERATED FROM PYTHON SOURCE LINES 10-12

3D problem
----------

.. GENERATED FROM PYTHON SOURCE LINES 14-16

.. code-block:: Python

    problem = otb.ReliabilityProblem33()








.. GENERATED FROM PYTHON SOURCE LINES 17-20

.. code-block:: Python

    event = problem.getEvent()
    g = event.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: Python

    inputVector = event.getAntecedent()
    distribution = inputVector.getDistribution()








.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: Python

    inputDimension = distribution.getDimension()
    inputDimension





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    3



.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: Python

    alpha = 1 - 0.00001








.. GENERATED FROM PYTHON SOURCE LINES 32-36

.. code-block:: Python

    bounds, marginalProb = distribution.computeMinimumVolumeIntervalWithMarginalProbability(
        alpha
    )








.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: Python

    referencePoint = distribution.getMean()
    referencePoint






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=3 values=[0,0,0]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: Python

    inputVector = event.getAntecedent()
    event = problem.getEvent()
    g = event.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 46-48

.. code-block:: Python

    drawEvent = otb.DrawEvent(event)








.. GENERATED FROM PYTHON SOURCE LINES 49-50

The highest level method is the `draw` method which flags allow to gather various graphics into a single one.

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: Python

    _ = drawEvent.draw(bounds)




.. image-sg:: /auto_examples/images/sphx_glr_plot_drawevent_001.png
   :alt: plot drawevent
   :srcset: /auto_examples/images/sphx_glr_plot_drawevent_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: Python

    _ = drawEvent.draw(bounds, fillEvent=True)




.. image-sg:: /auto_examples/images/sphx_glr_plot_drawevent_002.png
   :alt: plot drawevent
   :srcset: /auto_examples/images/sphx_glr_plot_drawevent_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-57

The `drawLimitState` method only draws the limit state.

.. GENERATED FROM PYTHON SOURCE LINES 57-59

.. code-block:: Python

    _ = drawEvent.drawLimitState(bounds)




.. image-sg:: /auto_examples/images/sphx_glr_plot_drawevent_003.png
   :alt: Limit state surface
   :srcset: /auto_examples/images/sphx_glr_plot_drawevent_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 60-61

The `drawSample` method plots a sample with a color code which specifies which points are inside or outside the event.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: Python

    sampleSize = 500
    _ = drawEvent.drawSample(sampleSize)




.. image-sg:: /auto_examples/images/sphx_glr_plot_drawevent_004.png
   :alt: Points X s.t. g(X) < 0.0
   :srcset: /auto_examples/images/sphx_glr_plot_drawevent_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-67

.. code-block:: Python

    _ = drawEvent.fillEvent(bounds)




.. image-sg:: /auto_examples/images/sphx_glr_plot_drawevent_005.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/images/sphx_glr_plot_drawevent_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-73

2D problem
----------

When the problem has 2 dimensions, single cross-cuts are sufficient.
This is why we use the `*CrossCut` methods.

.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: Python

    problem = otb.ReliabilityProblem22()








.. GENERATED FROM PYTHON SOURCE LINES 78-81

.. code-block:: Python

    event = problem.getEvent()
    g = event.getFunction()








.. GENERATED FROM PYTHON SOURCE LINES 82-88

.. code-block:: Python

    inputVector = event.getAntecedent()
    distribution = inputVector.getDistribution()
    bounds, marginalProb = distribution.computeMinimumVolumeIntervalWithMarginalProbability(
        1.0 - 1.0e-6
    )








.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: Python

    sampleSize = 10000
    drawEvent = otb.DrawEvent(event)








.. GENERATED FROM PYTHON SOURCE LINES 93-96

.. code-block:: Python

    cloud = drawEvent.drawSampleCrossCut(sampleSize)
    _ = otv.View(cloud)




.. image-sg:: /auto_examples/images/sphx_glr_plot_drawevent_006.png
   :alt: Points X s.t. g(X) < 0.0
   :srcset: /auto_examples/images/sphx_glr_plot_drawevent_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 97-101

.. code-block:: Python

    graph = drawEvent.drawLimitStateCrossCut(bounds)
    graph.add(cloud)
    _ = otv.View(graph)




.. image-sg:: /auto_examples/images/sphx_glr_plot_drawevent_007.png
   :alt: Limit state surface
   :srcset: /auto_examples/images/sphx_glr_plot_drawevent_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-105

.. code-block:: Python

    domain = drawEvent.fillEventCrossCut(bounds)
    _ = otv.View(domain)




.. image-sg:: /auto_examples/images/sphx_glr_plot_drawevent_008.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/images/sphx_glr_plot_drawevent_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 106-109

.. code-block:: Python

    domain.add(cloud)
    _ = otv.View(domain)




.. image-sg:: /auto_examples/images/sphx_glr_plot_drawevent_009.png
   :alt: Domain where g(x) < 0.0
   :srcset: /auto_examples/images/sphx_glr_plot_drawevent_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 110-112

For a 2D sample, it is sometimes handy to re-use a precomputed sample.
In this case, we can use the `drawInputOutputSample` method.

.. GENERATED FROM PYTHON SOURCE LINES 112-116

.. code-block:: Python

    inputSample = distribution.getSample(sampleSize)
    outputSample = g(inputSample)
    drawEvent.drawInputOutputSample(inputSample, outputSample)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    class=Graph name=Points X s.t. g(X) < 0.0 implementation=class=GraphImplementation name=Points X s.t. g(X) < 0.0 title=Points X s.t. g(X) < 0.0 xTitle=x1 yTitle=x2 axes=ON grid=ON legendposition=topright legendFontSize=1 drawables=[class=Drawable name=In implementation=class=Cloud name=In derived from class=DrawableImplementation name=In legend=In data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=40 dimension=2 data=[[1.71237,2.85486],[1.66792,2.31783],[2.69441,1.34366],[1.86644,2.24982],[2.02031,1.92003],[1.37012,2.49056],[2.09796,1.7934],[1.51539,2.21068],[1.65414,2.24108],[2.38439,1.58069],[2.09313,1.52526],[1.88487,2.12252],[1.53307,3.17321],[3.35848,1.22148],[1.73253,2.64634],[2.53091,1.47052],[1.76564,1.90677],[2.22299,1.66299],[2.72437,1.52226],[1.87608,1.75339],[1.20151,2.79605],[1.61561,1.94388],[1.97895,2.3215],[1.45782,3.05815],[1.98593,1.87883],[2.16331,1.7884],[0.998138,3.66056],[2.15616,1.83874],[1.47851,2.3263],[2.55846,1.62646],[3.36152,1.47219],[2.65572,2.43453],[2.02096,1.72365],[1.94358,2.18157],[1.99646,2.14285],[3.05755,1.43522],[2.17683,2.15387],[1.77961,2.17732],[1.32333,3.19999],[2.03815,1.59132]] color=lightsalmon3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1,class=Drawable name=Out implementation=class=Cloud name=Out derived from class=DrawableImplementation name=Out legend=Out data=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=9960 dimension=2 data=[[-0.173501,-0.0297064],[-1.61099,1.88273],[0.280493,-1.76397],...,[-0.501814,-2.23713],[1.12524,0.218319],[-1.00681,0.0682829]] color=darkseagreen3 isColorExplicitlySet=true fillStyle=solid lineStyle=solid pointStyle=fsquare lineWidth=1]



.. GENERATED FROM PYTHON SOURCE LINES 117-118

.. code-block:: Python

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.291 seconds)


.. _sphx_glr_download_auto_examples_plot_drawevent.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_drawevent.ipynb <plot_drawevent.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_drawevent.py <plot_drawevent.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_drawevent.zip <plot_drawevent.zip>`
