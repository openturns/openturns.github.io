
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_probabilistic_modeling/distributions/plot_overview_univariate_distributions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_probabilistic_modeling_distributions_plot_overview_univariate_distributions.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_probabilistic_modeling_distributions_plot_overview_univariate_distributions.py:


Overview of univariate distribution management
==============================================

.. GENERATED FROM PYTHON SOURCE LINES 7-16

Abstract
--------

In this example, we present the following topics:

- the distributions with several parametrizations (particularly with the `Beta` distribution),
- the arithmetic of distributions and functions of distributions,
- the :class:`~openturns.CompositeDistribution` for more general functions,
- how to define our customized distribution with :class:`~openturns.PythonDistribution` if the distribution does not exist.

.. GENERATED FROM PYTHON SOURCE LINES 18-24

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 25-27

Distributions with several parametrizations
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 29-53

By default, any univariate distribution uses its native parameters. For some few distributions, alternative parameters might be used to define the distribution.

For example, the :class:`~openturns.Beta` distribution has several parametrizations.

The native parametrization uses the following parameters:

- :math:`\alpha` : the first shape parameter, :math:`\alpha>0`,
- :math:`\beta` : the second shape parameter, :math:`\beta> 0`,
- :math:`a` : the lower bound,
- :math:`b` : the upper bound with :math:`a<b`.

The PDF of the Beta distribution is:

.. math::
   f(x) = \frac{(x-a)^{\alpha - 1} (b - x)^{\beta - 1}}{(b - a)^{\alpha + \beta - 1} B(\alpha, \beta)}


for any :math:`x\in[a,b]`, where :math:`B` is Euler's Beta function.

For any :math:`y,z>0`, the beta function is:

.. math::
   B(y,z) = \int_0^1 t^{y-1} (1-t)^{z-1} dt.


.. GENERATED FROM PYTHON SOURCE LINES 55-56

The :class:`~openturns.Beta` class uses the native parametrization.

.. GENERATED FROM PYTHON SOURCE LINES 58-62

.. code-block:: Python

    distribution = ot.Beta(2.5, 2.5, -1, 2)
    graph = distribution.drawPDF()
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_001.png
   :alt: plot overview univariate distributions
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-87

The :class:`~openturns.BetaMuSigma` class provides another parametrization, based on the expectation :math:`\mu` and the standard deviation  :math:`\sigma` of the random variable:

.. math::
   \mu = a + \frac{(b-a)\alpha}{\alpha+\beta}


and

.. math::
   \sigma^2 = \left(\frac{b-a}{\alpha+\beta}\right)^2 \frac{\alpha\beta}{\alpha+\beta+1}.


Inverting the equations, we get:


.. math::
   \alpha =  \left(\dfrac{\mu-a}{b-a}\right) \left( \dfrac{(b-\mu)(\mu-a)}{\sigma^2}-1\right) \\


and

.. math::
   \beta  =  \left( \dfrac{b-\mu}{\mu-a}\right) \alpha


.. GENERATED FROM PYTHON SOURCE LINES 89-90

The following session creates a beta random variable with parameters :math:`\mu=0.2`, :math:`\sigma=0.6`, :math:`a=-1` et :math:`b=2`.

.. GENERATED FROM PYTHON SOURCE LINES 92-95

.. code-block:: Python

    parameters = ot.BetaMuSigma(0.2, 0.6, -1, 2)
    parameters.evaluate()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=4 values=[2,3,-1,2]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 96-97

The :class:`~openturns.ParametrizedDistribution` creates a distribution from a parametrization.

.. GENERATED FROM PYTHON SOURCE LINES 99-102

.. code-block:: Python

    param_dist = ot.ParametrizedDistribution(parameters)
    param_dist






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    ParametrizedDistribution
    <ul>
      <li>name=Unnamed</li>
      <li>dimension=1</li>
      <li>weight=1</li>
      <li>range=[-1, 2]</li>
      <li>description=[X0]</li>
      <li>isParallel=true</li>
      <li>isCopula=false</li>
    </ul>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 103-105

Functions of distributions
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 107-121

The library provides algebra of univariate distributions:

 - `+, -`
 - `*, /`

It also provides methods to get the full distributions of `f(x)` where `f` can be equal to :

 - `sin`,
 - `cos`,
 - `acos`,
 - `asin`
 - `square`,
 - `inverse`,
 - `sqrt`.

.. GENERATED FROM PYTHON SOURCE LINES 123-124

In the following example, we create a beta and an exponential variable. Then we create the random variable equal to the sum of the two previous variables.

.. GENERATED FROM PYTHON SOURCE LINES 126-128

.. code-block:: Python

    B = ot.Beta(5, 2, 9, 10)








.. GENERATED FROM PYTHON SOURCE LINES 129-131

.. code-block:: Python

    E = ot.Exponential(3)








.. GENERATED FROM PYTHON SOURCE LINES 132-134

.. code-block:: Python

    S = B + E








.. GENERATED FROM PYTHON SOURCE LINES 135-137

The `S` variable is equipped with the methods of any distribution: we can for example compute the PDF or the CDF at any point and compute its quantile.
For example, we can simply draw the PDF with the `drawPDF` method.

.. GENERATED FROM PYTHON SOURCE LINES 139-143

.. code-block:: Python

    graph = S.drawPDF()
    graph.setTitle("Sum of a beta and an exponential distribution")
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_002.png
   :alt: Sum of a beta and an exponential distribution
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 144-145

The exponential function of this distribution can be computed with the `exp` method.

.. GENERATED FROM PYTHON SOURCE LINES 147-149

.. code-block:: Python

    sumexp = S.exp()








.. GENERATED FROM PYTHON SOURCE LINES 150-154

.. code-block:: Python

    graph = sumexp.drawPDF()
    graph.setTitle("Exponential of a sum of a beta and an exponential")
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_003.png
   :alt: Exponential of a sum of a beta and an exponential
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 155-161

The `CompositeDistribution` class for more general functions
------------------------------------------------------------

More complex functions can be created thanks to the :class:`~openturns.CompositeDistribution` class, but it requires an `f` function.
In the following example, we create the distribution of a random variable equal to the exponential of a Gaussian variable.
Obviously, this is equivalent to the :class:`~openturns.LogNormal` distribution but this shows how such a distribution could be created.

.. GENERATED FROM PYTHON SOURCE LINES 163-164

First, we create a distribution.

.. GENERATED FROM PYTHON SOURCE LINES 166-169

.. code-block:: Python

    N = ot.Normal(0.0, 1.0)
    N.setDescription(["Normal"])








.. GENERATED FROM PYTHON SOURCE LINES 170-171

Secondly, we create a function.

.. GENERATED FROM PYTHON SOURCE LINES 173-176

.. code-block:: Python

    f = ot.SymbolicFunction(["x"], ["exp(x)"])
    f.setDescription(["X", "Exp(X)"])








.. GENERATED FROM PYTHON SOURCE LINES 177-178

Finally, we create the distribution equal to the exponential of the Gaussian random variable.

.. GENERATED FROM PYTHON SOURCE LINES 180-182

.. code-block:: Python

    dist = ot.CompositeDistribution(f, N)








.. GENERATED FROM PYTHON SOURCE LINES 183-187

.. code-block:: Python

    graph = dist.drawPDF()
    graph.setTitle("Exponential of a gaussian random variable")
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_004.png
   :alt: Exponential of a gaussian random variable
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 188-189

In order to check the previous distribution, we compare it with the LogNormal distribution.

.. GENERATED FROM PYTHON SOURCE LINES 191-197

.. code-block:: Python

    LN = ot.LogNormal()
    LN.setDescription(["LogNormal"])
    graph = LN.drawPDF()
    view = viewer.View(graph)





.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_005.png
   :alt: plot overview univariate distributions
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 198-232

The `PythonDistribution` class
------------------------------

Another possibility is to define our own `distribution`.

For example let us implement the `Quartic` kernel (also known as the `Biweight` kernel,
see `here <https://en.wikipedia.org/wiki/Kernel_(statistics)#Kernel_functions_in_common_use>`_),
which is sometimes used in the context of kernel smoothing.
The PDF of the kernel is defined by:

.. math::
   f(u) = \frac{15}{16} (1 - u^2)^2


for any :math:`u\in[-1,1]` and :math:`f(u)=0` otherwise.

Expanding the previous square, we find:

.. math::
   f(u) = \frac{15}{16} (1 - 2 u^2 + u^4)


for any :math:`u\in[-1,1]`.

Integrating the previous equation leads to the CDF:

.. math::
   F(u) = \frac{1}{2} + \frac{15}{16} u - \frac{5}{8} u^3 + \frac{3}{16} u^5


for any :math:`u\in[-1,1]` and :math:`F(u)=0` otherwise.

The only required method is `computeCDF`. Since the PDF is easy to define in our example, we implement it as well.
Here, the distribution is defined on the interval :math:`[-1,1]`, so that we define the `getRange` method.

.. GENERATED FROM PYTHON SOURCE LINES 235-267

.. code-block:: Python

    class Quartic(ot.PythonDistribution):
        """
        Quartic (biweight) kernel
        See https://en.wikipedia.org/wiki/Kernel_(statistics)#Kernel_functions_in_common_use for more details
        """

        def __init__(self):
            super(Quartic, self).__init__(1)
            self.c = 15.0 / 16

        def computeCDF(self, x):
            u = x[0]
            if u <= -1:
                p = 0.0
            elif u >= 1:
                p = 1.0
            else:
                p = 0.5 + 15.0 / 16 * u - 5.0 / 8 * pow(u, 3) + 3.0 / 16 * pow(u, 5)
            return p

        def computePDF(self, x):
            u = x[0]
            if u < -1 or u > 1:
                y = 0.0
            else:
                y = self.c * (1 - u**2) ** 2
            return y

        def getRange(self):
            return ot.Interval(-1, 1)









.. GENERATED FROM PYTHON SOURCE LINES 268-271

.. code-block:: Python

    Q = ot.Distribution(Quartic())
    Q.setDescription(["Quartic Kernel"])








.. GENERATED FROM PYTHON SOURCE LINES 272-275

.. code-block:: Python

    graph = Q.drawPDF()
    view = viewer.View(graph)
    plt.show()



.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_006.png
   :alt: plot overview univariate distributions
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_overview_univariate_distributions_006.png
   :class: sphx-glr-single-img






.. _sphx_glr_download_auto_probabilistic_modeling_distributions_plot_overview_univariate_distributions.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_overview_univariate_distributions.ipynb <plot_overview_univariate_distributions.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_overview_univariate_distributions.py <plot_overview_univariate_distributions.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_overview_univariate_distributions.zip <plot_overview_univariate_distributions.zip>`
