
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_reliability_sensitivity/reliability/plot_estimate_probability_adaptive_directional_sampling.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_reliability_sensitivity_reliability_plot_estimate_probability_adaptive_directional_sampling.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_reliability_sensitivity_reliability_plot_estimate_probability_adaptive_directional_sampling.py:


Use the Adaptive Directional Stratification Algorithm
=====================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-8

In this example we estimate a failure probability with the adaptive directional simulation algorithm provided by the :class:`~openturns.AdaptiveDirectionalStratification` class.

.. GENERATED FROM PYTHON SOURCE LINES 10-27

Introduction
------------

The adaptive directional simulation algorithm operates in the standard. It relies on:

1. a *root strategy* to evaluate the nearest failure point along each direction and take the contribution of each direction to the failure event probability into account.
   The available strategies are:
   - `RiskyAndFast`
   - `MediumSafe`
   - `SafeAndSlow`

2. a *sampling strategy* to choose directions in the standard space. The available strategies are:
   - `RandomDirection`
   - `OrthogonalDirection`

Let us consider the analytical example of the cantilever beam described :ref:`here <use-case-cantilever-beam>`.


.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: Python

    from openturns.usecases import cantilever_beam
    import openturns as ot

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 35-36

We load the model from the usecases module :

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: Python

    cb = cantilever_beam.CantileverBeam()








.. GENERATED FROM PYTHON SOURCE LINES 39-40

We load the joint probability distribution of the input parameters :

.. GENERATED FROM PYTHON SOURCE LINES 40-42

.. code-block:: Python

    distribution = cb.distribution








.. GENERATED FROM PYTHON SOURCE LINES 43-44

We load the model giving the displacement at the end of the beam :

.. GENERATED FROM PYTHON SOURCE LINES 44-46

.. code-block:: Python

    model = cb.model








.. GENERATED FROM PYTHON SOURCE LINES 47-48

We create the event whose probability we want to estimate.

.. GENERATED FROM PYTHON SOURCE LINES 50-54

.. code-block:: Python

    vect = ot.RandomVector(distribution)
    G = ot.CompositeRandomVector(model, vect)
    event = ot.ThresholdEvent(G, ot.Greater(), 0.30)








.. GENERATED FROM PYTHON SOURCE LINES 55-56

Root finding algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: Python

    solver = ot.Brent()
    rootStrategy = ot.MediumSafe(solver)








.. GENERATED FROM PYTHON SOURCE LINES 62-63

Direction sampling algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 65-67

.. code-block:: Python

    samplingStrategy = ot.RandomDirection()








.. GENERATED FROM PYTHON SOURCE LINES 68-69

Create a simulation algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 71-77

.. code-block:: Python

    algo = ot.AdaptiveDirectionalStratification(event, rootStrategy, samplingStrategy)
    algo.setMaximumCoefficientOfVariation(0.1)
    algo.setMaximumOuterSampling(40000)
    algo.setConvergenceStrategy(ot.Full())
    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 78-79

Retrieve results.

.. GENERATED FROM PYTHON SOURCE LINES 81-86

.. code-block:: Python

    result = algo.getResult()
    probability = result.getProbabilityEstimate()
    print(result)
    print("Pf=", probability)
    print("Iterations=", result.getOuterSampling())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    probabilityEstimate=4.506923e-07 varianceEstimate=1.139950e-15 standard deviation=3.38e-08 coefficient of variation=7.49e-02 confidenceLength(0.95)=1.32e-07 outerSampling=39996 blockSize=1
    Pf= 4.50692269819626e-07
    Iterations= 39996





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.074 seconds)


.. _sphx_glr_download_auto_reliability_sensitivity_reliability_plot_estimate_probability_adaptive_directional_sampling.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_estimate_probability_adaptive_directional_sampling.ipynb <plot_estimate_probability_adaptive_directional_sampling.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_estimate_probability_adaptive_directional_sampling.py <plot_estimate_probability_adaptive_directional_sampling.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_estimate_probability_adaptive_directional_sampling.zip <plot_estimate_probability_adaptive_directional_sampling.zip>`
