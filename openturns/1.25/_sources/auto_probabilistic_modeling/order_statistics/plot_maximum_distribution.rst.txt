
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_probabilistic_modeling/order_statistics/plot_maximum_distribution.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_probabilistic_modeling_order_statistics_plot_maximum_distribution.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_probabilistic_modeling_order_statistics_plot_maximum_distribution.py:


Create the distribution of the maximum of distributions
=======================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-17

Context
-------

In this example, we define how to build a distribution defined as the maximum of some other ones.

We detail some interesting cases:

- Case 1: The maximum of correlated scalar distributions,
- Case 2: The maximum of independent scalar distributions,
- Case 3: The maximum of independent and identically distributed scalar distributions.

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as otv









.. GENERATED FROM PYTHON SOURCE LINES 24-44

Case 1: The maximum correlated scalar distributions
---------------------------------------------------

We consider :math:`d=3` scalar distributions :math:`X_i` that form a random vector
:math:`(X_1, X_2, X_3)` which copula is denoted by :math:`C`.

We assume that:

.. math::
   X_1 \sim \cU(2.5, 3.5)\\
   X_2 \sim \mbox{Log}\cU(1.0, 1.2)\\
   X_3 \sim \cT(2.0, 3.0, 4.0)\\
   C \sim \mbox{NormalCopula}(\mat{M})

where :math:`\mat{M}` is a correlation matix.

We want to define the distribution of:

.. math::
   Y_1 = \max(X_1, X_2, X_3).

.. GENERATED FROM PYTHON SOURCE LINES 46-47

We create the distribution of :math:`(X_1, X_2, X_3)`:

.. GENERATED FROM PYTHON SOURCE LINES 47-55

.. code-block:: Python

    dist_X1 = ot.Uniform(2.5, 3.5)
    dist_X2 = ot.LogUniform(1.0, 1.2)
    dist_X3 = ot.Triangular(2.0, 3.0, 4.0)
    coll = [dist_X1, dist_X2, dist_X3]
    cor_mat = ot.CorrelationMatrix([[1.0, -0.9, 0.0], [-0.9, 1.0, 0.3], [0.0, 0.3, 1.0]])
    cop = ot.NormalCopula(cor_mat)
    dist_X = ot.JointDistribution(coll, cop)








.. GENERATED FROM PYTHON SOURCE LINES 56-57

We create the distribution of :math:`Y_1`:

.. GENERATED FROM PYTHON SOURCE LINES 57-60

.. code-block:: Python

    dist_Y_1 = ot.MaximumDistribution(dist_X)
    print(dist_Y_1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MaximumDistribution(JointDistribution(Uniform(a = 2.5, b = 3.5), LogUniform(aLog = 1, bLog = 1.2), Triangular(a = 2, m = 3, b = 4), NormalCopula(R = [[  1   -0.9  0   ]
     [ -0.9  1    0.3 ]
     [  0    0.3  1   ]])))




.. GENERATED FROM PYTHON SOURCE LINES 61-62

We draw its PDF:

.. GENERATED FROM PYTHON SOURCE LINES 62-68

.. code-block:: Python

    graph = dist_Y_1.drawPDF()
    graph.setTitle(r" Distribution of $Y_1 = max(X_1, X_2, X_3)$")
    graph.setXTitle(r"$Y_1$")
    graph.setLegendPosition("")
    view = otv.View(graph)




.. image-sg:: /auto_probabilistic_modeling/order_statistics/images/sphx_glr_plot_maximum_distribution_001.svg
   :alt:  Distribution of $Y_1 = max(X_1, X_2, X_3)$
   :srcset: /auto_probabilistic_modeling/order_statistics/images/sphx_glr_plot_maximum_distribution_001.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-79

Case 2: The maximum of independent scalar distributions
-------------------------------------------------------

Here, we define :math:`(\tilde{X}_1,\tilde{X}_2, \tilde{X}_3)` the random vector where the
:math:`\tilde{X}_i` are distributed as :math:`X_i` and are independent.

We want to define the distribution of:

.. math::
   Y_2 = \max(\tilde{X}_1,\tilde{X}_2, \tilde{X}_3).

.. GENERATED FROM PYTHON SOURCE LINES 81-82

We create the distribution of :math:`Y_2`:

.. GENERATED FROM PYTHON SOURCE LINES 82-84

.. code-block:: Python

    dist_Y_2 = ot.MaximumDistribution(coll)








.. GENERATED FROM PYTHON SOURCE LINES 85-86

We could have written:

.. GENERATED FROM PYTHON SOURCE LINES 86-89

.. code-block:: Python

    dist_X_tilde = ot.JointDistribution(coll)
    dist_Y_2 = ot.MaximumDistribution(dist_X_tilde)








.. GENERATED FROM PYTHON SOURCE LINES 90-91

We draw its PDF:

.. GENERATED FROM PYTHON SOURCE LINES 91-97

.. code-block:: Python

    graph = dist_Y_2.drawPDF()
    graph.setTitle(r" Distribution of $Y_2 = max(\tilde{X}_1,\tilde{X}_2, \tilde{X}_3)$")
    graph.setXTitle(r"$Y_2$")
    graph.setLegendPosition("")
    view = otv.View(graph)




.. image-sg:: /auto_probabilistic_modeling/order_statistics/images/sphx_glr_plot_maximum_distribution_002.svg
   :alt:  Distribution of $Y_2 = max(\tilde{X}_1,\tilde{X}_2, \tilde{X}_3)$
   :srcset: /auto_probabilistic_modeling/order_statistics/images/sphx_glr_plot_maximum_distribution_002.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 98-108

Case 3: The maximum of a independent and identically distributed scalar distributions
-------------------------------------------------------------------------------------

Here we suppose that :math:`X_4` and :math:`X_5` are independent and identically distributed
as :math:`X_1`.

We want to define the distribution of:

.. math::
   Y_3 = \max(X_1, X_4, X_5).

.. GENERATED FROM PYTHON SOURCE LINES 110-111

We create the distribution of :math:`Y_3`:

.. GENERATED FROM PYTHON SOURCE LINES 111-113

.. code-block:: Python

    dist_Y_3 = ot.MaximumDistribution(dist_X1, 3)








.. GENERATED FROM PYTHON SOURCE LINES 114-115

We draw its PDF:

.. GENERATED FROM PYTHON SOURCE LINES 115-121

.. code-block:: Python

    graph = dist_Y_3.drawPDF()
    graph.setTitle(r" Distribution of $Y_3 = max(X_1, X_4, X_5)$")
    graph.setXTitle(r"$Y_3$")
    graph.setLegendPosition("")
    view = otv.View(graph)




.. image-sg:: /auto_probabilistic_modeling/order_statistics/images/sphx_glr_plot_maximum_distribution_003.svg
   :alt:  Distribution of $Y_3 = max(X_1, X_4, X_5)$
   :srcset: /auto_probabilistic_modeling/order_statistics/images/sphx_glr_plot_maximum_distribution_003.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 122-123

.. code-block:: Python

    otv.View.ShowAll()








.. _sphx_glr_download_auto_probabilistic_modeling_order_statistics_plot_maximum_distribution.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_maximum_distribution.ipynb <plot_maximum_distribution.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_maximum_distribution.py <plot_maximum_distribution.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_maximum_distribution.zip <plot_maximum_distribution.zip>`
