
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_meta_modeling/polynomial_chaos_metamodel/plot_functional_chaos_advanced_ctors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_meta_modeling_polynomial_chaos_metamodel_plot_functional_chaos_advanced_ctors.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_meta_modeling_polynomial_chaos_metamodel_plot_functional_chaos_advanced_ctors.py:


Advanced polynomial chaos construction
======================================

.. GENERATED FROM PYTHON SOURCE LINES 6-11

In this example we are going to expose advanced elements in the construction of a polynomial chaos algorithm:

- construction of the multivariate orthonormal basis,
- truncature strategy of the multivariate orthonormal basis,
- evaluation strategy of the approximation coefficients.

.. GENERATED FROM PYTHON SOURCE LINES 13-28

In this example, we consider the following function :math:`\mathbb{R}^4 \rightarrow \mathbb{R}`:

.. math::
   g(\mathbf{x}) = 1+x_1 x_2 + 2 x_3^2+x_4^4


for any :math:`x_1,x_2,x_3,x_4\in\mathbb{R}`.

We assume that the inputs have normal, uniform, gamma and beta distributions :

.. math::
   X_1 \sim \mathcal{N}(0,1), \qquad X_2 \sim \mathcal{U}(-1,1), \qquad X_3 \sim \mathcal{G}(2.75,1), \qquad X_4 \sim \mathcal{B}(2.5,1,-1,2),


and :math:`X_1`, :math:`X_2`, :math:`X_3` and :math:`X_4` are independent.

.. GENERATED FROM PYTHON SOURCE LINES 30-32

Define the model and the input distribution
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 34-38

.. code-block:: default

    import openturns as ot

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    model = ot.SymbolicFunction(["x1", "x2", "x3", "x4"], ["1+x1*x2 + 2*x3^2+x4^4"])








.. GENERATED FROM PYTHON SOURCE LINES 42-43

Create a distribution of dimension 4.

.. GENERATED FROM PYTHON SOURCE LINES 45-49

.. code-block:: default

    distribution = ot.ComposedDistribution(
        [ot.Normal(), ot.Uniform(), ot.Gamma(2.75, 1.0), ot.Beta(2.5, 1.0, -1.0, 2.0)]
    )








.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: default

    inputDimension = distribution.getDimension()
    inputDimension





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    4



.. GENERATED FROM PYTHON SOURCE LINES 54-56

STEP 1: Construction of the multivariate orthonormal basis
----------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 58-59

Create the univariate polynomial family collection which regroups the polynomial families for each direction.

.. GENERATED FROM PYTHON SOURCE LINES 61-63

.. code-block:: default

    polyColl = ot.PolynomialFamilyCollection(inputDimension)








.. GENERATED FROM PYTHON SOURCE LINES 64-65

We could use the Krawtchouk and Charlier families (for discrete distributions).

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: default

    polyColl[0] = ot.KrawtchoukFactory()
    polyColl[1] = ot.CharlierFactory()








.. GENERATED FROM PYTHON SOURCE LINES 71-72

We could also use the automatic selection of the polynomial which corresponds to the distribution: this is done with the `StandardDistributionPolynomialFactory` class.

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: default

    for i in range(inputDimension):
        marginal = distribution.getMarginal(i)
        polyColl[i] = ot.StandardDistributionPolynomialFactory(marginal)








.. GENERATED FROM PYTHON SOURCE LINES 79-80

In our specific case, we use specific polynomial factories.

.. GENERATED FROM PYTHON SOURCE LINES 82-88

.. code-block:: default

    polyColl[0] = ot.HermiteFactory()
    polyColl[1] = ot.LegendreFactory()
    polyColl[2] = ot.LaguerreFactory(2.75)
    # Parameter for the Jacobi factory : 'Probabilty' encoded with 1
    polyColl[3] = ot.JacobiFactory(2.5, 3.5, 1)








.. GENERATED FROM PYTHON SOURCE LINES 89-90

Create the enumeration function.

.. GENERATED FROM PYTHON SOURCE LINES 92-93

The first possibility is to use the `LinearEnumerateFunction`.

.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: default

    enumerateFunction = ot.LinearEnumerateFunction(inputDimension)








.. GENERATED FROM PYTHON SOURCE LINES 98-99

Another possibility is to use the `HyperbolicAnisotropicEnumerateFunction`, which gives less weight to interactions.

.. GENERATED FROM PYTHON SOURCE LINES 101-104

.. code-block:: default

    q = 0.4
    enumerateFunction_1 = ot.HyperbolicAnisotropicEnumerateFunction(inputDimension, q)








.. GENERATED FROM PYTHON SOURCE LINES 105-106

Create the multivariate orthonormal basis which is the cartesian product of the univariate basis.

.. GENERATED FROM PYTHON SOURCE LINES 108-110

.. code-block:: default

    multivariateBasis = ot.OrthogonalProductPolynomialFactory(polyColl, enumerateFunction)








.. GENERATED FROM PYTHON SOURCE LINES 111-113

Ask how many basis terms there are in the 6-th strata.
In the special case of the Linear enumerate function this is also the strata with all the multi-indices of total degree 5.

.. GENERATED FROM PYTHON SOURCE LINES 113-116

.. code-block:: default

    k = 5
    enumerateFunction.getStrataCardinal(k)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    56



.. GENERATED FROM PYTHON SOURCE LINES 117-118

Ask how many basis multi-indices have total degrees lower or equal to k=5.

.. GENERATED FROM PYTHON SOURCE LINES 118-120

.. code-block:: default

    enumerateFunction.getBasisSizeFromTotalDegree(k)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    126



.. GENERATED FROM PYTHON SOURCE LINES 121-122

Give the k-th term of the multivariate basis. To calculate its degree, add the integers.

.. GENERATED FROM PYTHON SOURCE LINES 122-125

.. code-block:: default

    k = 5
    enumerateFunction(k)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[2,0,0,0]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 126-127

Build a term of the basis as a Function. Generally, we do not need to construct manually any term, all terms are constructed automatically by a strategy of construction of the basis.

.. GENERATED FROM PYTHON SOURCE LINES 129-133

.. code-block:: default

    i = 5
    Psi_i = multivariateBasis.build(i)
    Psi_i






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>-0.707107 + 0.707107 * x0^2</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 134-135

Get the measure mu associated to the multivariate basis.

.. GENERATED FROM PYTHON SOURCE LINES 137-140

.. code-block:: default

    distributionStandard = multivariateBasis.getMeasure()
    print(distributionStandard)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ComposedDistribution(Normal(mu = 0, sigma = 1), Uniform(a = -1, b = 1), Gamma(k = 3.75, lambda = 1, gamma = 0), Beta(alpha = 2.5, beta = 1, a = -1, b = 1), IndependentCopula(dimension = 4))




.. GENERATED FROM PYTHON SOURCE LINES 141-143

STEP 2: Truncature strategy of the multivariate orthonormal basis
-----------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 145-146

FixedStrategy : all the polynomials af degree lower or equal to 2 which corresponds to the 15 first ones.

.. GENERATED FROM PYTHON SOURCE LINES 148-151

.. code-block:: default

    p = 15
    truncatureBasisStrategy = ot.FixedStrategy(multivariateBasis, p)








.. GENERATED FROM PYTHON SOURCE LINES 152-154

CleaningStrategy : among the maximumConsideredTerms = 500 first polynomials, those which have the mostSignificant = 50 most significant contributions with significance criterion significanceFactor equal to :math:`10^{-4}`
The `True` boolean indicates if we are interested in the online monitoring of the current basis update (removed or added coefficients).

.. GENERATED FROM PYTHON SOURCE LINES 156-163

.. code-block:: default

    maximumConsideredTerms = 500
    mostSignificant = 50
    significanceFactor = 1.0e-4
    truncatureBasisStrategy_2 = ot.CleaningStrategy(
        multivariateBasis, maximumConsideredTerms, mostSignificant, significanceFactor, True
    )








.. GENERATED FROM PYTHON SOURCE LINES 164-166

STEP 3: Evaluation strategy of the approximation coefficients
-------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-169

The technique illustrated is the Least Squares technique where the points come from an design of experiments. Here : the Monte Carlo sampling technique.

.. GENERATED FROM PYTHON SOURCE LINES 171-175

.. code-block:: default

    sampleSize = 100
    evaluationCoeffStrategy = ot.LeastSquaresStrategy()
    experiment = ot.MonteCarloExperiment(distribution, sampleSize)








.. GENERATED FROM PYTHON SOURCE LINES 176-177

You can specify the approximation algorithm. This is the algorithm that generates a sequence of basis using Least Angle Regression.

.. GENERATED FROM PYTHON SOURCE LINES 179-181

.. code-block:: default

    basisSequenceFactory = ot.LARS()








.. GENERATED FROM PYTHON SOURCE LINES 182-183

This algorithm estimates the empirical error on each sub-basis using Leave One Out strategy.

.. GENERATED FROM PYTHON SOURCE LINES 185-193

.. code-block:: default

    fittingAlgorithm = ot.CorrectedLeaveOneOut()
    # Finally the metamodel selection algorithm embbeded in LeastSquaresStrategy
    approximationAlgorithm = ot.LeastSquaresMetaModelSelectionFactory(
        basisSequenceFactory, fittingAlgorithm
    )
    evaluationCoeffStrategy_2 = ot.LeastSquaresStrategy(approximationAlgorithm)
    experiment_2 = experiment








.. GENERATED FROM PYTHON SOURCE LINES 194-195

Try integration.

.. GENERATED FROM PYTHON SOURCE LINES 195-199

.. code-block:: default

    marginalSizes = [2] * inputDimension
    evaluationCoeffStrategy_3 = ot.IntegrationStrategy()
    experiment_3 = ot.GaussProductExperiment(distribution, marginalSizes)








.. GENERATED FROM PYTHON SOURCE LINES 200-202

Evaluate design of experiments.
For the Gauss product we need to specify the non-uniform weights.

.. GENERATED FROM PYTHON SOURCE LINES 202-205

.. code-block:: default

    X, W = experiment.generateWithWeights()
    Y = model(X)








.. GENERATED FROM PYTHON SOURCE LINES 206-215

STEP 4: Creation of the Functional Chaos Algorithm
--------------------------------------------------

The `FunctionalChaosAlgorithm` class combines

* the model : `model`
* the distribution of the input random vector : `distribution`
* the truncature strategy of the multivariate basis
* and the evaluation strategy of the coefficients

.. GENERATED FROM PYTHON SOURCE LINES 217-220

.. code-block:: default

    polynomialChaosAlgorithm = ot.FunctionalChaosAlgorithm(
        X, W, Y, distribution, truncatureBasisStrategy, evaluationCoeffStrategy
    )








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.009 seconds)


.. _sphx_glr_download_auto_meta_modeling_polynomial_chaos_metamodel_plot_functional_chaos_advanced_ctors.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_functional_chaos_advanced_ctors.py <plot_functional_chaos_advanced_ctors.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_functional_chaos_advanced_ctors.ipynb <plot_functional_chaos_advanced_ctors.ipynb>`
