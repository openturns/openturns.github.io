.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_meta_modeling_polynomial_chaos_metamodel_plot_chaos_draw_validation.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_meta_modeling_polynomial_chaos_metamodel_plot_chaos_draw_validation.py:


Validate a polynomial chaos
===========================

In this example, we show how to perform the draw validation of a polynomial chaos for the Ishigami function.


.. code-block:: default

    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    from math import pi
    ot.Log.Show(ot.Log.NONE)








Create the Ishigami test function.


.. code-block:: default

    ot.RandomGenerator.SetSeed(0)
    formula = ['sin(X1) + 7. * sin(X2)^2 + 0.1 * X3^4 * sin(X1)']
    input_names = ['X1', 'X2', 'X3']
    g = ot.SymbolicFunction(input_names, formula)








Create the probabilistic model


.. code-block:: default

    distributionList = [ot.Uniform(-pi, pi)] * 3
    distribution = ot.ComposedDistribution(distributionList)








Create a training sample


.. code-block:: default

    N = 100 
    inputTrain = distribution.getSample(N)
    outputTrain = g(inputTrain)








Create the chaos.

We could use only the input and output training samples: in this case, the distribution of the input sample is computed by selecting the best distribution that fits the data. 


.. code-block:: default

    chaosalgo = ot.FunctionalChaosAlgorithm(inputTrain, outputTrain)








Since the input distribution is known in our particular case, we instead create the multivariate basis from the distribution.


.. code-block:: default

    multivariateBasis = ot.OrthogonalProductPolynomialFactory(distributionList)
    totalDegree = 8
    enumfunc = multivariateBasis.getEnumerateFunction()
    P = enumfunc.getStrataCumulatedCardinal(totalDegree)
    adaptiveStrategy = ot.FixedStrategy(multivariateBasis, P)









.. code-block:: default

    selectionAlgorithm = ot.LeastSquaresMetaModelSelectionFactory()
    projectionStrategy = ot.LeastSquaresStrategy(inputTrain, outputTrain, selectionAlgorithm)









.. code-block:: default

    chaosalgo = ot.FunctionalChaosAlgorithm(inputTrain, outputTrain, distribution, adaptiveStrategy, projectionStrategy)









.. code-block:: default

    chaosalgo.run()
    result = chaosalgo.getResult()
    metamodel = result.getMetaModel()








In order to validate the metamodel, we generate a test sample.


.. code-block:: default

    n_valid = 1000
    inputTest = distribution.getSample(n_valid)
    outputTest = g(inputTest)
    val = ot.MetaModelValidation(inputTest, outputTest, metamodel)
    Q2 = val.computePredictivityFactor()[0]
    Q2





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    0.9992361845215688



The Q2 is very close to 1: the metamodel is excellent.


.. code-block:: default

    graph = val.drawValidation()
    #graph.setLegends([""])
    graph.setTitle("Q2=%.2f%%" % (Q2*100))
    view = viewer.View(graph)
    plt.show()




.. image:: /auto_meta_modeling/polynomial_chaos_metamodel/images/sphx_glr_plot_chaos_draw_validation_001.png
    :alt: Q2=99.92%
    :class: sphx-glr-single-img





The metamodel has a good predictivity, since the points are almost on the first diagonal.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.289 seconds)


.. _sphx_glr_download_auto_meta_modeling_polynomial_chaos_metamodel_plot_chaos_draw_validation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_chaos_draw_validation.py <plot_chaos_draw_validation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_chaos_draw_validation.ipynb <plot_chaos_draw_validation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
