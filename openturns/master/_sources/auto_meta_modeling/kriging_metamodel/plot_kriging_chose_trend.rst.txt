
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_meta_modeling/kriging_metamodel/plot_kriging_chose_trend.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_meta_modeling_kriging_metamodel_plot_kriging_chose_trend.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_meta_modeling_kriging_metamodel_plot_kriging_chose_trend.py:


Kriging: choose a polynomial trend
==================================

.. GENERATED FROM PYTHON SOURCE LINES 5-9

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as otv
    from matplotlib import pylab as plt








.. GENERATED FROM PYTHON SOURCE LINES 10-44

Introduction
------------

In this example we present the polynomial trends which we may use in a Kriging metamodel.
This example focuses on three polynomial trends:

- :class:`~openturns.ConstantBasisFactory`;
- :class:`~openturns.LinearBasisFactory`;
- :class:`~openturns.QuadraticBasisFactory`.

In the :doc:`/auto_meta_modeling/kriging_metamodel/plot_kriging_beam_trend` example,
we give another example of this method.
In the :doc:`/auto_meta_modeling/kriging_metamodel/plot_kriging_beam_arbitrary_trend` example,
we show how to configure an arbitrary trend.

The model is the real function:

.. math::
   \model(x) = x \sin \left( \frac{x}{2} \right)

for any :math:`x \in [0,10]`.
We consider the :class:`~openturns.MaternModel` covariance kernel
where :math:`\vect{\theta} = (\sigma, \rho)` is the vector of hyperparameters.
The covariance model is fixed but its parameters must be calibrated
depending on the data.
The Kriging metamodel is:

.. math::
   \widehat{Y}(x) = m(x) + Z(x)

where :math:`m(.)` is the trend and :math:`Z(.)` is a Gaussian process with zero mean and covariance model :math:`C_{\vect{\theta}}(s,t)`.
The trend is deterministic and the Gaussian process is probabilistic but they both contribute to the metamodel.
A special feature of the Kriging is the interpolation property: the metamodel is exact at the
training data.

.. GENERATED FROM PYTHON SOURCE LINES 46-48

.. code-block:: Python

    covarianceModel = ot.SquaredExponential([1.0], [1.0])








.. GENERATED FROM PYTHON SOURCE LINES 49-51

Define the model
----------------

.. GENERATED FROM PYTHON SOURCE LINES 53-54

First, we define the :class:`~openturns.MaternModel` covariance model.

.. GENERATED FROM PYTHON SOURCE LINES 54-56

.. code-block:: Python

    covarianceModel = ot.MaternModel([1.0], [1.0], 2.5)








.. GENERATED FROM PYTHON SOURCE LINES 57-58

We define our exact model with a :class:`~openturns.SymbolicFunction`.

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: Python

    model = ot.SymbolicFunction(["x"], ["x * sin(0.5 * x)"])









.. GENERATED FROM PYTHON SOURCE LINES 62-63

We use the following sample to train our metamodel.

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: Python

    xmin = 0.0
    xmax = 10.0
    ot.RandomGenerator.SetSeed(0)
    nTrain = 8
    Xtrain = ot.Uniform(xmin, xmax).getSample(nTrain).sort()
    Xtrain






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>v0</th></tr>
      <tr><th>0</th><td>0.3250275</td></tr>
      <tr><th>1</th><td>1.352764</td></tr>
      <tr><th>2</th><td>3.47057</td></tr>
      <tr><th>3</th><td>5.030402</td></tr>
      <tr><th>4</th><td>6.298766</td></tr>
      <tr><th>5</th><td>8.828052</td></tr>
      <tr><th>6</th><td>9.206796</td></tr>
      <tr><th>7</th><td>9.69423</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 71-72

The values of the exact model are also needed for training.

.. GENERATED FROM PYTHON SOURCE LINES 72-75

.. code-block:: Python

    Ytrain = model(Xtrain)
    Ytrain






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>y0</th></tr>
      <tr><th>0</th><td>0.05258924</td></tr>
      <tr><th>1</th><td>0.8467968</td></tr>
      <tr><th>2</th><td>3.423725</td></tr>
      <tr><th>3</th><td>2.94895</td></tr>
      <tr><th>4</th><td>-0.0490677</td></tr>
      <tr><th>5</th><td>-8.43802</td></tr>
      <tr><th>6</th><td>-9.152166</td></tr>
      <tr><th>7</th><td>-9.606383</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 76-77

We shall test the model on a set of points based on a regular grid.

.. GENERATED FROM PYTHON SOURCE LINES 77-81

.. code-block:: Python

    nTest = 100
    step = (xmax - xmin) / (nTest - 1)
    x_test = ot.RegularGrid(xmin, step, nTest).getVertices()








.. GENERATED FROM PYTHON SOURCE LINES 82-83

We draw the training points and the model at the testing points. We encapsulate it into a function to use it again later.

.. GENERATED FROM PYTHON SOURCE LINES 83-102

.. code-block:: Python



    def plot_exact_model(color):
        graph = ot.Graph("", "x", "", True, "")
        y_test = model(x_test)
        curveModel = ot.Curve(x_test, y_test)
        curveModel.setLineStyle("solid")
        curveModel.setColor(color)
        curveModel.setLegend("Model")
        graph.add(curveModel)
        cloud = ot.Cloud(Xtrain, Ytrain)
        cloud.setColor(color)
        cloud.setPointStyle("fsquare")
        cloud.setLegend("Data")
        graph.add(cloud)
        graph.setLegendPosition("bottom")
        return graph









.. GENERATED FROM PYTHON SOURCE LINES 103-108

.. code-block:: Python

    palette = ot.Drawable.BuildDefaultPalette(5)
    graph = plot_exact_model(palette[0])
    graph.setTitle("1D Kriging: exact model")
    view = otv.View(graph)




.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_001.png
   :alt: 1D Kriging: exact model
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-111

Scale the input training sample
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 113-121

We often have to apply a transform on the input data before performing the Kriging.
This make the estimation of the hyperparameters of the Kriging metamodel
easier for the optimization algorithm.
To do so we write a linear transform of our input data: we make it unit centered at its mean.
Then we fix the mean and the standard deviation to their values with the :class:`~openturns.ParametricFunction`.
We build the inverse transform as well.

We first compute the mean and standard deviation of the input data.

.. GENERATED FROM PYTHON SOURCE LINES 121-126

.. code-block:: Python

    mean = Xtrain.computeMean()[0]
    stdDev = Xtrain.computeStandardDeviation()[0]
    print("Xtrain, mean: %.3f" % mean)
    print("Xtrain, standard deviation: %.3f" % stdDev)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Xtrain, mean: 5.526
    Xtrain, standard deviation: 3.613




.. GENERATED FROM PYTHON SOURCE LINES 127-132

.. code-block:: Python

    tf = ot.SymbolicFunction(["mu", "sigma", "x"], ["(x - mu) / sigma"])
    itf = ot.SymbolicFunction(["mu", "sigma", "x"], ["sigma * x + mu"])
    myInverseTransform = ot.ParametricFunction(itf, [0, 1], [mean, stdDev])
    myTransform = ot.ParametricFunction(tf, [0, 1], [mean, stdDev])








.. GENERATED FROM PYTHON SOURCE LINES 133-134

Scale the input training sample.

.. GENERATED FROM PYTHON SOURCE LINES 134-138

.. code-block:: Python

    scaledXtrain = myTransform(Xtrain)
    scaledXtrain







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>y0</th></tr>
      <tr><th>0</th><td>-1.439601</td></tr>
      <tr><th>1</th><td>-1.15512</td></tr>
      <tr><th>2</th><td>-0.5689025</td></tr>
      <tr><th>3</th><td>-0.1371353</td></tr>
      <tr><th>4</th><td>0.2139527</td></tr>
      <tr><th>5</th><td>0.9140688</td></tr>
      <tr><th>6</th><td>1.018907</td></tr>
      <tr><th>7</th><td>1.15383</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 139-146

Constant basis
--------------

In this paragraph we choose a basis constant for the Kriging.
This trend only has one parameter which is the
value of the constant.
The basis is built with the :class:`~openturns.ConstantBasisFactory` class.

.. GENERATED FROM PYTHON SOURCE LINES 148-151

.. code-block:: Python

    dimension = 1
    basis = ot.ConstantBasisFactory(dimension).build()








.. GENERATED FROM PYTHON SOURCE LINES 152-154

We build the Kriging algorithm by giving it the transformed data, the output data, the covariance
model and the basis.

.. GENERATED FROM PYTHON SOURCE LINES 154-156

.. code-block:: Python

    algo = ot.KrigingAlgorithm(scaledXtrain, Ytrain, covarianceModel, basis)








.. GENERATED FROM PYTHON SOURCE LINES 157-158

We can run the algorithm and store the result.

.. GENERATED FROM PYTHON SOURCE LINES 158-161

.. code-block:: Python

    algo.run()
    result = algo.getResult()








.. GENERATED FROM PYTHON SOURCE LINES 162-163

The metamodel is the following :class:`~openturns.ComposedFunction`.

.. GENERATED FROM PYTHON SOURCE LINES 163-165

.. code-block:: Python

    metamodel = ot.ComposedFunction(result.getMetaModel(), myTransform)








.. GENERATED FROM PYTHON SOURCE LINES 166-167

Define a function to plot the metamodel

.. GENERATED FROM PYTHON SOURCE LINES 167-180

.. code-block:: Python



    def plotMetamodel(x_test, krigingResult, myTransform, color):
        scaled_x_test = myTransform(x_test)
        metamodel = result.getMetaModel()
        y_test = metamodel(scaled_x_test)
        curve = ot.Curve(x_test, y_test)
        curve.setLineStyle("dashed")
        curve.setColor(color)
        curve.setLegend("Metamodel")
        return curve









.. GENERATED FROM PYTHON SOURCE LINES 181-182

We can draw the metamodel and the exact model on the same graph.

.. GENERATED FROM PYTHON SOURCE LINES 182-187

.. code-block:: Python

    graph = plot_exact_model(palette[0])
    graph.add(plotMetamodel(x_test, result, myTransform, palette[1]))
    graph.setTitle("1D Kriging: exact model and metamodel")
    view = otv.View(graph)




.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_002.png
   :alt: 1D Kriging: exact model and metamodel
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 188-189

We can retrieve the calibrated trend coefficient with :meth:`~openturns.KrigingResult.getTrendCoefficients`.

.. GENERATED FROM PYTHON SOURCE LINES 189-192

.. code-block:: Python

    c0 = result.getTrendCoefficients()
    print("The trend is the curve m(x) = %.6e" % c0[0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The trend is the curve m(x) = -2.726225e+00




.. GENERATED FROM PYTHON SOURCE LINES 193-194

We also observe the values of the hyperparameters of the trained covariance model.

.. GENERATED FROM PYTHON SOURCE LINES 194-200

.. code-block:: Python

    rho = result.getCovarianceModel().getScale()[0]
    print("Scale parameter: %.3e" % rho)

    sigma = result.getCovarianceModel().getAmplitude()[0]
    print("Amplitude parameter: %.3e" % sigma)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Scale parameter: 1.368e+00
    Amplitude parameter: 6.077e+00




.. GENERATED FROM PYTHON SOURCE LINES 201-202

We build the trend from the coefficient.

.. GENERATED FROM PYTHON SOURCE LINES 202-206

.. code-block:: Python

    constantTrend = ot.SymbolicFunction(["a", "x"], ["a"])
    myTrend = ot.ParametricFunction(constantTrend, [0], [c0[0]])









.. GENERATED FROM PYTHON SOURCE LINES 207-208

Define a function to plot the trend.

.. GENERATED FROM PYTHON SOURCE LINES 208-220

.. code-block:: Python



    def plotTrend(x_test, myTrend, myTransform, color):
        scale_x_test = myTransform(x_test)
        y_test = myTrend(scale_x_test)
        curve = ot.Curve(x_test, y_test)
        curve.setLineStyle("dotdash")
        curve.setColor(color)
        curve.setLegend("Trend")
        return curve









.. GENERATED FROM PYTHON SOURCE LINES 221-222

We draw the trend found by the Kriging procedure.

.. GENERATED FROM PYTHON SOURCE LINES 222-226

.. code-block:: Python

    graph.add(plotTrend(x_test, myTrend, myTransform, palette[2]))
    graph.setTitle("1D Kriging with a constant trend")
    view = otv.View(graph)




.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_003.png
   :alt: 1D Kriging with a constant trend
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 227-228

Create a function to plot confidence bounds.

.. GENERATED FROM PYTHON SOURCE LINES 230-257

.. code-block:: Python



    def plotKrigingConfidenceBounds(krigingResult, x_test, myTransform, color, alpha=0.05):
        bilateralCI = ot.Normal().computeBilateralConfidenceInterval(1.0 - alpha)
        quantileAlpha = bilateralCI.getUpperBound()[0]
        sqrt = ot.SymbolicFunction(["x"], ["sqrt(x)"])
        n_test = x_test.getSize()
        epsilon = ot.Sample(n_test, [1.0e-8])
        scaled_x_test = myTransform(x_test)
        conditionalVariance = (
            krigingResult.getConditionalMarginalVariance(scaled_x_test) + epsilon
        )
        conditionalSigma = sqrt(conditionalVariance)
        metamodel = krigingResult.getMetaModel()
        y_test = metamodel(scaled_x_test)
        dataLower = [
            y_test[i, 0] - quantileAlpha * conditionalSigma[i, 0] for i in range(n_test)
        ]
        dataUpper = [
            y_test[i, 0] + quantileAlpha * conditionalSigma[i, 0] for i in range(n_test)
        ]
        boundsPoly = ot.Polygon.FillBetween(x_test.asPoint(), dataLower, dataUpper)
        boundsPoly.setColor(color)
        boundsPoly.setLegend("%d%% C.I." % ((1.0 - alpha) * 100))
        return boundsPoly









.. GENERATED FROM PYTHON SOURCE LINES 258-259

Plot a confidence interval.

.. GENERATED FROM PYTHON SOURCE LINES 259-271

.. code-block:: Python

    graph.add(plotKrigingConfidenceBounds(result, x_test, myTransform, palette[3]))
    graph.setTitle("1D Kriging with a constant trend")
    graph.setLegendCorner([1.0, 1.0])
    graph.setLegendPosition('upper left')
    view = otv.View(
        graph,
        figure_kw={"figsize": (7.0, 3.0)},
    )

    plt.subplots_adjust(right=0.6)





.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_004.png
   :alt: 1D Kriging with a constant trend
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 272-273

As expected with a constant basis, the trend obtained is an horizontal line.

.. GENERATED FROM PYTHON SOURCE LINES 276-282

Linear basis
------------

With a linear basis, the vector space is defined by the basis :math:`\{1, z\}`: that is
all the lines of the form :math:`y(z) = az + b` where :math:`a` and :math:`b` are
real parameters.

.. GENERATED FROM PYTHON SOURCE LINES 282-285

.. code-block:: Python

    basis = ot.LinearBasisFactory(dimension).build()









.. GENERATED FROM PYTHON SOURCE LINES 286-287

We run the Kriging analysis and store the result.

.. GENERATED FROM PYTHON SOURCE LINES 287-293

.. code-block:: Python

    algo = ot.KrigingAlgorithm(scaledXtrain, Ytrain, covarianceModel, basis)
    algo.run()
    result = algo.getResult()
    metamodel = ot.ComposedFunction(result.getMetaModel(), myTransform)









.. GENERATED FROM PYTHON SOURCE LINES 294-295

We can draw the metamodel and the exact model on the same graph.

.. GENERATED FROM PYTHON SOURCE LINES 295-299

.. code-block:: Python

    graph = plot_exact_model(palette[0])
    graph.add(plotMetamodel(x_test, result, myTransform, palette[1]))









.. GENERATED FROM PYTHON SOURCE LINES 300-301

We can retrieve the calibrated trend coefficients with :meth:`~openturns.KrigingResult.getTrendCoefficients`.

.. GENERATED FROM PYTHON SOURCE LINES 301-305

.. code-block:: Python

    c0 = result.getTrendCoefficients()
    print("Trend is the curve m(X) = %.6e X + %.6e" % (c0[1], c0[0]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Trend is the curve m(X) = -2.578407e+00 X + -3.020888e+00




.. GENERATED FROM PYTHON SOURCE LINES 306-307

We observe the values of the hyperparameters of the trained covariance model.

.. GENERATED FROM PYTHON SOURCE LINES 307-314

.. code-block:: Python

    rho = result.getCovarianceModel().getScale()[0]
    print("Scale parameter: %.3e" % rho)

    sigma = result.getCovarianceModel().getAmplitude()[0]
    print("Amplitude parameter: %.3e" % sigma)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Scale parameter: 1.100e+00
    Amplitude parameter: 4.627e+00




.. GENERATED FROM PYTHON SOURCE LINES 315-316

We draw the linear trend that we are interested in.

.. GENERATED FROM PYTHON SOURCE LINES 316-321

.. code-block:: Python

    linearTrend = ot.SymbolicFunction(["a", "b", "z"], ["a * z + b"])
    myTrend = ot.ParametricFunction(linearTrend, [0, 1], [c0[1], c0[0]])
    graph.add(plotTrend(x_test, myTrend, myTransform, palette[2]))









.. GENERATED FROM PYTHON SOURCE LINES 322-323

Add the 95% confidence interval.

.. GENERATED FROM PYTHON SOURCE LINES 323-334

.. code-block:: Python

    graph.add(plotKrigingConfidenceBounds(result, x_test, myTransform, palette[3]))
    graph.setTitle("1D Kriging with a linear trend")
    graph.setLegendCorner([1.0, 1.0])
    graph.setLegendPosition('upper left')
    view = otv.View(
        graph,
        figure_kw={"figsize": (7.0, 3.0)},
    )

    plt.subplots_adjust(right=0.6)




.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_005.png
   :alt: 1D Kriging with a linear trend
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 335-339

Quadratic basis
---------------

In this last paragraph we turn to the quadratic basis. All subsequent analysis should remain the same.

.. GENERATED FROM PYTHON SOURCE LINES 339-342

.. code-block:: Python

    basis = ot.QuadraticBasisFactory(dimension).build()









.. GENERATED FROM PYTHON SOURCE LINES 343-344

We run the Kriging analysis and store the result.

.. GENERATED FROM PYTHON SOURCE LINES 344-349

.. code-block:: Python

    algo = ot.KrigingAlgorithm(scaledXtrain, Ytrain, covarianceModel, basis)
    algo.run()
    result = algo.getResult()
    metamodel = ot.ComposedFunction(result.getMetaModel(), myTransform)








.. GENERATED FROM PYTHON SOURCE LINES 350-351

We can draw the metamodel and the exact model on the same graph.

.. GENERATED FROM PYTHON SOURCE LINES 351-355

.. code-block:: Python

    graph = plot_exact_model(palette[0])
    graph.add(plotMetamodel(x_test, result, myTransform, palette[1]))









.. GENERATED FROM PYTHON SOURCE LINES 356-357

We can retrieve the calibrated trend coefficients with :meth:`~openturns.KrigingResult.getTrendCoefficients`.

.. GENERATED FROM PYTHON SOURCE LINES 357-361

.. code-block:: Python

    c0 = result.getTrendCoefficients()
    print("Trend is the curve m(X) = %.6e Z**2 + %.6e Z + %.6e" % (c0[2], c0[1], c0[0]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Trend is the curve m(X) = -4.583776e+00 Z**2 + -5.327795e+00 Z + 1.564663e+00




.. GENERATED FROM PYTHON SOURCE LINES 362-363

We observe the values of the hyperparameters of the trained covariance model.

.. GENERATED FROM PYTHON SOURCE LINES 363-369

.. code-block:: Python

    rho = result.getCovarianceModel().getScale()[0]
    print("Scale parameter: %.3e" % rho)

    sigma = result.getCovarianceModel().getAmplitude()[0]
    print("Amplitude parameter: %.3e" % sigma)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Scale parameter: 8.374e-02
    Amplitude parameter: 9.440e-01




.. GENERATED FROM PYTHON SOURCE LINES 370-371

The quadratic trend obtained.

.. GENERATED FROM PYTHON SOURCE LINES 371-375

.. code-block:: Python

    quadraticTrend = ot.SymbolicFunction(["a", "b", "c", "z"], ["a * z^2 + b * z + c"])
    myTrend = ot.ParametricFunction(quadraticTrend, [0, 1, 2], [c0[2], c0[1], c0[0]])









.. GENERATED FROM PYTHON SOURCE LINES 376-377

Add the quadratic trend

.. GENERATED FROM PYTHON SOURCE LINES 377-381

.. code-block:: Python

    y_test = myTrend(myTransform(x_test))
    graph.add(plotTrend(x_test, myTrend, myTransform, palette[2]))









.. GENERATED FROM PYTHON SOURCE LINES 382-383

Add the 95% confidence interval.

.. GENERATED FROM PYTHON SOURCE LINES 385-386

sphinx_gallery_thumbnail_number = 6

.. GENERATED FROM PYTHON SOURCE LINES 386-397

.. code-block:: Python

    graph.add(plotKrigingConfidenceBounds(result, x_test, myTransform, palette[3]))
    graph.setTitle("1D Kriging with a quadratic trend")
    graph.setLegendCorner([1.0, 1.0])
    graph.setLegendPosition('upper left')
    view = otv.View(
        graph,
        figure_kw={"figsize": (7.0, 3.0)},
    )

    plt.subplots_adjust(right=0.6)




.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_006.png
   :alt: 1D Kriging with a quadratic trend
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_chose_trend_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 398-399

Display figures

.. GENERATED FROM PYTHON SOURCE LINES 399-400

.. code-block:: Python

    otv.View.ShowAll()








.. _sphx_glr_download_auto_meta_modeling_kriging_metamodel_plot_kriging_chose_trend.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_kriging_chose_trend.ipynb <plot_kriging_chose_trend.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_kriging_chose_trend.py <plot_kriging_chose_trend.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_kriging_chose_trend.zip <plot_kriging_chose_trend.zip>`
