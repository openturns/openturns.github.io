
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_meta_modeling/kriging_metamodel/plot_kriging.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_meta_modeling_kriging_metamodel_plot_kriging.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_meta_modeling_kriging_metamodel_plot_kriging.py:


Kriging : multiple input dimensions
===================================

.. GENERATED FROM PYTHON SOURCE LINES 6-20

In this example we are going to create an approximation of a model response using a kriging model. We consider a bidimensional function with gaussian inputs. Then we create a kriging metamodel with a constant basis and a `SquaredExponential` covariance. 

We consider the function 

.. math::
   g(X) = \cos(X_1 + X_2)


for any :math:`\mathbf{X}\in\mathbb{R}^2`. 
We assume that :math:`X_1` and :math:`X_2` have a gaussian distribution :

.. math::
   X_1 \sim \mathcal{N}(0,1) \textrm{ and } X_2 \sim \mathcal{N}(0,1).


.. GENERATED FROM PYTHON SOURCE LINES 22-28

.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

We define the model. 

.. GENERATED FROM PYTHON SOURCE LINES 32-37

.. code-block:: default

    dimension = 2
    input_names = ['x1', 'x2']
    formulas = ['cos(x1 + x2)']
    model = ot.SymbolicFunction(input_names, formulas)








.. GENERATED FROM PYTHON SOURCE LINES 38-39

We generate a simple Monte-Carlo input sample and evaluate the corresponding output sample.

.. GENERATED FROM PYTHON SOURCE LINES 41-46

.. code-block:: default

    distribution = ot.Normal(dimension)
    samplesize = 15
    x  = distribution.getSample(samplesize)
    y = model(x)








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Then we create a kriging metamodel, using a constant trend and a squared exponential covariance model. 

.. GENERATED FROM PYTHON SOURCE LINES 50-57

.. code-block:: default

    basis = ot.ConstantBasisFactory(dimension).build()
    covarianceModel = ot.SquaredExponential([0.1]*dimension, [1.0])
    algo = ot.KrigingAlgorithm(x, y, covarianceModel, basis)
    algo.run()
    result = algo.getResult()
    metamodel = result.getMetaModel()








.. GENERATED FROM PYTHON SOURCE LINES 58-59

It is not so easy to visualize a bidimensional function. In order to simplify the graphics, we consider the value of the function at the input :math:`x_{1,ref}=0.5`. This amounts to create a `ParametricFunction` where the first variable :math:`x_1` (at input index 0) is set to :math:`0.5`.

.. GENERATED FROM PYTHON SOURCE LINES 61-65

.. code-block:: default

    x1ref = 0.5
    metamodelAtXref = ot.ParametricFunction(metamodel, [0], [x1ref])
    modelAtXref = ot.ParametricFunction(model, [0], [x1ref])








.. GENERATED FROM PYTHON SOURCE LINES 66-67

For this given value of :math:`x_1`, we plot the model and the metamodel with :math:`x_2` from its 1% up to its 99% quantile. We configure the X title to "X2" because the default setting would state that this axis is the first value of the parametric function, which default name is "X0".

.. GENERATED FROM PYTHON SOURCE LINES 69-83

.. code-block:: default

    x2min = ot.Normal().computeQuantile(0.01)[0]
    x2max = ot.Normal().computeQuantile(0.99)[0]
    graph = metamodelAtXref.draw(x2min, x2max)
    graph.setLegends(["Kriging"])
    curve = modelAtXref.draw(x2min, x2max)
    curve.setLegends(["Model"])
    curve.setColors(['red'])
    graph.add(curve)
    graph.setLegendPosition("topright")
    graph.setTitle("Sample size = %d" % (samplesize))
    graph.setXTitle("X2")
    view = viewer.View(graph)
    plt.show()




.. image:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_001.png
    :alt: Sample size = 15
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-85

As we can see, the metamodel is quite accurate in this case. The metamodel is very close to the model in the center of the domain, where the density of the input distribution is highest.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.075 seconds)


.. _sphx_glr_download_auto_meta_modeling_kriging_metamodel_plot_kriging.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_kriging.py <plot_kriging.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_kriging.ipynb <plot_kriging.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
