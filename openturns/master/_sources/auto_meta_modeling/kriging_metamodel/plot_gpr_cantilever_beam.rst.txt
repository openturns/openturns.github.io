
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_meta_modeling/kriging_metamodel/plot_gpr_cantilever_beam.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_meta_modeling_kriging_metamodel_plot_gpr_cantilever_beam.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_meta_modeling_kriging_metamodel_plot_gpr_cantilever_beam.py:


Gaussian Process Regression : cantilever beam model
===================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-9

In this example, we create a Gaussian Process Regression (GPR) metamodel of the :ref:`cantilever beam <use-case-cantilever-beam>`.
We use a squared exponential covariance kernel for the Gaussian process. In order to estimate the hyper-parameters, we use a design of experiments of size 20.

.. GENERATED FROM PYTHON SOURCE LINES 12-14

Definition of the model
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 16-28

.. code-block:: Python

    from openturns.usecases import cantilever_beam
    import openturns as ot
    import openturns.experimental as otexp
    import openturns.viewer as viewer
    from matplotlib import pylab as plt

    ot.Log.Show(ot.Log.NONE)

    # Reset default settings
    ot.ResourceMap.Reload()
    ot.RandomGenerator.SetSeed(0)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

We load the cantilever beam use case :

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: Python

    cb = cantilever_beam.CantileverBeam()








.. GENERATED FROM PYTHON SOURCE LINES 33-34

We define the function which evaluates the output depending on the inputs.

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: Python

    model = cb.model








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Then we define the distribution of the input random vector.

.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: Python

    myDistribution = cb.distribution








.. GENERATED FROM PYTHON SOURCE LINES 41-43

Create the design of experiments
--------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 45-47

We consider a simple Monte-Carlo sample as a design of experiments.
This is why we generate an input sample using the `getSample` method of the distribution. Then we evaluate the output using the `model` function.

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python

    sampleSize_train = 20
    X_train = myDistribution.getSample(sampleSize_train)
    Y_train = model(X_train)








.. GENERATED FROM PYTHON SOURCE LINES 54-55

The following figure presents the distribution of the vertical deviations Y on the training sample. We observe that the large deviations occur less often.

.. GENERATED FROM PYTHON SOURCE LINES 57-63

.. code-block:: Python

    histo = ot.HistogramFactory().build(Y_train).drawPDF()
    histo.setXTitle("Vertical deviation (cm)")
    histo.setTitle("Distribution of the vertical deviation")
    histo.setLegends([""])
    view = viewer.View(histo)




.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_gpr_cantilever_beam_001.png
   :alt: Distribution of the vertical deviation
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_gpr_cantilever_beam_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 64-66

Create the metamodel
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 68-71

In order to create the GPR metamodel, we first select a constant trend with the `ConstantBasisFactory` class. Then we use a squared exponential covariance kernel.
The `SquaredExponential` kernel has one amplitude coefficient and 4 scale coefficients.
This is because this covariance kernel is anisotropic : each of the 4 input variables is associated with its own scale coefficient.

.. GENERATED FROM PYTHON SOURCE LINES 73-76

.. code-block:: Python

    basis = ot.ConstantBasisFactory(cb.dim).build()
    covarianceModel = ot.SquaredExponential(cb.dim)








.. GENERATED FROM PYTHON SOURCE LINES 77-79

Typically, the optimization algorithm is quite good at setting sensible optimization bounds.
In this case, however, the range of the input domain is extreme.

.. GENERATED FROM PYTHON SOURCE LINES 81-84

.. code-block:: Python

    print("Lower and upper bounds of X_train:")
    print(X_train.getMin(), X_train.getMax())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lower and upper bounds of X_train:
    [6.50289e+10,248.4,2.50959,1.33551e-07] [7.19913e+10,332.67,2.59947,1.57999e-07]




.. GENERATED FROM PYTHON SOURCE LINES 85-87

We need to manually define sensible optimization bounds.
Note that since the amplitude parameter is computed analytically (this is possible when the output dimension is 1), we only need to set bounds on the scale parameter.

.. GENERATED FROM PYTHON SOURCE LINES 89-93

.. code-block:: Python

    scaleOptimizationBounds = ot.Interval(
        [1.0, 1.0, 1.0, 1.0e-10], [1.0e11, 1.0e3, 1.0e1, 1.0e-5]
    )








.. GENERATED FROM PYTHON SOURCE LINES 94-98

Finally, we use the `GaussianProcessFitter` and `GaussianProcessRegression` classes to create the GPR metamodel.
It requires a training sample, a covariance kernel and a trend basis as input arguments.
We need to set the initial scale parameter for the optimization. The upper bound of the input domain is a sensible choice here.
We must not forget to actually set the optimization bounds defined above.

.. GENERATED FROM PYTHON SOURCE LINES 100-105

.. code-block:: Python

    covarianceModel.setScale(X_train.getMax())
    fitter_algo = otexp.GaussianProcessFitter(X_train, Y_train, covarianceModel, basis)
    fitter_algo.setOptimizationBounds(scaleOptimizationBounds)









.. GENERATED FROM PYTHON SOURCE LINES 106-109

The `run` method optimizes the metamodel hyperparameters.

We can then print the constant trend of the metamodel, estimated using the least squares method.

.. GENERATED FROM PYTHON SOURCE LINES 111-118

.. code-block:: Python

    fitter_algo.run()
    fitter_result = fitter_algo.getResult()
    gpr_algo = otexp.GaussianProcessRegression(fitter_result)
    gpr_algo.run()
    gpr_result = gpr_algo.getResult()
    gprMetamodel = gpr_result.getMetaModel()








.. GENERATED FROM PYTHON SOURCE LINES 119-120

The `getTrendCoefficients` method returns the coefficients of the trend.

.. GENERATED FROM PYTHON SOURCE LINES 122-124

.. code-block:: Python

    print(gpr_result.getTrendCoefficients())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.427435]




.. GENERATED FROM PYTHON SOURCE LINES 125-126

We can also print the hyperparameters of the covariance model, which have been estimated by maximizing the likelihood.

.. GENERATED FROM PYTHON SOURCE LINES 128-130

.. code-block:: Python

    gpr_result.getCovarianceModel()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>SquaredExponential(scale=[7.19913e+10,332.782,2.59947,1.57999e-07], amplitude=[0.528744])</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 131-133

Validate the metamodel
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 135-136

We finally want to validate the GPR metamodel. This is why we generate a validation sample with size 100 and we evaluate the output of the model on this sample.

.. GENERATED FROM PYTHON SOURCE LINES 138-142

.. code-block:: Python

    sampleSize_test = 100
    X_test = myDistribution.getSample(sampleSize_test)
    Y_test = model(X_test)








.. GENERATED FROM PYTHON SOURCE LINES 143-144

The `MetaModelValidation` classe makes the validation easy. To create it, we use the validation samples and the metamodel.

.. GENERATED FROM PYTHON SOURCE LINES 146-148

.. code-block:: Python

    val = ot.MetaModelValidation(Y_test, gprMetamodel(X_test))








.. GENERATED FROM PYTHON SOURCE LINES 149-150

The `computeR2Score` computes the R2 score.

.. GENERATED FROM PYTHON SOURCE LINES 152-155

.. code-block:: Python

    R2 = val.computeR2Score()[0]
    print(R2)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.9999355169838081




.. GENERATED FROM PYTHON SOURCE LINES 156-157

The residuals are the difference between the model and the metamodel.

.. GENERATED FROM PYTHON SOURCE LINES 159-166

.. code-block:: Python

    r = val.getResidualSample()
    graph = ot.HistogramFactory().build(r).drawPDF()
    graph.setXTitle("Residuals (cm)")
    graph.setTitle("Distribution of the residuals")
    graph.setLegends([""])
    view = viewer.View(graph)




.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_gpr_cantilever_beam_002.png
   :alt: Distribution of the residuals
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_gpr_cantilever_beam_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 167-168

We observe that the negative residuals occur with nearly the same frequency of the positive residuals: this is a first sign of good quality.

.. GENERATED FROM PYTHON SOURCE LINES 170-171

The `drawValidation` method allows one to compare the observed outputs and the metamodel outputs.

.. GENERATED FROM PYTHON SOURCE LINES 173-174

sphinx_gallery_thumbnail_number = 3

.. GENERATED FROM PYTHON SOURCE LINES 174-179

.. code-block:: Python

    graph = val.drawValidation()
    graph.setTitle("R2 = %.2f%%" % (100 * R2))
    view = viewer.View(graph)

    plt.show()



.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_gpr_cantilever_beam_003.png
   :alt: R2 = 99.99%
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_gpr_cantilever_beam_003.png
   :class: sphx-glr-single-img






.. _sphx_glr_download_auto_meta_modeling_kriging_metamodel_plot_gpr_cantilever_beam.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_gpr_cantilever_beam.ipynb <plot_gpr_cantilever_beam.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_gpr_cantilever_beam.py <plot_gpr_cantilever_beam.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_gpr_cantilever_beam.zip <plot_gpr_cantilever_beam.zip>`
