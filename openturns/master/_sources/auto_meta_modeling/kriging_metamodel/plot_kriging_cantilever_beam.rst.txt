
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_meta_modeling/kriging_metamodel/plot_kriging_cantilever_beam.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_meta_modeling_kriging_metamodel_plot_kriging_cantilever_beam.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_meta_modeling_kriging_metamodel_plot_kriging_cantilever_beam.py:


Kriging : cantilever beam model
===============================

.. GENERATED FROM PYTHON SOURCE LINES 6-8

In this example, we create a Kriging metamodel of the :ref:`cantilever beam <use-case-cantilever-beam>`.
We use a squared exponential covariance kernel for the Gaussian process. In order to estimate the hyper-parameters, we use a design of experiments of size is 20.

.. GENERATED FROM PYTHON SOURCE LINES 11-13

Definition of the model
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 15-22

.. code-block:: Python

    from openturns.usecases import cantilever_beam
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 23-24

We load the cantilever beam use case :

.. GENERATED FROM PYTHON SOURCE LINES 24-26

.. code-block:: Python

    cb = cantilever_beam.CantileverBeam()








.. GENERATED FROM PYTHON SOURCE LINES 27-28

We define the function which evaluates the output depending on the inputs.

.. GENERATED FROM PYTHON SOURCE LINES 28-30

.. code-block:: Python

    model = cb.model








.. GENERATED FROM PYTHON SOURCE LINES 31-32

Then we define the distribution of the input random vector.

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: Python

    dim = cb.dim  # number of inputs
    myDistribution = cb.distribution








.. GENERATED FROM PYTHON SOURCE LINES 36-38

Create the design of experiments
--------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 40-42

We consider a simple Monte-Carlo sample as a design of experiments.
This is why we generate an input sample using the `getSample` method of the distribution. Then we evaluate the output using the `model` function.

.. GENERATED FROM PYTHON SOURCE LINES 44-48

.. code-block:: Python

    sampleSize_train = 20
    X_train = myDistribution.getSample(sampleSize_train)
    Y_train = model(X_train)








.. GENERATED FROM PYTHON SOURCE LINES 49-50

The following figure presents the distribution of the vertical deviations `Y` on the training sample. We observe that the large deviations occur less often.

.. GENERATED FROM PYTHON SOURCE LINES 52-58

.. code-block:: Python

    histo = ot.HistogramFactory().build(Y_train).drawPDF()
    histo.setXTitle("Vertical deviation (cm)")
    histo.setTitle("Distribution of the vertical deviation")
    histo.setLegends([""])
    view = viewer.View(histo)




.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_cantilever_beam_001.png
   :alt: Distribution of the vertical deviation
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_cantilever_beam_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-61

Create the metamodel
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-67

In order to create the Kriging metamodel, we first select a constant trend with the :class:`~openturns.ConstantBasisFactory` class.
Then we use a squared exponential covariance kernel.
The :class:`~openturns.SquaredExponential` kernel has one amplitude coefficient and 4 scale coefficients.
This is because this covariance kernel is anisotropic : each of the 4 input variables is associated with its own scale coefficient.

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: Python

    basis = ot.ConstantBasisFactory(dim).build()
    covarianceModel = ot.SquaredExponential(dim)








.. GENERATED FROM PYTHON SOURCE LINES 73-75

Typically, the optimization algorithm is quite good at setting optimization bounds.
In this case, however, the range of the input domain is extreme.

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: Python

    print("Lower and upper bounds of X_train:")
    print(X_train.getMin(), X_train.getMax())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lower and upper bounds of X_train:
    [6.52677e+10,244.612,2.50392,1.34039e-07] [7.35161e+10,354.916,2.59295,1.56347e-07]




.. GENERATED FROM PYTHON SOURCE LINES 81-83

We need to manually define optimization bounds.
Note that since the amplitude parameter is computed analytically (this is possible when the output dimension is 1), we only need to set bounds on the scale parameter.

.. GENERATED FROM PYTHON SOURCE LINES 85-89

.. code-block:: Python

    scaleOptimizationBounds = ot.Interval(
        [1.0, 1.0, 1.0, 1.0e-10], [1.0e11, 1.0e3, 1.0e1, 1.0e-5]
    )








.. GENERATED FROM PYTHON SOURCE LINES 90-94

Finally, we use the :class:`~openturns.KrigingAlgorithm` class to create the Kriging metamodel.
It requires a training sample, a covariance kernel and a trend basis as input arguments.
We need to set the initial scale parameter for the optimization. The upper bound of the input domain is a sensitive choice here.
We must not forget to actually set the optimization bounds defined above.

.. GENERATED FROM PYTHON SOURCE LINES 96-101

.. code-block:: Python

    covarianceModel.setScale(X_train.getMax())
    algo = ot.KrigingAlgorithm(X_train, Y_train, covarianceModel, basis)
    algo.setOptimizationBounds(scaleOptimizationBounds)









.. GENERATED FROM PYTHON SOURCE LINES 102-105

The `run` method has optimized the hyperparameters of the metamodel.

We can then print the constant trend of the metamodel, which have been estimated using the least squares method.

.. GENERATED FROM PYTHON SOURCE LINES 107-111

.. code-block:: Python

    algo.run()
    result = algo.getResult()
    krigingMetamodel = result.getMetaModel()








.. GENERATED FROM PYTHON SOURCE LINES 112-113

The `getTrendCoefficients` method returns the coefficients of the trend.

.. GENERATED FROM PYTHON SOURCE LINES 115-117

.. code-block:: Python

    print(result.getTrendCoefficients())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.45244]




.. GENERATED FROM PYTHON SOURCE LINES 118-119

We can also print the hyperparameters of the covariance model, which have been estimated by maximizing the likelihood.

.. GENERATED FROM PYTHON SOURCE LINES 121-123

.. code-block:: Python

    result.getCovarianceModel()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>SquaredExponential(scale=[7.35161e+10,354.916,2.59295,1.56347e-07], amplitude=[0.350094])</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 124-126

Validate the metamodel
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 128-129

We finally want to validate the Kriging metamodel. This is why we generate a validation sample with size 100 and we evaluate the output of the model on this sample.

.. GENERATED FROM PYTHON SOURCE LINES 131-135

.. code-block:: Python

    sampleSize_test = 100
    X_test = myDistribution.getSample(sampleSize_test)
    Y_test = model(X_test)








.. GENERATED FROM PYTHON SOURCE LINES 136-138

The :class:`~openturns.MetaModelValidation` class makes surrogate model validation easy.
To create it, we use the validation samples and the metamodel.

.. GENERATED FROM PYTHON SOURCE LINES 140-143

.. code-block:: Python

    metamodelPredictions = krigingMetamodel(X_test)
    val = ot.MetaModelValidation(Y_test, metamodelPredictions)








.. GENERATED FROM PYTHON SOURCE LINES 144-146

The :meth:`~openturns.MetaModelValidation.computeR2Score` method computes the
R2 coefficient of determination.

.. GENERATED FROM PYTHON SOURCE LINES 148-151

.. code-block:: Python

    r2Score = val.computeR2Score()[0]
    print(r2Score)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.9999090577204818




.. GENERATED FROM PYTHON SOURCE LINES 152-153

The residuals are the difference between the model and the metamodel.

.. GENERATED FROM PYTHON SOURCE LINES 155-162

.. code-block:: Python

    r = val.getResidualSample()
    graph = ot.HistogramFactory().build(r).drawPDF()
    graph.setXTitle("Residuals (cm)")
    graph.setTitle("Distribution of the residuals")
    graph.setLegends([""])
    view = viewer.View(graph)




.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_cantilever_beam_002.png
   :alt: Distribution of the residuals
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_cantilever_beam_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 163-164

We observe that the negative residuals occur with nearly the same frequency of the positive residuals: this is a first sign of good quality.

.. GENERATED FROM PYTHON SOURCE LINES 166-168

The :meth:`~openturns.MetaModelValidation.drawValidation` method allows one to compare
the observed outputs and the metamodel outputs.

.. GENERATED FROM PYTHON SOURCE LINES 170-175

.. code-block:: Python

    graph = val.drawValidation()
    graph.setTitle("R2 = %.2f%%" % (100 * r2Score))
    view = viewer.View(graph)
    plt.show()
    # sphinx_gallery_thumbnail_number = 3



.. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_cantilever_beam_003.png
   :alt: R2 = 99.99%
   :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_cantilever_beam_003.png
   :class: sphx-glr-single-img






.. _sphx_glr_download_auto_meta_modeling_kriging_metamodel_plot_kriging_cantilever_beam.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_kriging_cantilever_beam.ipynb <plot_kriging_cantilever_beam.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_kriging_cantilever_beam.py <plot_kriging_cantilever_beam.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_kriging_cantilever_beam.zip <plot_kriging_cantilever_beam.zip>`
