
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/statistical_tests/plot_kolmogorov_statistics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_data_analysis_statistical_tests_plot_kolmogorov_statistics.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_statistical_tests_plot_kolmogorov_statistics.py:


Kolmogorov-Smirnov : understand the statistics
==============================================

.. GENERATED FROM PYTHON SOURCE LINES 8-13

In this example, we illustrate how the Kolmogorov-Smirnov statistics is computed. 

* We generate a sample from a gaussian distribution. 
* We create a Uniform distribution which parameters are estimated from the sample.
* The Kolmogorov-Smirnov statistics is computed and plot on the empirical cumulated distribution function.

.. GENERATED FROM PYTHON SOURCE LINES 15-20

.. code-block:: default

    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 21-22

The computeKSStatisticsIndex function computes the Kolmogorov-Smirnov distance between the sample and the distribution. Furthermore, it returns the index which achieves the maximum distance in the sorted sample. The following function is for teaching purposes only: use `FittingTest` for real applications.

.. GENERATED FROM PYTHON SOURCE LINES 24-39

.. code-block:: default

    def computeKSStatisticsIndex(sample,distribution):
        sample = ot.Sample(sample.sort())
        n = sample.getSize()
        D = 0.
        index = -1
        D_previous = 0.
        for i in range(n):
            F = distribution.computeCDF(sample[i])
            D = max(F - float(i)/n,float(i+1)/n - F,D)
            if (D > D_previous):
                index = i
                D_previous = D
        return D, index









.. GENERATED FROM PYTHON SOURCE LINES 40-41

The drawKSDistance function plots the empirical distribution function of the sample and the Kolmogorov-Smirnov distance at point x. 

.. GENERATED FROM PYTHON SOURCE LINES 43-67

.. code-block:: default

    def drawKSDistance(sample,distribution,x,D,distFactory):
        graph = ot.Graph("KS Distance = %.4f" % (D),"X","CDF",True,"topleft")
        # Vertical line at point x
        ECDF_index = sample.computeEmpiricalCDF([x])
        CDF_index = distribution.computeCDF(x)
        curve = ot.Curve([x,x],[ECDF_index,CDF_index])
        curve.setColor("green")
        curve.setLegend("KS Statistics")
        curve.setLineWidth(4.*curve.getLineWidth())
        graph.add(curve)
        # Empirical CDF
        empiricalCDF = ot.UserDefined(sample).drawCDF()
        empiricalCDF.setColors(["blue"])
        empiricalCDF.setLegends(["Empirical DF"])
        graph.add(empiricalCDF)
        #
        distname = distFactory.getClassName()
        distribution = distFactory.build(sample)
        cdf = distribution.drawCDF()
        cdf.setLegends([distname])
        graph.add(cdf)
        return graph









.. GENERATED FROM PYTHON SOURCE LINES 68-69

We generate a sample from a standard gaussian distribution.

.. GENERATED FROM PYTHON SOURCE LINES 71-75

.. code-block:: default

    N = ot.Normal()
    n = 10
    sample = N.getSample(n)








.. GENERATED FROM PYTHON SOURCE LINES 76-77

Compute the index which achieves the maximum Kolmogorov-Smirnov distance.

.. GENERATED FROM PYTHON SOURCE LINES 79-80

We then create a Uniform distribution which parameters are estimated from the sample. This way, the K.S. distance is large enough to being graphically significant.

.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: default

    distFactory = ot.UniformFactory()
    distribution = distFactory.build(sample)
    distribution






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>Uniform(a = -2.16141, b = 1.48022)</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 87-88

Compute the index which achieves the maximum Kolmogorov-Smirnov distance.

.. GENERATED FROM PYTHON SOURCE LINES 90-93

.. code-block:: default

    D, index = computeKSStatisticsIndex(sample,distribution)
    print("D=",D,", Index=",index)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    D= 0.20086534405594617 , Index= 1




.. GENERATED FROM PYTHON SOURCE LINES 94-95

Get the value which maximizes the distance.

.. GENERATED FROM PYTHON SOURCE LINES 97-100

.. code-block:: default

    x = sample[index,0]
    x





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    -0.42719226830362694



.. GENERATED FROM PYTHON SOURCE LINES 101-105

.. code-block:: default

    graph = drawKSDistance(sample,distribution,x,D,distFactory)
    view = viewer.View(graph)
    plt.show()




.. image:: /auto_data_analysis/statistical_tests/images/sphx_glr_plot_kolmogorov_statistics_001.png
    :alt: KS Distance = 0.2009
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 106-107

We see that the K.S. statistics is acheived where the distance between the empirical distribution function of the sample and the candidate distribution is largest.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.078 seconds)


.. _sphx_glr_download_auto_data_analysis_statistical_tests_plot_kolmogorov_statistics.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_kolmogorov_statistics.py <plot_kolmogorov_statistics.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_kolmogorov_statistics.ipynb <plot_kolmogorov_statistics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
