
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/statistical_tests/plot_fitted_distribution_ranking.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_data_analysis_statistical_tests_plot_fitted_distribution_ranking.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_statistical_tests_plot_fitted_distribution_ranking.py:


Select fitted distributions
===========================

.. GENERATED FROM PYTHON SOURCE LINES 7-14

In this example help to make a choice between several distributions fitted to a sample.

Several methods can be used:

- the ranking by the Kolmogorov p-values (for continuous distributions),
- the ranking by the ChiSquared p-values (for discrete distributions),
- the ranking by BIC values.

.. GENERATED FROM PYTHON SOURCE LINES 16-21

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as otv

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 22-23

Create a sample from a continuous distribution

.. GENERATED FROM PYTHON SOURCE LINES 23-28

.. code-block:: Python

    distribution = ot.Beta(2.0, 2.0, 0.0, 1.0)
    sample = distribution.getSample(1000)
    graph = ot.UserDefined(sample).drawCDF()
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/statistical_tests/images/sphx_glr_plot_fitted_distribution_ranking_001.png
   :alt: X0 CDF
   :srcset: /auto_data_analysis/statistical_tests/images/sphx_glr_plot_fitted_distribution_ranking_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 29-30

**1. Specify the model only**

.. GENERATED FROM PYTHON SOURCE LINES 32-33

Create the list of distribution estimators

.. GENERATED FROM PYTHON SOURCE LINES 33-35

.. code-block:: Python

    factories = [ot.BetaFactory(), ot.TriangularFactory()]








.. GENERATED FROM PYTHON SOURCE LINES 36-37

Rank the continuous models by the Lilliefors p-values:

.. GENERATED FROM PYTHON SOURCE LINES 37-42

.. code-block:: Python

    estimated_distribution, test_result = ot.FittingTest.BestModelLilliefors(
        sample, factories
    )
    test_result






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=TestResult name=Unnamed type=Lilliefors Beta binaryQualityMeasure=false p-value threshold=0.5 p-value=0.00599401 statistic=0.0327766 description=[Beta(alpha = 1.72649, beta = 1.66568, a = 0.00526109, b = 0.970313) vs sample Beta]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 43-44

Rank the continuous models wrt the BIC criteria (no test result):

.. GENERATED FROM PYTHON SOURCE LINES 44-46

.. code-block:: Python

    ot.FittingTest.BestModelBIC(sample, factories)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [class=Beta name=Beta dimension=1 alpha=1.72649 beta=1.66568 a=0.00526109 b=0.970313, -0.19254944819710879]



.. GENERATED FROM PYTHON SOURCE LINES 47-48

Rank the continuous models wrt the AIC criteria (no test result)

.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: Python

    ot.FittingTest.BestModelAIC(sample, factories)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [class=Beta name=Beta dimension=1 alpha=1.72649 beta=1.66568 a=0.00526109 b=0.970313, -0.21218046931303733]



.. GENERATED FROM PYTHON SOURCE LINES 51-52

Rank the continuous models wrt the AICc criteria (no test result):

.. GENERATED FROM PYTHON SOURCE LINES 52-54

.. code-block:: Python

    ot.FittingTest.BestModelAICC(sample, factories)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [class=Beta name=Beta dimension=1 alpha=1.72649 beta=1.66568 a=0.00526109 b=0.970313, -0.2121402683080122]



.. GENERATED FROM PYTHON SOURCE LINES 55-56

**2. Specify the model and its parameters**

.. GENERATED FROM PYTHON SOURCE LINES 58-59

Create a collection of the distributions to be tested

.. GENERATED FROM PYTHON SOURCE LINES 59-61

.. code-block:: Python

    distributions = [ot.Beta(2.0, 2.0, 0.0, 1.0), ot.Triangular(0.0, 0.5, 1.0)]








.. GENERATED FROM PYTHON SOURCE LINES 62-63

Rank the continuous models by the Kolmogorov p-values:

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: Python

    estimated_distribution, test_result = ot.FittingTest.BestModelKolmogorov(
        sample, distributions
    )
    test_result






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=TestResult name=Unnamed type=Kolmogorov Beta binaryQualityMeasure=true p-value threshold=0.05 p-value=0.127301 statistic=0.0369407 description=[Beta(alpha = 2, beta = 2, a = 0, b = 1) vs sample Beta]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 69-70

Rank the continuous models wrt the BIC criteria:

.. GENERATED FROM PYTHON SOURCE LINES 70-72

.. code-block:: Python

    ot.FittingTest.BestModelBIC(sample, distributions)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [class=Beta name=Beta dimension=1 alpha=2 beta=2 a=0 b=1, -0.21804827501286062]



.. GENERATED FROM PYTHON SOURCE LINES 73-74

Rank the continuous models wrt the AIC criteria:

.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: Python

    ot.FittingTest.BestModelAIC(sample, distributions)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [class=Beta name=Beta dimension=1 alpha=2 beta=2 a=0 b=1, -0.21804827501286062]



.. GENERATED FROM PYTHON SOURCE LINES 77-78

Rank the continuous models wrt the AICc criteria:

.. GENERATED FROM PYTHON SOURCE LINES 78-80

.. code-block:: Python

    ot.FittingTest.BestModelAICC(sample, distributions)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [class=Beta name=Beta dimension=1 alpha=2 beta=2 a=0 b=1, -0.21804827501286062]



.. GENERATED FROM PYTHON SOURCE LINES 81-82

**Discrete distributions**

.. GENERATED FROM PYTHON SOURCE LINES 84-85

Create a sample from a discrete distribution

.. GENERATED FROM PYTHON SOURCE LINES 85-90

.. code-block:: Python

    distribution = ot.Poisson(2.0)
    sample = distribution.getSample(1000)
    graph = ot.UserDefined(sample).drawCDF()
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/statistical_tests/images/sphx_glr_plot_fitted_distribution_ranking_002.png
   :alt: X0 CDF
   :srcset: /auto_data_analysis/statistical_tests/images/sphx_glr_plot_fitted_distribution_ranking_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 91-92

Create the list of distribution estimators

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: Python

    distributions = [ot.Poisson(2.0), ot.Geometric(0.1)]








.. GENERATED FROM PYTHON SOURCE LINES 95-96

Rank the discrete models wrt the ChiSquared p-values:

.. GENERATED FROM PYTHON SOURCE LINES 96-102

.. code-block:: Python

    ot.ResourceMap.SetAsBool("FittingTest-ChiSquaredCheckSample", False)
    estimated_distribution, test_result = ot.FittingTest.BestModelChiSquared(
        sample, distributions
    )
    test_result






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=TestResult name=Unnamed type=ChiSquared Poisson binaryQualityMeasure=true p-value threshold=0.05 p-value=0.236501 statistic=8.02193 description=[Poisson(lambda = 2) vs sample Poisson]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 103-104

Rank the discrete models wrt the BIC criteria:

.. GENERATED FROM PYTHON SOURCE LINES 104-107

.. code-block:: Python

    ot.FittingTest.BestModelBIC(sample, distributions)
    otv.View.ShowAll()








.. GENERATED FROM PYTHON SOURCE LINES 108-109

Reset default settings

.. GENERATED FROM PYTHON SOURCE LINES 109-110

.. code-block:: Python

    ot.ResourceMap.Reload()








.. _sphx_glr_download_auto_data_analysis_statistical_tests_plot_fitted_distribution_ranking.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_fitted_distribution_ranking.ipynb <plot_fitted_distribution_ranking.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_fitted_distribution_ranking.py <plot_fitted_distribution_ranking.py>`
