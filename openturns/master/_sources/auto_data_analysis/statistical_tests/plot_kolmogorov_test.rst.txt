
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/statistical_tests/plot_kolmogorov_test.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_data_analysis_statistical_tests_plot_kolmogorov_test.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_statistical_tests_plot_kolmogorov_test.py:


Use the Kolmogorov/Lilliefors test
==================================

.. GENERATED FROM PYTHON SOURCE LINES 7-8

In this example we are going to perform a Kolmogorov or a Lilliefors goodness-of-fit test for a 1-d continuous distribution.

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: Python

    import openturns as ot

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 15-16

Create the data.

.. GENERATED FROM PYTHON SOURCE LINES 18-21

.. code-block:: Python

    distribution = ot.Normal()
    sample = distribution.getSample(50)








.. GENERATED FROM PYTHON SOURCE LINES 22-27

Case 1 : the distribution parameters are known.
-----------------------------------------------

In the case where the parameters of the distribution are known,
we must use the `Kolmogorov` static method and the distribution to be tested.

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: Python

    result = ot.FittingTest.Kolmogorov(sample, distribution, 0.01)
    print("Conclusion=", result.getBinaryQualityMeasure(), "P-value=", result.getPValue())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Conclusion= True P-value= 0.6411393475140432




.. GENERATED FROM PYTHON SOURCE LINES 33-34

Test succeeded ?

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: Python

    result.getBinaryQualityMeasure()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 39-40

P-Value associated to the risk

.. GENERATED FROM PYTHON SOURCE LINES 42-44

.. code-block:: Python

    result.getPValue()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.6411393475140432



.. GENERATED FROM PYTHON SOURCE LINES 45-46

Threshold associated to the test.

.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: Python

    result.getThreshold()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.01



.. GENERATED FROM PYTHON SOURCE LINES 51-52

Observed value of the statistic.

.. GENERATED FROM PYTHON SOURCE LINES 54-56

.. code-block:: Python

    result.getStatistic()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.10176815459988908



.. GENERATED FROM PYTHON SOURCE LINES 57-62

Case 2 : the distribution parameters are estimated from the sample.
-------------------------------------------------------------------

In the case where the parameters of the distribution are estimated from the sample,
we must use the `Lilliefors` static method and the distribution factory to be tested.

.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: Python

    ot.ResourceMap.SetAsUnsignedInteger("FittingTest-LillieforsMaximumSamplingSize", 1000)








.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: Python

    distributionFactory = ot.NormalFactory()








.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: Python

    dist, result = ot.FittingTest.Lilliefors(sample, distributionFactory, 0.01)
    print("Conclusion=", result.getBinaryQualityMeasure(), "P-value=", result.getPValue())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Conclusion= True P-value= 0.353




.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: Python

    dist






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    Normal
    <ul>
      <li>name=Normal</li>
      <li>dimension=1</li>
      <li>weight=1</li>
      <li>range=]-inf (-7.37306), (7.4437) +inf[</li>
      <li>description=[X0]</li>
      <li>isParallel=true</li>
      <li>isCopula=false</li>
    </ul>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 77-78

Test succeeded ?

.. GENERATED FROM PYTHON SOURCE LINES 80-82

.. code-block:: Python

    result.getBinaryQualityMeasure()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 83-84

P-Value associated to the risk

.. GENERATED FROM PYTHON SOURCE LINES 86-88

.. code-block:: Python

    result.getPValue()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.353



.. GENERATED FROM PYTHON SOURCE LINES 89-90

Threshold associated to the test.

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: Python

    result.getThreshold()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.01



.. GENERATED FROM PYTHON SOURCE LINES 95-96

Observed value of the statistic.

.. GENERATED FROM PYTHON SOURCE LINES 98-100

.. code-block:: Python

    result.getStatistic()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.09091079601468799



.. GENERATED FROM PYTHON SOURCE LINES 101-102

Reset default settings

.. GENERATED FROM PYTHON SOURCE LINES 102-103

.. code-block:: Python

    ot.ResourceMap.Reload()








.. _sphx_glr_download_auto_data_analysis_statistical_tests_plot_kolmogorov_test.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_kolmogorov_test.ipynb <plot_kolmogorov_test.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_kolmogorov_test.py <plot_kolmogorov_test.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_kolmogorov_test.zip <plot_kolmogorov_test.zip>`
