
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/sample_analysis/plot_compare_unconditional_conditional_histograms.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_data_analysis_sample_analysis_plot_compare_unconditional_conditional_histograms.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_sample_analysis_plot_compare_unconditional_conditional_histograms.py:


Compare unconditional and conditional histograms
================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-30

In this example, we compare unconditional and conditional histograms for a
simulation.
We consider the :ref:`flooding model<use-case-flood-model>`.
Let :math:`g` be a function which takes four inputs :math:`Q`, :math:`K_s`,
:math:`Z_v` and :math:`Z_m` and returns one output :math:`S`.

We first consider the (unconditional) distribution of the input :math:`Q`.

Let :math:`t` be a given threshold on the output :math:`S`: we consider
the event :math:`S > t`.
Then we consider the conditional distribution of the input :math:`Q` given
that :math:`S > t` that is to say :math:`Q|S > t`.

If these two distributions are significantly different, we conclude that
the input :math:`Q` has an impact on the event :math:`S > t`.

In order to approximate the distribution of the output :math:`S`,
we perform a Monte-Carlo simulation with size 500.
The threshold :math:`t` is chosen as the 90% quantile of the empirical
distribution of :math:`S`.
In this example, the distribution is aproximated by its empirical histogram
(but this could be done with another distribution approximation as well,
such as kernel smoothing for example).

.. GENERATED FROM PYTHON SOURCE LINES 32-39

.. code-block:: Python

    import numpy as np
    from openturns.usecases import flood_model
    import openturns as ot
    import openturns.viewer as viewer

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 40-41

We use the `FloodModel` data class that contains all the case parameters.

.. GENERATED FROM PYTHON SOURCE LINES 41-44

.. code-block:: Python

    fm = flood_model.FloodModel()









.. GENERATED FROM PYTHON SOURCE LINES 45-47

Create an input sample from the joint `distribution` defined in the data class.
We build an output sample by taking the image by the `model`.

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python

    size = 500
    inputSample = fm.distribution.getSample(size)
    inputSample[:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>Q (m3/s)</th><th>Ks</th><th>Zv (m)</th><th>Zm (m)</th><th>B (m)</th><th>L (m)</th><th>Zb (m)</th><th>Hd (m)</th></tr>
      <tr><th>0</th><td>753.7666</td><td>29.19004</td><td>49.05922</td><td>54.74766</td><td>302.4613</td><td>5006.225</td><td>55.59275</td><td>2.8639</td></tr>
      <tr><th>1</th><td>2050.695</td><td>22.50667</td><td>50.38535</td><td>55.07833</td><td>300.7663</td><td>5001.023</td><td>55.61731</td><td>3.34262</td></tr>
      <tr><th>2</th><td>1115.475</td><td>19.46573</td><td>49.61468</td><td>55.12172</td><td>302.5566</td><td>5004.309</td><td>55.04336</td><td>3.246678</td></tr>
      <tr><th>3</th><td>1003.573</td><td>44.59546</td><td>50.74211</td><td>54.94174</td><td>303.2857</td><td>5000.459</td><td>55.50133</td><td>3.384042</td></tr>
      <tr><th>4</th><td>813.6209</td><td>35.84679</td><td>49.40137</td><td>54.99896</td><td>298.7565</td><td>5003.277</td><td>55.32127</td><td>2.098999</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: Python

    outputSample = fm.model(inputSample)
    outputSample[:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>H</th><th>S</th><th>C</th></tr>
      <tr><th>0</th><td>1.746443</td><td>-7.650989</td><td>0.8024835</td></tr>
      <tr><th>1</th><td>3.954572</td><td>-4.620012</td><td>1.31091</td></tr>
      <tr><th>2</th><td>2.844182</td><td>-5.831175</td><td>1.063132</td></tr>
      <tr><th>3</th><td>1.757856</td><td>-6.385404</td><td>0.9616153</td></tr>
      <tr><th>4</th><td>1.635945</td><td>-6.382954</td><td>0.9620203</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 58-59

Merge the input and output samples into a single sample.

.. GENERATED FROM PYTHON SOURCE LINES 61-65

.. code-block:: Python

    sample = ot.Sample(inputSample)
    sample.stack(outputSample)
    sample[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>Q (m3/s)</th><th>Ks</th><th>Zv (m)</th><th>Zm (m)</th><th>B (m)</th><th>L (m)</th><th>Zb (m)</th><th>Hd (m)</th><th>H</th><th>S</th><th>C</th></tr>
      <tr><th>0</th><td>753.7666</td><td>29.19004</td><td>49.05922</td><td>54.74766</td><td>302.4613</td><td>5006.225</td><td>55.59275</td><td>2.8639</td><td>1.746443</td><td>-7.650989</td><td>0.8024835</td></tr>
      <tr><th>1</th><td>2050.695</td><td>22.50667</td><td>50.38535</td><td>55.07833</td><td>300.7663</td><td>5001.023</td><td>55.61731</td><td>3.34262</td><td>3.954572</td><td>-4.620012</td><td>1.31091</td></tr>
      <tr><th>2</th><td>1115.475</td><td>19.46573</td><td>49.61468</td><td>55.12172</td><td>302.5566</td><td>5004.309</td><td>55.04336</td><td>3.246678</td><td>2.844182</td><td>-5.831175</td><td>1.063132</td></tr>
      <tr><th>3</th><td>1003.573</td><td>44.59546</td><td>50.74211</td><td>54.94174</td><td>303.2857</td><td>5000.459</td><td>55.50133</td><td>3.384042</td><td>1.757856</td><td>-6.385404</td><td>0.9616153</td></tr>
      <tr><th>4</th><td>813.6209</td><td>35.84679</td><td>49.40137</td><td>54.99896</td><td>298.7565</td><td>5003.277</td><td>55.32127</td><td>2.098999</td><td>1.635945</td><td>-6.382954</td><td>0.9620203</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 66-68

Extract the first column of `inputSample` into the sample of the flowrates
:math:`Q`.

.. GENERATED FROM PYTHON SOURCE LINES 70-72

.. code-block:: Python

    sampleQ = inputSample[:, 0]








.. GENERATED FROM PYTHON SOURCE LINES 73-76

The next cell defines a function that computes the conditional sample of
a component given that the a marginal (defined by its index `criteriaComponent`)
exceeds a given threshold, defined by its quantile level.

.. GENERATED FROM PYTHON SOURCE LINES 76-98

.. code-block:: Python



    def computeConditionnedSample(
        sample, alpha=0.9, criteriaComponent=None, selectedComponent=0
    ):
        """
        Return values from the selectedComponent-th component of the sample.
        Selects the values according to the alpha-level quantile of
        the criteriaComponent-th component of the sample.
        """
        dim = sample.getDimension()
        if criteriaComponent is None:
            criteriaComponent = dim - 1
        sortedSample = sample.sortAccordingToAComponent(criteriaComponent)
        quantiles = sortedSample.computeQuantilePerComponent(alpha)
        quantileValue = quantiles[criteriaComponent]
        sortedSampleCriteria = sortedSample[:, criteriaComponent]
        indices = np.where(np.array(sortedSampleCriteria.asPoint()) > quantileValue)[0]
        conditionnedSortedSample = sortedSample[int(indices[0]) :, selectedComponent]
        return conditionnedSortedSample









.. GENERATED FROM PYTHON SOURCE LINES 99-100

Create an histogram for the unconditional flowrates.

.. GENERATED FROM PYTHON SOURCE LINES 102-105

.. code-block:: Python

    numberOfBins = 10
    histogram = ot.HistogramFactory().buildAsHistogram(sampleQ, numberOfBins)








.. GENERATED FROM PYTHON SOURCE LINES 106-107

Extract the sub-sample of the input flowrates `Q` which leads to large values of the output `S`.

.. GENERATED FROM PYTHON SOURCE LINES 109-110

Search the index of the marginal `S` in the columns of the sample.

.. GENERATED FROM PYTHON SOURCE LINES 110-113

.. code-block:: Python

    criteriaComponent = list(sample.getDescription()).index("S")
    criteriaComponent





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    9



.. GENERATED FROM PYTHON SOURCE LINES 114-120

.. code-block:: Python

    alpha = 0.9
    selectedComponent = 0
    conditionnedSampleQ = computeConditionnedSample(
        sample, alpha, criteriaComponent, selectedComponent
    )








.. GENERATED FROM PYTHON SOURCE LINES 121-131

We could as well use:

.. code-block::

    # conditionnedHistogram = ot.HistogramFactory().buildAsHistogram(conditionnedSampleQ)

but this creates an histogram with new classes, corresponding
to `conditionnedSampleQ`.
We want to use exactly the same classes as the full sample,
so that the two histograms match.

.. GENERATED FROM PYTHON SOURCE LINES 133-139

.. code-block:: Python

    first = histogram.getFirst()
    width = histogram.getWidth()
    conditionnedHistogram = ot.HistogramFactory().buildAsHistogram(
        conditionnedSampleQ, first, width
    )








.. GENERATED FROM PYTHON SOURCE LINES 140-141

Then creates a graphics with the unconditional and the conditional histograms.

.. GENERATED FROM PYTHON SOURCE LINES 143-152

.. code-block:: Python

    graph = histogram.drawPDF()
    graph.setLegends(["Q"])
    #
    graphConditionnalQ = conditionnedHistogram.drawPDF()
    graphConditionnalQ.setLegends([r"$Q | S > S_{%s}$" % (alpha)])
    graph.add(graphConditionnalQ)
    view = viewer.View(graph)





.. image-sg:: /auto_data_analysis/sample_analysis/images/sphx_glr_plot_compare_unconditional_conditional_histograms_001.png
   :alt: Q (m3/s) PDF
   :srcset: /auto_data_analysis/sample_analysis/images/sphx_glr_plot_compare_unconditional_conditional_histograms_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 153-154

Show all the graphs.

.. GENERATED FROM PYTHON SOURCE LINES 154-156

.. code-block:: Python

    view.ShowAll()








.. GENERATED FROM PYTHON SOURCE LINES 157-165

We see that the two histograms are very different.
The high values of the input :math:`Q` seem to often lead to a high value of the output :math:`S`.

We could explore this situation further by comparing the unconditional
distribution of :math:`Q` (which is known in this case) with the conditonal
distribution of :math:`Q | S > t`, estimated by kernel smoothing.
This would have the advantage of accuracy, since the kernel smoothing is a
more accurate approximation of a distribution than the histogram.


.. _sphx_glr_download_auto_data_analysis_sample_analysis_plot_compare_unconditional_conditional_histograms.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_compare_unconditional_conditional_histograms.ipynb <plot_compare_unconditional_conditional_histograms.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_compare_unconditional_conditional_histograms.py <plot_compare_unconditional_conditional_histograms.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_compare_unconditional_conditional_histograms.zip <plot_compare_unconditional_conditional_histograms.zip>`
