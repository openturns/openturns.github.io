
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/manage_data_and_samples/plot_quick_start_point_and_sample.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_data_analysis_manage_data_and_samples_plot_quick_start_point_and_sample.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_manage_data_and_samples_plot_quick_start_point_and_sample.py:


A quick start guide to the `Point` and `Sample` classes
=======================================================

.. GENERATED FROM PYTHON SOURCE LINES 6-10

Abstract
--------

In this example, we present the `Point` and `Sample` classes, two fundamental objects in the library. We present the principles behind these classes and the way to create and use these objects. We show how to extract a row or a column with the slicing operator. We show how these objects interacts with Python variables and with the `numpy` module.

.. GENERATED FROM PYTHON SOURCE LINES 12-20

Introduction
------------

Two fundamental objects in the library are:

* `Point`: a multidimensional point in :math:`D` dimensions (:math:`\in \mathbb{R}^D`) ;
* `Sample`: a multivariate sample made of :math:`N` points in :math:`D` dimensions.


.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default

    import openturns as ot
    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 26-35

The `Point` class
-----------------

In this section, we see how to: 

* create a point in :math:`\mathbb{R}^3`, 
* access its components, 
* update its components.


.. GENERATED FROM PYTHON SOURCE LINES 37-38

By default, points are filled with zeros. 

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    p = ot.Point(3)
    p






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[0,0,0]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-45

The following statement returns the value of the second component (with index 1). Python beginners should remember that Python indices start at zero. 

.. GENERATED FROM PYTHON SOURCE LINES 47-49

.. code-block:: default

    p[1]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    0.0



.. GENERATED FROM PYTHON SOURCE LINES 50-51

The following statements sets the second component. 

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default

    p[1] = 2
    p






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[0,2,0]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 57-59

.. code-block:: default

    p.getDimension()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    3



.. GENERATED FROM PYTHON SOURCE LINES 60-72

The `Sample` class
------------------

The `Sample` class represents a multivariate sample made of :math:`N` points in :math:`\mathbb{R}^D`.

* :math:`D` is the *dimension* of the sample, 
* :math:`N` is the *size* of the sample. 


A `Sample` can be seen as an array of with :math:`N` rows and :math:`D` columns.

*Remark.* The `ProcessSample` class can be used to manage a sample of stochastic processes. 

.. GENERATED FROM PYTHON SOURCE LINES 74-75

The script below creates a `Sample` with size :math:`N=5` and dimension :math:`D=3`.

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: default

    data = ot.Sample(5, 3)
    data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>v0</TH><TH>v1</TH><TH>v2</TH></TR>
    <TR><TH>0</TH><TD>0</TD><TD>0</TD><TD>0</TD></TR>
    <TR><TH>1</TH><TD>0</TD><TD>0</TD><TD>0</TD></TR>
    <TR><TH>2</TH><TD>0</TD><TD>0</TD><TD>0</TD></TR>
    <TR><TH>3</TH><TD>0</TD><TD>0</TD><TD>0</TD></TR>
    <TR><TH>4</TH><TD>0</TD><TD>0</TD><TD>0</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 81-83

.. code-block:: default

    data.getSize()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    5



.. GENERATED FROM PYTHON SOURCE LINES 84-86

.. code-block:: default

    data.getDimension()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    3



.. GENERATED FROM PYTHON SOURCE LINES 87-88

The following statement sets the third component (with index 2) of the fourth point (with index 3) in the `Sample`.

.. GENERATED FROM PYTHON SOURCE LINES 90-93

.. code-block:: default

    data [3, 2] = 32
    data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>v0</TH><TH>v1</TH><TH>v2</TH></TR>
    <TR><TH>0</TH><TD>0</TD><TD>0</TD><TD>0</TD></TR>
    <TR><TH>1</TH><TD>0</TD><TD>0</TD><TD>0</TD></TR>
    <TR><TH>2</TH><TD>0</TD><TD>0</TD><TD>0</TD></TR>
    <TR><TH>3</TH><TD>0</TD><TD>0</TD><TD>32</TD></TR>
    <TR><TH>4</TH><TD>0</TD><TD>0</TD><TD>0</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 94-98

Get a row or a column of a `Sample`
-----------------------------------

As with `numpy` arrays, we can extract a row or a column with the `:` slicing operator. As a reminder for Python beginners, *slicing* is the fact of extracting a part of an array with one single statement; this avoids `for` loops and improves performance and readability. 

.. GENERATED FROM PYTHON SOURCE LINES 100-103

.. code-block:: default

    row = data [3, :]
    row






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[0,0,32]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 104-106

.. code-block:: default

    type ( row )








.. GENERATED FROM PYTHON SOURCE LINES 107-110

.. code-block:: default

    column = data [:, 2]
    column






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>v2</TH></TR>
    <TR><TH>0</TH><TD>0</TD></TR>
    <TR><TH>1</TH><TD>0</TD></TR>
    <TR><TH>2</TH><TD>0</TD></TR>
    <TR><TH>3</TH><TD>32</TD></TR>
    <TR><TH>4</TH><TD>0</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 111-113

.. code-block:: default

    type ( column )








.. GENERATED FROM PYTHON SOURCE LINES 114-120

We see that:

* the `row` is a `Point`,
* the `column` is a `Sample`.

This is consistent with the fact that, in a dimension :math:`D` `Sample`, a row is a :math:`D`-dimensional `Point`.

.. GENERATED FROM PYTHON SOURCE LINES 122-123

The following statement extracts several columns (with indices 0 and 2) and creates a new `Sample`. 

.. GENERATED FROM PYTHON SOURCE LINES 125-127

.. code-block:: default

    data.getMarginal([0 , 2])






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>v0</TH><TH>v1</TH></TR>
    <TR><TH>0</TH><TD>0</TD><TD>0</TD></TR>
    <TR><TH>1</TH><TD>0</TD><TD>0</TD></TR>
    <TR><TH>2</TH><TD>0</TD><TD>0</TD></TR>
    <TR><TH>3</TH><TD>0</TD><TD>32</TD></TR>
    <TR><TH>4</TH><TD>0</TD><TD>0</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 128-132

Create a `Point` or a `Sample` from a Python list
-------------------------------------------------

The following statement creates a `Point` from a Python list.

.. GENERATED FROM PYTHON SOURCE LINES 134-137

.. code-block:: default

    p1 = ot.Point([2 , 3])
    p1






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[2,3]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 138-141

.. code-block:: default

    p2 = ot.Point(range(2))
    p2






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[0,1]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 142-145

The first useful *Pythonism* that we will review is the *list comprehension*. This creates a list from a `for` loop. This kind of statements is often used in the the examples, so that they can be as short as possible.

In the following statement, we create a point by iterating over the components of a `Point`. 

.. GENERATED FROM PYTHON SOURCE LINES 147-150

.. code-block:: default

    p3 = ot.Point([i*i for i in p1])
    p3






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[4,9]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 151-154

The second useful *Pythonism* is the repetition with the `*` operator.

The following statements creates a list with three 5s. 

.. GENERATED FROM PYTHON SOURCE LINES 156-159

.. code-block:: default

    p4 = [5] * 3
    p4





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [5, 5, 5]



.. GENERATED FROM PYTHON SOURCE LINES 160-161

We can also create a `Sample` from a list of `Point`.

.. GENERATED FROM PYTHON SOURCE LINES 163-166

.. code-block:: default

    sample = ot.Sample ([p1 , p2 , p3 ])
    sample






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>v0</TH><TH>v1</TH></TR>
    <TR><TH>0</TH><TD>2</TD><TD>3</TD></TR>
    <TR><TH>1</TH><TD>0</TD><TD>1</TD></TR>
    <TR><TH>2</TH><TD>4</TD><TD>9</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 167-168

We can loop over the points in a sample, using a list comprehension. In the following example, we compute the Euclidian norm of the points in the previous sample. 

.. GENERATED FROM PYTHON SOURCE LINES 170-172

.. code-block:: default

    [point.norm() for point in sample]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [3.6055512754639896, 1.0, 9.848857801796104]



.. GENERATED FROM PYTHON SOURCE LINES 173-174

We can also create a `Sample` based on a `Point`, repeated three times.

.. GENERATED FROM PYTHON SOURCE LINES 176-179

.. code-block:: default

    sample = ot.Sample ([p4] * 3)
    sample






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>v0</TH><TH>v1</TH><TH>v2</TH></TR>
    <TR><TH>0</TH><TD>5</TD><TD>5</TD><TD>5</TD></TR>
    <TR><TH>1</TH><TD>5</TD><TD>5</TD><TD>5</TD></TR>
    <TR><TH>2</TH><TD>5</TD><TD>5</TD><TD>5</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 180-181

A nested list of floats is the easiest way to create a non-trivial `Sample`.

.. GENERATED FROM PYTHON SOURCE LINES 183-186

.. code-block:: default

    sample = ot.Sample ([[0 , 1], [2, 3], [4, 5]])
    sample






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>v0</TH><TH>v1</TH></TR>
    <TR><TH>0</TH><TD>0</TD><TD>1</TD></TR>
    <TR><TH>1</TH><TD>2</TD><TD>3</TD></TR>
    <TR><TH>2</TH><TD>4</TD><TD>5</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 187-191

Interactions with Numpy
-----------------------

The Python classes defined in Python modules are unknown to OpenTURNS and hence cannot be used by the library. This is why it is useful to know how to convert to and from more basic Python variable types, especially Numpy arrays.

.. GENERATED FROM PYTHON SOURCE LINES 193-194

The following statement creates a `Sample` and converts it into a bidimensional Numpy `array`.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

.. code-block:: default

    import numpy as np
    sample = ot.Sample (5, 3)
    array = np.array (sample)
    array





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[0., 0., 0.],
           [0., 0., 0.],
           [0., 0., 0.],
           [0., 0., 0.],
           [0., 0., 0.]])



.. GENERATED FROM PYTHON SOURCE LINES 202-204

.. code-block:: default

    type(array)








.. GENERATED FROM PYTHON SOURCE LINES 205-206

Conversely, the following script creates a Numpy `array`, then converts it into a `Sample`.

.. GENERATED FROM PYTHON SOURCE LINES 208-212

.. code-block:: default

    array = 3.14 * np.ones((5 , 3))
    sample = ot.Sample ( array )
    sample






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>v0</TH><TH>v1</TH><TH>v2</TH></TR>
    <TR><TH>0</TH><TD>3.14</TD><TD>3.14</TD><TD>3.14</TD></TR>
    <TR><TH>1</TH><TD>3.14</TD><TD>3.14</TD><TD>3.14</TD></TR>
    <TR><TH>2</TH><TD>3.14</TD><TD>3.14</TD><TD>3.14</TD></TR>
    <TR><TH>3</TH><TD>3.14</TD><TD>3.14</TD><TD>3.14</TD></TR>
    <TR><TH>4</TH><TD>3.14</TD><TD>3.14</TD><TD>3.14</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 213-215

.. code-block:: default

    sample.getSize()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    5



.. GENERATED FROM PYTHON SOURCE LINES 216-218

.. code-block:: default

    sample.getDimension()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    3



.. GENERATED FROM PYTHON SOURCE LINES 219-229

There is an ambiguous situation: a `Sample` based on several scalar values. 

For example, is a `Sample` based on 5 values:

* a `Sample` with size 5 in 1 dimension or
* a `Sample` with size 1 in 5 dimensions?

In order to solve the case, we can use the second input argument of the `Sample` constructor, which specifies the dimension.

The following statement creates an array containing 5 values from 0 to 1.

.. GENERATED FROM PYTHON SOURCE LINES 231-234

.. code-block:: default

    u = np.linspace (0, 1, 5)
    u





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([0.  , 0.25, 0.5 , 0.75, 1.  ])



.. GENERATED FROM PYTHON SOURCE LINES 235-236

Choice A: we create a `Sample` with size 5 in 1 dimension.

.. GENERATED FROM PYTHON SOURCE LINES 238-241

.. code-block:: default

    sample = ot.Sample ([[ui] for ui in u])
    sample






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>v0</TH></TR>
    <TR><TH>0</TH><TD>0</TD></TR>
    <TR><TH>1</TH><TD>0.25</TD></TR>
    <TR><TH>2</TH><TD>0.5</TD></TR>
    <TR><TH>3</TH><TD>0.75</TD></TR>
    <TR><TH>4</TH><TD>1</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 242-243

Choice B: we create a `Sample` with size 1 in 5 dimensions.

.. GENERATED FROM PYTHON SOURCE LINES 245-248

.. code-block:: default

    sample = ot.Sample ([u[i:i+5] for i in range(len(u)//5)])
    sample






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>v0</TH><TH>v1</TH><TH>v2</TH><TH>v3</TH><TH>v4</TH></TR>
    <TR><TH>0</TH><TD>0</TD><TD>0.25</TD><TD>0.5</TD><TD>0.75</TD><TD>1</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 249-251

If we do not set the optional `size` parameter, the library cannot solve the case and an InvalidArgumentException is generated.


.. GENERATED FROM PYTHON SOURCE LINES 253-256

Generates an expected exception
TypeError: InvalidArgumentException : Invalid array dimension: 1
sample = ot.Sample (u)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.011 seconds)


.. _sphx_glr_download_auto_data_analysis_manage_data_and_samples_plot_quick_start_point_and_sample.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_quick_start_point_and_sample.py <plot_quick_start_point_and_sample.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_quick_start_point_and_sample.ipynb <plot_quick_start_point_and_sample.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
