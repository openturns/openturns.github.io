
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/manage_data_and_samples/plot_sample_manipulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_data_analysis_manage_data_and_samples_plot_sample_manipulation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_manage_data_and_samples_plot_sample_manipulation.py:


Sample manipulation
===================

.. GENERATED FROM PYTHON SOURCE LINES 6-7

This example will describe the main statistical functionalities on data through the Sample object. The Sample is an output variable of interest.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

.. code-block:: default

    import openturns as ot
    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 13-15

A typical example
-----------------

.. GENERATED FROM PYTHON SOURCE LINES 17-20

A recurring issue in uncertainty quantification is to perform analysis on an output variable of interest Y obtained through a model `f` and input parameters `X`.
Here we shall consider the input parameters as two independent standard normal distributions :math:`X=(X_1, X_2)`. We therefore use an `IndependentCopula` to describe the link between the two marginals.


.. GENERATED FROM PYTHON SOURCE LINES 20-25

.. code-block:: default


    # input parameters
    inputDist = ot.ComposedDistribution([ot.Normal()] * 2, ot.IndependentCopula(2))
    inputDist.setDescription(['X1', 'X2'])








.. GENERATED FROM PYTHON SOURCE LINES 26-27

We create a vector from the 2D-distribution created before :

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default

    inputVector = ot.RandomVector(inputDist)









.. GENERATED FROM PYTHON SOURCE LINES 33-42

Suppose our model `f` is known and reads as :

.. math::
   f(X) = \begin{pmatrix}
            x_1^2 + x_2 \\
            x_1   + x_2^2
          \end{pmatrix}

We define our model `f` with a `SymbolicFunction`

.. GENERATED FROM PYTHON SOURCE LINES 44-46

.. code-block:: default

    f = ot.SymbolicFunction(["x1", "x2"], ["x1^2+x2", "x2^2+x1"])








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Our output vector is Y=f(X), the image of the inputVector by the model

.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: default

    outputVector = ot.CompositeRandomVector(f, inputVector)








.. GENERATED FROM PYTHON SOURCE LINES 51-52

We can now get a sample out of Y, that is realizations (here 1000) of the random outputVector

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default

    size = 1000
    sample = outputVector.getSample(size)








.. GENERATED FROM PYTHON SOURCE LINES 56-57

The `sample` may be seen as a matrix of size :math:`1000 \times 2`. We print the 5 first samples (out of 1000) :

.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: default

    sample[:5]







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>y0</TH><TH>y1</TH></TR>
    <TR><TH>0</TH><TD>1.002228</TD><TD>1.122468</TD></TR>
    <TR><TH>1</TH><TD>2.982256</TD><TD>-1.643145</TD></TR>
    <TR><TH>2</TH><TD>-0.2918633</TD><TD>2.278239</TD></TR>
    <TR><TH>3</TH><TD>-0.3874231</TD><TD>0.009052058</TD></TR>
    <TR><TH>4</TH><TD>1.351702</TD><TD>-1.126908</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 63-69

Basic operations on samples
---------------------------
We have access to basic information about a sample such as

- minimum and maximum per component


.. GENERATED FROM PYTHON SOURCE LINES 69-71

.. code-block:: default

    sample.getMin(), sample.getMax()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (class=Point name=Unnamed dimension=2 values=[-2.56587,-2.84726], class=Point name=Unnamed dimension=2 values=[9.93535,12.1777])



.. GENERATED FROM PYTHON SOURCE LINES 72-74

- the range per component (max-min)


.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: default

    sample.computeRange()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[12.5012,15.025]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 77-79

More elaborate functionalities are also available :


.. GENERATED FROM PYTHON SOURCE LINES 81-83

- get the median per component


.. GENERATED FROM PYTHON SOURCE LINES 83-85

.. code-block:: default

    sample.computeMedian()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[0.68633,0.879481]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 86-88

- compute the covariance


.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    sample.computeCovariance()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[  2.56005   -0.0561621 ]<br>
     [ -0.0561621  3.30845   ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 91-93

- get the empirical 0.95 quantile per component


.. GENERATED FROM PYTHON SOURCE LINES 93-95

.. code-block:: default

    sample.computeQuantilePerComponent(0.95)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[3.63824,4.13131]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 96-98

- get the value of the empirical CDF at a point


.. GENERATED FROM PYTHON SOURCE LINES 98-102

.. code-block:: default

    point = [1.1, 2.2]
    sample.computeEmpiricalCDF(point)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.517



.. GENERATED FROM PYTHON SOURCE LINES 103-105

Estimate the statistical moments
--------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 107-108

Oftentimes, we need to estimate the first moments of the output data. We can then estimate statistical moments from the output sample :

.. GENERATED FROM PYTHON SOURCE LINES 110-112

- estimate the moment of order 1 : mean


.. GENERATED FROM PYTHON SOURCE LINES 112-114

.. code-block:: default

    sample.computeMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[0.903865,1.15424]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 115-117

- estimate the standard deviation for each component


.. GENERATED FROM PYTHON SOURCE LINES 117-119

.. code-block:: default

    sample.computeStandardDeviation()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[1.60001,1.81891]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 120-122

- estimate the moment of order 2 : variance


.. GENERATED FROM PYTHON SOURCE LINES 122-124

.. code-block:: default

    sample.computeVariance()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[2.56005,3.30845]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 125-127

- estimate the moment of order 3 : skewness


.. GENERATED FROM PYTHON SOURCE LINES 127-129

.. code-block:: default

    sample.computeSkewness()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[1.28143,1.80235]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 130-132

- estimate the moment of order 4 : kurtosis


.. GENERATED FROM PYTHON SOURCE LINES 132-134

.. code-block:: default

    sample.computeKurtosis()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[6.47685,9.56975]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 135-137

Test the correlation
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 139-143

Some statistical test for correlation are available :

- get the sample Pearson correlation matrix :


.. GENERATED FROM PYTHON SOURCE LINES 143-145

.. code-block:: default

    sample.computePearsonCorrelation()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[  1         -0.0192978 ]<br>
     [ -0.0192978  1         ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 146-148

- get  the sample Kendall correlation matrix :


.. GENERATED FROM PYTHON SOURCE LINES 148-150

.. code-block:: default

    sample.computeKendallTau()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ 1         0.0250531 ]<br>
     [ 0.0250531 1         ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 151-153

- get  the sample Spearman correlation matrix :


.. GENERATED FROM PYTHON SOURCE LINES 153-154

.. code-block:: default

    sample.computeSpearmanCorrelation()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ 1         0.0291728 ]<br>
     [ 0.0291728 1         ]]</p>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.007 seconds)


.. _sphx_glr_download_auto_data_analysis_manage_data_and_samples_plot_sample_manipulation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sample_manipulation.py <plot_sample_manipulation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sample_manipulation.ipynb <plot_sample_manipulation.ipynb>`
