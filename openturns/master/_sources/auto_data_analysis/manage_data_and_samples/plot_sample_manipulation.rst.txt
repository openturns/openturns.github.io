
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/manage_data_and_samples/plot_sample_manipulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_data_analysis_manage_data_and_samples_plot_sample_manipulation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_manage_data_and_samples_plot_sample_manipulation.py:


Sample manipulation
===================

.. GENERATED FROM PYTHON SOURCE LINES 6-7

This example will describe the main statistical functionalities on data through the :class:`~openturns.Sample` object. The Sample is an output variable of interest.

.. GENERATED FROM PYTHON SOURCE LINES 9-13

.. code-block:: Python

    import openturns as ot

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 14-16

A typical example
-----------------

.. GENERATED FROM PYTHON SOURCE LINES 18-22

A recurring issue in uncertainty quantification is to perform analysis on an output variable of interest `Y` obtained through a model `f` and input parameters `X`.
Here we shall consider the input parameters as two independent standard Normal distributions :math:`X=(X_1, X_2)`.
We therefore use an :class:`~openturns.IndependentCopula` to describe the link between the two marginals.


.. GENERATED FROM PYTHON SOURCE LINES 22-27

.. code-block:: Python


    # input parameters
    inputDist = ot.JointDistribution([ot.Normal()] * 2, ot.IndependentCopula(2))
    inputDist.setDescription(["X1", "X2"])








.. GENERATED FROM PYTHON SOURCE LINES 28-29

We create a vector from the 2d-distribution created before :

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: Python

    inputVector = ot.RandomVector(inputDist)









.. GENERATED FROM PYTHON SOURCE LINES 35-44

Suppose our model `f` is known and reads as :

.. math::
   f(x) = \begin{pmatrix}
            x_1^2 + x_2 \\
            x_1   + x_2^2
          \end{pmatrix}

We define our model `f` with a :class:`~openturns.SymbolicFunction`

.. GENERATED FROM PYTHON SOURCE LINES 46-48

.. code-block:: Python

    f = ot.SymbolicFunction(["x1", "x2"], ["x1^2+x2", "x2^2+x1"])








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Our output vector is :math:`Y = f(X)`, the image of the inputVector by the model

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: Python

    outputVector = ot.CompositeRandomVector(f, inputVector)








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We can now get a sample out of `Y`, that is realizations (here 1000) of the random outputVector

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: Python

    size = 1000
    sample = outputVector.getSample(size)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

The sample may be seen as a matrix of size :math:`1000 \times 2`. We print the 5 first samples (out of 1000) :

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: Python

    sample[:5]







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>y0</th><th>y1</th></tr>
      <tr><th>0</th><td>1.002228</td><td>1.122468</td></tr>
      <tr><th>1</th><td>2.982256</td><td>-1.643145</td></tr>
      <tr><th>2</th><td>-0.2918633</td><td>2.278239</td></tr>
      <tr><th>3</th><td>-0.3874231</td><td>0.009052058</td></tr>
      <tr><th>4</th><td>1.351702</td><td>-1.126908</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 65-71

Basic operations on samples
---------------------------
We have access to basic information about a sample such as

- minimum and maximum per component


.. GENERATED FROM PYTHON SOURCE LINES 71-73

.. code-block:: Python

    sample.getMin(), sample.getMax()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (class=Point name=Unnamed dimension=2 values=[-2.56587,-2.84726], class=Point name=Unnamed dimension=2 values=[9.93535,12.1777])



.. GENERATED FROM PYTHON SOURCE LINES 74-76

- the range per component (max-min)


.. GENERATED FROM PYTHON SOURCE LINES 76-78

.. code-block:: Python

    sample.computeRange()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[12.5012,15.025]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 79-81

More elaborate functionalities are also available :


.. GENERATED FROM PYTHON SOURCE LINES 83-85

- get the median per component


.. GENERATED FROM PYTHON SOURCE LINES 85-87

.. code-block:: Python

    sample.computeMedian()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[0.68633,0.879481]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 88-90

- compute the covariance


.. GENERATED FROM PYTHON SOURCE LINES 90-92

.. code-block:: Python

    sample.computeCovariance()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[  2.56005   -0.0561621 ]<br>
     [ -0.0561621  3.30845   ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 93-95

- get the empirical 0.95 quantile per component


.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: Python

    sample.computeQuantilePerComponent(0.95)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[3.63824,4.13131]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 98-100

- get the value of the empirical CDF at a point


.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: Python

    point = [1.1, 2.2]
    sample.computeEmpiricalCDF(point)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.517



.. GENERATED FROM PYTHON SOURCE LINES 105-107

Estimate the statistical moments
--------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 109-110

Oftentimes, we need to estimate the first moments of the output data. We can then estimate statistical moments from the output sample :

.. GENERATED FROM PYTHON SOURCE LINES 112-114

- estimate the moment of order 1 : mean


.. GENERATED FROM PYTHON SOURCE LINES 114-116

.. code-block:: Python

    sample.computeMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[0.903865,1.15424]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 117-119

- estimate the standard deviation for each component


.. GENERATED FROM PYTHON SOURCE LINES 119-121

.. code-block:: Python

    sample.computeStandardDeviation()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[1.60001,1.81891]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 122-124

- estimate the moment of order 2 : variance


.. GENERATED FROM PYTHON SOURCE LINES 124-126

.. code-block:: Python

    sample.computeVariance()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[2.56005,3.30845]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 127-129

- estimate the moment of order 3 : skewness


.. GENERATED FROM PYTHON SOURCE LINES 129-131

.. code-block:: Python

    sample.computeSkewness()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[1.28143,1.80235]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 132-134

- estimate the moment of order 4 : kurtosis


.. GENERATED FROM PYTHON SOURCE LINES 134-136

.. code-block:: Python

    sample.computeKurtosis()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[6.47685,9.56975]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 137-139

Test the correlation
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 141-145

Some statistical test for correlation are available :

- get the sample linear correlation matrix :


.. GENERATED FROM PYTHON SOURCE LINES 145-147

.. code-block:: Python

    sample.computeLinearCorrelation()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[  1         -0.0192978 ]<br>
     [ -0.0192978  1         ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 148-150

- get  the sample Kendall correlation matrix :


.. GENERATED FROM PYTHON SOURCE LINES 150-152

.. code-block:: Python

    sample.computeKendallTau()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ 1         0.0250531 ]<br>
     [ 0.0250531 1         ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 153-155

- get  the sample Spearman correlation matrix :


.. GENERATED FROM PYTHON SOURCE LINES 155-156

.. code-block:: Python

    sample.computeSpearmanCorrelation()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ 1         0.0291728 ]<br>
     [ 0.0291728 1         ]]</p>
    </div>
    <br />
    <br />


.. _sphx_glr_download_auto_data_analysis_manage_data_and_samples_plot_sample_manipulation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sample_manipulation.ipynb <plot_sample_manipulation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sample_manipulation.py <plot_sample_manipulation.py>`
