
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/estimate_stochastic_processes/plot_estimate_multivariate_arma.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_data_analysis_estimate_stochastic_processes_plot_estimate_multivariate_arma.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_estimate_stochastic_processes_plot_estimate_multivariate_arma.py:


Estimate a multivariate ARMA process
====================================

.. GENERATED FROM PYTHON SOURCE LINES 6-32

The objective of the Use Case is to estimate a multivariate ARMA model
from a stationary time series using the maximum likelihood estimator
and a centered normal white noise.
The data can be a unique time series or several time series collected
in a process sample.

We estimate :math:`(\underline{\beta}, \sigma^2)` thanks to the
*ARMALikelihoodFactory* object and its method *build*, acting on a
time series or on a sample of time series. It produces a result of
type *ARMA*.
Note that no evaluation of selection criteria such as *AIC* and *BIC*
is done.

The synthetic data is generated from the 2-d ARMA model:

.. math::
   \begin{aligned}
   X_{0,t} - 0.5 X_{0,t-1} - 0.1 X_{1,t-1} = E_{0,t} - 0.4 E_{0,t-1} \\
   X_{1,t} - 0.4 X_{0,t-1} - 0.5 X_{1,t-1} - 0.25 X_{0,t-2} = E_{1,t} - 0.4 E_{1,t-1}
   \end{aligned}

with E the white noise:

.. math::
    E \sim \mathcal{N} ([0,0], [0.1,0.2])


.. GENERATED FROM PYTHON SOURCE LINES 34-38

.. code-block:: default

    import openturns as ot

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Create a 2-d ARMA process

.. GENERATED FROM PYTHON SOURCE LINES 40-65

.. code-block:: default

    p = 2
    q = 1
    dim = 2

    # Tmin , Tmax and N points for TimeGrid
    dt = 1.0
    size = 400
    timeGrid = ot.RegularGrid(0.0, dt, size)

    # white noise
    cov = ot.CovarianceMatrix([[0.1, 0.0], [0.0, 0.2]])
    whiteNoise = ot.WhiteNoise(ot.Normal([0.0] * dim, cov), timeGrid)

    # AR/MA coefficients
    ar = ot.ARMACoefficients(p, dim)
    ar[0] = ot.SquareMatrix([[-0.5, -0.1], [-0.4, -0.5]])
    ar[1] = ot.SquareMatrix([[0.0, 0.0], [-0.25, 0.0]])

    ma = ot.ARMACoefficients(q, dim)
    ma[0] = ot.SquareMatrix([[-0.4, 0.0], [0.0, -0.4]])

    # ARMA model creation
    arma = ot.ARMA(ar, ma, whiteNoise)
    arma






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>ARMA(X_{0,t} - 0.5 X_{0,t-1} - 0.1 X_{1,t-1} = E_{0,t} - 0.4 E_{0,t-1}<br>
    X_{1,t} - 0.4 X_{0,t-1} - 0.5 X_{1,t-1} - 0.25 X_{0,t-2} = E_{1,t} - 0.4 E_{1,t-1}, E_t ~ Normal(mu = [0,0], sigma = [0.316228,0.447214], R = [[ 1 0 ]<br>
     [ 0 1 ]]))</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 66-67

Create a realization

.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: default

    timeSeries = ot.TimeSeries(arma.getRealization())








.. GENERATED FROM PYTHON SOURCE LINES 70-71

Estimate the process from the previous realization

.. GENERATED FROM PYTHON SOURCE LINES 71-76

.. code-block:: default

    factory = ot.ARMALikelihoodFactory(p, q, dim)
    factory.setInitialConditions(ar, ma, cov)

    arma_est = ot.ARMA(factory.build(timeSeries))
    print("Estimated ARMA= ", arma_est)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Estimated ARMA=  ARMA(X_{0,t} - 0.569075 X_{0,t-1} - 0.0830863 X_{1,t-1} + 0.0484535 X_{0,t-2} - 0.0134206 X_{1,t-2} = E_{0,t} - 0.439627 E_{0,t-1} + 0.000407762 E_{1,t-1}
    X_{1,t} - 0.318744 X_{0,t-1} - 0.703806 X_{1,t-1} - 0.226402 X_{0,t-2} + 0.0607903 X_{1,t-2} = E_{1,t} + 0.0230344 E_{0,t-1} - 0.560084 E_{1,t-1}, E_t ~ Normal(mu = [0,0], sigma = [0.311067,0.437904], R = [[  1        -0.026726 ]
     [ -0.026726  1        ]]))





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.737 seconds)


.. _sphx_glr_download_auto_data_analysis_estimate_stochastic_processes_plot_estimate_multivariate_arma.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_estimate_multivariate_arma.py <plot_estimate_multivariate_arma.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_estimate_multivariate_arma.ipynb <plot_estimate_multivariate_arma.ipynb>`
