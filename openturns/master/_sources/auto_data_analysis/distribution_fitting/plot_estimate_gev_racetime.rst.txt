
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/distribution_fitting/plot_estimate_gev_racetime.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_data_analysis_distribution_fitting_plot_estimate_gev_racetime.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_distribution_fitting_plot_estimate_gev_racetime.py:


Estimate a GEV on the race time data
====================================

.. GENERATED FROM PYTHON SOURCE LINES 6-12

In this example we are going to estimate the parameters of a generalized extreme value distribution
on the women 1500m annual race time data from [coles2001]_ with different methods:

- the maximum likelihood estimation
- the profile likelihood estimation
- the estimation of return level from both maximum likelihood and profile likelihood

.. GENERATED FROM PYTHON SOURCE LINES 14-15

Load the dataset

.. GENERATED FROM PYTHON SOURCE LINES 15-22

.. code-block:: default

    import openturns as ot
    import openturns.viewer as otv
    import openturns.experimental as otexp
    from openturns.usecases import coles
    data = coles.Coles().racetime
    print(data[:5])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        [ Year      Race time ]
    0 : [ 1975       248.72   ]
    1 : [ 1976       236      ]
    2 : [ 1977       242.65   ]
    3 : [ 1978       239.01   ]
    4 : [ 1979       238.2    ]




.. GENERATED FROM PYTHON SOURCE LINES 23-24

Plot the 10 largest sea levels per year

.. GENERATED FROM PYTHON SOURCE LINES 24-32

.. code-block:: default

    graph = ot.Graph('Fastest annual women 1500m race time', 'Year', 'Race time (s)', True, '')
    cloud = ot.Cloud(data)
    cloud.setPointStyle('fcircle')
    # cloud.setPointSize(1.0)
    graph.add(cloud)
    graph.setIntegerXTick(True)
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_racetime_001.png
   :alt: Fastest annual women 1500m race time
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_racetime_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 33-34

Select the race time column, multiply by -1 to transform the min into max

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: default

    sample = -1.0 * data[:, 1]








.. GENERATED FROM PYTHON SOURCE LINES 37-39

Estimate the parameters of the GEV by maximizing the log-likehood
and compute the parameter distribution

.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. code-block:: default

    factory = ot.GeneralizedExtremeValueFactory()
    result1 = factory.buildMethodOfLikelihoodMaximizationEstimator(sample)








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Print the estimated parameter values

.. GENERATED FROM PYTHON SOURCE LINES 44-49

.. code-block:: default

    estimate = result1.getDistribution()
    desc = estimate.getParameterDescription()
    p = estimate.getParameter()
    print(", ".join([f"{param}: {value:.3f}" for param, value in zip(desc, p)]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    mu: -238.480, sigma: 3.790, xi: -0.563




.. GENERATED FROM PYTHON SOURCE LINES 50-51

Validate the inference result thanks to some diagnostic plots

.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: default

    validation = otexp.GeneralizedExtremeValueValidation(result1, sample)
    graph = validation.drawDiagnosticPlot()
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_racetime_002.png
   :alt: , Sample versus model PP-plot, Sample versus model QQ-plot, Return level, Density
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_racetime_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-57

Now estimate the parameters with the profile likelihood

.. GENERATED FROM PYTHON SOURCE LINES 57-59

.. code-block:: default

    result2 = factory.buildMethodOfProfileLikelihoodMaximizationEstimator(sample)








.. GENERATED FROM PYTHON SOURCE LINES 60-61

We can see the confidence interval of :math:`\xi` is a bit smaller with this method

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: default

    result2.setConfidenceLevel(0.95)
    print(result2.getParameterConfidenceInterval())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [-0.851086, -0.309995]




.. GENERATED FROM PYTHON SOURCE LINES 65-66

We can also plot the profile likelihood and the confidence interval

.. GENERATED FROM PYTHON SOURCE LINES 66-68

.. code-block:: default

    view = otv.View(result2.drawProfileLikelihoodFunction())




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_racetime_003.png
   :alt: profile likelihood
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_racetime_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-70

Estimate the 10 and 100 years return levels from the MLE estimator

.. GENERATED FROM PYTHON SOURCE LINES 70-82

.. code-block:: default

    zm10 = factory.buildReturnLevelEstimator(result1, 10.0)
    return_level10 = zm10.getMean()
    print(f"10 years return level={return_level10}")
    return_level_ci10 = zm10.computeBilateralConfidenceInterval(0.95)
    print(f"CI={return_level_ci10}")

    zm100 = factory.buildReturnLevelEstimator(result1, 100.0)
    return_level100 = zm100.getMean()
    print(f"100 years return level={return_level100}")
    return_level_ci100 = zm100.computeBilateralConfidenceInterval(0.95)
    print(f"CI={return_level_ci100}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    10 years return level=[-233.646]
    CI=[-235.399, -231.894]
    100 years return level=[-232.257]
    CI=[-235.59, -228.924]




.. GENERATED FROM PYTHON SOURCE LINES 83-84

Now estimate the 10 years return level with profile likelihood

.. GENERATED FROM PYTHON SOURCE LINES 84-88

.. code-block:: default

    result_rl10_prof = factory.buildReturnLevelProfileLikelihoodEstimator(sample, 10.0)
    zm = result_rl10_prof.getParameter()
    print(f"10 years return level (profile)={zm}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    10 years return level (profile)=-233.76562333516677




.. GENERATED FROM PYTHON SOURCE LINES 89-90

We can see the confidence interval of :math:`z_m` is a bit smaller with this method

.. GENERATED FROM PYTHON SOURCE LINES 90-94

.. code-block:: default

    result_rl10_prof.setConfidenceLevel(0.95)
    return_level_ci10 = result_rl10_prof.getParameterConfidenceInterval()
    print(f"CI={return_level_ci10}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    CI=[-234.877, -232.213]




.. GENERATED FROM PYTHON SOURCE LINES 95-96

We can also plot the profile likelihood and the confidence interval

.. GENERATED FROM PYTHON SOURCE LINES 96-98

.. code-block:: default

    view = otv.View(result_rl10_prof.drawProfileLikelihoodFunction())




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_racetime_004.png
   :alt: profile likelihood
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_racetime_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 99-100

.. code-block:: default

    otv.View.ShowAll()








.. _sphx_glr_download_auto_data_analysis_distribution_fitting_plot_estimate_gev_racetime.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_estimate_gev_racetime.py <plot_estimate_gev_racetime.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_estimate_gev_racetime.ipynb <plot_estimate_gev_racetime.ipynb>`
