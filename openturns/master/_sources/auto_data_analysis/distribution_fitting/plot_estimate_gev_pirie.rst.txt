
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/distribution_fitting/plot_estimate_gev_pirie.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_data_analysis_distribution_fitting_plot_estimate_gev_pirie.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_distribution_fitting_plot_estimate_gev_pirie.py:


Estimate a GEV on the Pirie sea levels data
===========================================

.. GENERATED FROM PYTHON SOURCE LINES 6-14

In this example we are going to estimate the parameters of a generalized extreme value distribution
on the sea levels data from [coles2001]_ with different methods:

- the maximum likelihood estimation
- the profile likelihood estimation
- the estimation of return level from both maximum likelihood and profile likelihood
- the maximum likehood estimator from independent observations (see [coles2001]_ paragraph 3.4.1)
- the maximum likehood estimator with a non-stationary hypothesis (see [coles2001]_ paragraph 6.3.1)

.. GENERATED FROM PYTHON SOURCE LINES 16-17

Load the Port Pirie dataset of highest sea levels per year

.. GENERATED FROM PYTHON SOURCE LINES 17-24

.. code-block:: default

    import openturns as ot
    import openturns.viewer as otv
    import openturns.experimental as otexp
    from openturns.usecases import coles
    data = coles.Coles().portpirie
    print(data[:5])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        [ Year     SeaLevel ]
    0 : [ 1923        4.03  ]
    1 : [ 1924        3.83  ]
    2 : [ 1925        3.65  ]
    3 : [ 1926        3.88  ]
    4 : [ 1927        4.01  ]




.. GENERATED FROM PYTHON SOURCE LINES 25-26

Select the sea levels column

.. GENERATED FROM PYTHON SOURCE LINES 26-28

.. code-block:: default

    sample = data[:, 1]








.. GENERATED FROM PYTHON SOURCE LINES 29-31

Estimate the parameters of the GEV by maximizing the log-likehood
and compute the parameter distribution

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: default

    factory = ot.GeneralizedExtremeValueFactory()
    result1 = factory.buildMethodOfLikelihoodMaximizationEstimator(sample)








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Print the estimated parameter values

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: default

    estimate = result1.getDistribution()
    desc = estimate.getParameterDescription()
    p = estimate.getParameter()
    print(", ".join([f"{param}: {value:.3f}" for param, value in zip(desc, p)]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    mu: 3.875, sigma: 0.198, xi: -0.050




.. GENERATED FROM PYTHON SOURCE LINES 42-43

Inspect the estimated Gaussian parameter distribution

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: default

    parameterEstimate = result1.getParameterDistribution()
    print(parameterEstimate)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Normal(mu = [3.87478,0.198063,-0.0503071], sigma = [0.0269491,0.0236171,0.132889], R = [[  1         0.232724 -0.276933 ]
     [  0.232724  1        -0.466698 ]
     [ -0.276933 -0.466698  1        ]])




.. GENERATED FROM PYTHON SOURCE LINES 47-48

Inspect the covariance matrix

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: default

    V = parameterEstimate.getCovariance()
    print(V)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[  0.000726255  0.000148119 -0.000991761 ]
     [  0.000148119  0.000557766 -0.00146471  ]
     [ -0.000991761 -0.00146471   0.0176594   ]]




.. GENERATED FROM PYTHON SOURCE LINES 52-53

Inspect the standard deviation

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default

    stddev = parameterEstimate.getStandardDeviation()
    print(stddev)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.0269491,0.0236171,0.132889]




.. GENERATED FROM PYTHON SOURCE LINES 57-58

Extract parameters confidence intervals

.. GENERATED FROM PYTHON SOURCE LINES 58-62

.. code-block:: default

    for i in range(3):
        ci = parameterEstimate.getMarginal(i).computeBilateralConfidenceInterval(0.95)
        print(desc[i] + ":", ci)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    mu: [3.82196, 3.9276]
    sigma: [0.151774, 0.244351]
    xi: [-0.310764, 0.21015]




.. GENERATED FROM PYTHON SOURCE LINES 63-64

Validate the inference result thanks to some diagnostic plots

.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: default

    validation = otexp.GeneralizedExtremeValueValidation(result1, sample)
    graph = validation.drawDiagnosticPlot()
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_pirie_001.png
   :alt: , Sample versus model PP-plot, Sample versus model QQ-plot, Return level, Density
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_pirie_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-70

Now estimate the parameters with the profile likelihood

.. GENERATED FROM PYTHON SOURCE LINES 70-72

.. code-block:: default

    result2 = factory.buildMethodOfProfileLikelihoodMaximizationEstimator(sample)








.. GENERATED FROM PYTHON SOURCE LINES 73-74

We can see the confidence interval of :math:`\xi` is a bit smaller with this method

.. GENERATED FROM PYTHON SOURCE LINES 74-77

.. code-block:: default

    result2.setConfidenceLevel(0.95)
    print(result2.getParameterConfidenceInterval())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [-0.218157, 0.170406]




.. GENERATED FROM PYTHON SOURCE LINES 78-79

We can also plot the profile likelihood and the confidence interval

.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: default

    view = otv.View(result2.drawProfileLikelihoodFunction())




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_pirie_002.png
   :alt: profile likelihood
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_pirie_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-83

Estimate the 10 and 100 years return levels from the MLE estimator

.. GENERATED FROM PYTHON SOURCE LINES 83-95

.. code-block:: default

    zm10 = factory.buildReturnLevelEstimator(result1, 10.0)
    return_level10 = zm10.getMean()
    print(f"10 years return level={return_level10}")
    return_level_ci10 = zm10.computeBilateralConfidenceInterval(0.95)
    print(f"CI={return_level_ci10}")

    zm100 = factory.buildReturnLevelEstimator(result1, 100.0)
    return_level100 = zm100.getMean()
    print(f"100 years return level={return_level100}")
    return_level_ci100 = zm100.computeBilateralConfidenceInterval(0.95)
    print(f"CI={return_level_ci100}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    10 years return level=[4.29619]
    CI=[4.17408, 4.41829]
    100 years return level=[4.68815]
    CI=[4.28041, 5.09589]




.. GENERATED FROM PYTHON SOURCE LINES 96-97

Now estimate the 10 years return level with profile likelihood

.. GENERATED FROM PYTHON SOURCE LINES 97-101

.. code-block:: default

    result_rl10_prof = factory.buildReturnLevelProfileLikelihoodEstimator(sample, 10.0)
    zm = result_rl10_prof.getParameter()
    print(f"10 years return level (profile)={zm}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    10 years return level (profile)=4.305341115839941




.. GENERATED FROM PYTHON SOURCE LINES 102-103

We can see the confidence interval of :math:`z_m` is a bit smaller with this method

.. GENERATED FROM PYTHON SOURCE LINES 103-107

.. code-block:: default

    result_rl10_prof.setConfidenceLevel(0.95)
    return_level_ci10 = result_rl10_prof.getParameterConfidenceInterval()
    print(f"CI={return_level_ci10}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    CI=[4.2124, 4.45955]




.. GENERATED FROM PYTHON SOURCE LINES 108-109

We can also plot the profile likelihood and the confidence interval

.. GENERATED FROM PYTHON SOURCE LINES 109-111

.. code-block:: default

    view = otv.View(result_rl10_prof.drawProfileLikelihoodFunction())




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_pirie_003.png
   :alt: profile likelihood
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_pirie_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 112-114

Now formulate a non-stationary hypothesis for our parameters
First we need the grid of time values (in years)

.. GENERATED FROM PYTHON SOURCE LINES 114-116

.. code-block:: default

    mesh = ot.Mesh(data[:, 0])








.. GENERATED FROM PYTHON SOURCE LINES 117-119

Now we can define the basis for each parameter.
We suppose that mu is linear with time, and that the other parameters remain constant.

.. GENERATED FROM PYTHON SOURCE LINES 119-125

.. code-block:: default

    constant = ot.SymbolicFunction(['t'], ['1.0'])
    basis_mu = ot.Basis([constant, ot.SymbolicFunction(['t'], ['t'])])  # linear trend
    basis_sigma = ot.Basis([constant])  # stationary
    basis_xi = ot.Basis([constant])  # stationary
    basis_coll = [basis_mu, basis_sigma, basis_xi]








.. GENERATED FROM PYTHON SOURCE LINES 126-128

We can now estimate the list of coefficients of the parametric basis for each parameters
the first 2 values are the coefficients for the mu basis

.. GENERATED FROM PYTHON SOURCE LINES 128-134

.. code-block:: default

    result3 = factory.buildTimeVarying(sample, mesh, basis_coll)
    p = result3.getOptimalParameter()
    b_mu, a_mu = p[:2]
    print(p)
    print(f"mu(t) = {b_mu:.4f} + {a_mu:.4f} * t")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [4.8178,-0.000482304,0.198037,-0.0508286]
    mu(t) = 4.8178 + -0.0005 * t




.. GENERATED FROM PYTHON SOURCE LINES 135-137

We can draw the estimated mu parametric function
Lets superpose the cloud of data values

.. GENERATED FROM PYTHON SOURCE LINES 137-143

.. code-block:: default

    graph = result3.drawParameterFunction(0)
    cloud = ot.Cloud(data)
    cloud.setColor('red')
    graph.add(cloud)
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_pirie_004.png
   :alt: Parameter function
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_pirie_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 144-146

The visual evidence of a trend is weak in the graph.
The strength of this evidence can be assessed with the deviance statistics:

.. GENERATED FROM PYTHON SOURCE LINES 146-152

.. code-block:: default

    llh1 = result1.getLogLikelihood()
    llh3 = result3.getLogLikelihood()
    result4 = ot.HypothesisTest.LikelihoodRatioTest(llh1, llh3, 0.05)
    accepted = result4.getBinaryQualityMeasure()
    print(f"hypothesis H0(stationary model) accepted={accepted}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    hypothesis H0(stationary model) accepted=True




.. GENERATED FROM PYTHON SOURCE LINES 153-156

The deviance statistics :math:`D_p` is small compared to the Chi2 quantile
it means that the linear trend component can only explain a small variation in the data
and is not a genuine effect in the sea-level process but rather a chance feature in the observed data

.. GENERATED FROM PYTHON SOURCE LINES 156-159

.. code-block:: default

    print(f"Dp={result4.getStatistic():.2f}")
    print(f"cAlpha={result4.getThreshold():.2f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dp=0.06
    cAlpha=3.84




.. GENERATED FROM PYTHON SOURCE LINES 160-162

We can also draw the quantile(t) function for a given quantile level
Here it is also linear as the trend is linear only on the mu parameter

.. GENERATED FROM PYTHON SOURCE LINES 162-165

.. code-block:: default

    graph = result3.drawQuantileFunction(0.5)
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_pirie_005.png
   :alt: Quantile function
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_pirie_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-167

.. code-block:: default

    otv.View.ShowAll()








.. _sphx_glr_download_auto_data_analysis_distribution_fitting_plot_estimate_gev_pirie.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_estimate_gev_pirie.py <plot_estimate_gev_pirie.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_estimate_gev_pirie.ipynb <plot_estimate_gev_pirie.ipynb>`
