
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/distribution_fitting/plot_estimate_gev_fremantle.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_data_analysis_distribution_fitting_plot_estimate_gev_fremantle.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_distribution_fitting_plot_estimate_gev_fremantle.py:


Estimate a GEV on the Fremantle sea-levels data
===============================================

.. GENERATED FROM PYTHON SOURCE LINES 6-24

In this example, we illustrate various techniques of extreme value modeling applied
to the annual maximum sea-levels recorded at Fremantle, near Perth, western Australia, over the period
1897-1989.
Readers should refer to [coles2001]_ to get more details.

We illustrate techniques to:

- estimate a stationary and a non stationary GEV,
- estimate a return level,

using:

- the log-likelihood function,
- the profile log-likelihood function.

First, we load the Fremantle dataset of the annual maximum sea-levels. We start by looking at them
through time. The data also contain the annual mean value of the Southern Oscillation Index (SOI),
which is a proxy for meteorological volatility due to effects such as El Nino.

.. GENERATED FROM PYTHON SOURCE LINES 24-40

.. code-block:: default

    import openturns as ot
    import openturns.viewer as otv
    import openturns.experimental as otexp
    from openturns.usecases import coles

    data = coles.Coles().fremantle
    print(data[:5])
    graph = ot.Graph(
        "Annual maximum sea-levels at Fremantle", "year", "level (m)", True, ""
    )
    cloud = ot.Cloud(data[:, :2])
    cloud.setColor("red")
    graph.add(cloud)
    graph.setIntegerXTick(True)
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_001.png
   :alt: Annual maximum sea-levels at Fremantle
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        [ Year     SeaLevel SOI      ]
    0 : [ 1897        1.58    -0.67  ]
    1 : [ 1898        1.71     0.57  ]
    2 : [ 1899        1.4      0.16  ]
    3 : [ 1900        1.34    -0.65  ]
    4 : [ 1901        1.43     0.06  ]




.. GENERATED FROM PYTHON SOURCE LINES 41-42

We select the sea-levels column.

.. GENERATED FROM PYTHON SOURCE LINES 42-44

.. code-block:: default

    sample = data[:, 1]








.. GENERATED FROM PYTHON SOURCE LINES 45-50

**Stationary GEV modeling via the log-likelihood function**

We first assume that the dependence through time is negligible, so we first model the data as
independent observations over the observation period. We estimate the parameters of the
GEV distribution by maximizing the log-likelihood of the data.

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: default

    factory = ot.GeneralizedExtremeValueFactory()
    result_LL = factory.buildMethodOfLikelihoodMaximizationEstimator(sample)








.. GENERATED FROM PYTHON SOURCE LINES 54-55

We get the fitted GEV and its parameters :math:`(\hat{\mu}, \hat{\sigma}, \hat{\xi})`.

.. GENERATED FROM PYTHON SOURCE LINES 55-60

.. code-block:: default

    fitted_GEV = result_LL.getDistribution()
    desc = fitted_GEV.getParameterDescription()
    param = fitted_GEV.getParameter()
    print(", ".join([f"{p}: {value:.3f}" for p, value in zip(desc, param)]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    mu: 1.482, sigma: 0.141, xi: -0.217




.. GENERATED FROM PYTHON SOURCE LINES 61-63

We get the asymptotic distribution of the estimator :math:`(\hat{\mu}, \hat{\sigma}, \hat{\xi})`.
In that case, the asymptotic distribution is normal.

.. GENERATED FROM PYTHON SOURCE LINES 63-67

.. code-block:: default

    parameterEstimate = result_LL.getParameterDistribution()
    print("Asymptotic distribution of the estimator : ")
    print(parameterEstimate)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Asymptotic distribution of the estimator : 
    Normal(mu = [1.48231,0.141241,-0.217052], sigma = [0.0176728,0.0105976,0.0776361], R = [[  1         0.15748  -0.482101 ]
     [  0.15748   1        -0.411378 ]
     [ -0.482101 -0.411378  1        ]])




.. GENERATED FROM PYTHON SOURCE LINES 68-69

We get the covariance matrix  and the standard deviation of :math:`(\hat{\mu}, \hat{\sigma}, \hat{\xi})`.

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default

    print("Cov matrix = \n", parameterEstimate.getCovariance())
    print("Standard dev = ", parameterEstimate.getStandardDeviation())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Cov matrix = 
     [[  0.000312329  2.94943e-05 -0.000661467 ]
     [  2.94943e-05  0.000112309 -0.000338463 ]
     [ -0.000661467 -0.000338463  0.00602736  ]]
    Standard dev =  [0.0176728,0.0105976,0.0776361]




.. GENERATED FROM PYTHON SOURCE LINES 73-74

We get the marginal confidence intervals of order 0.95.

.. GENERATED FROM PYTHON SOURCE LINES 74-79

.. code-block:: default

    order = 0.95
    for i in range(3):
        ci = parameterEstimate.getMarginal(i).computeBilateralConfidenceInterval(order)
        print(desc[i] + ":", ci)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    mu: [1.44767, 1.51694]
    sigma: [0.12047, 0.162012]
    xi: [-0.369216, -0.0648881]




.. GENERATED FROM PYTHON SOURCE LINES 80-86

At last, we can validate the inference result thanks the 4 usual diagnostic plots:

- the probability-probability pot,
- the quantile-quantile pot,
- the return level plot,
- the empirical distribution function.

.. GENERATED FROM PYTHON SOURCE LINES 86-90

.. code-block:: default

    validation = otexp.GeneralizedExtremeValueValidation(result_LL, sample)
    graph = validation.drawDiagnosticPlot()
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_002.png
   :alt: , Sample versus model PP-plot, Sample versus model QQ-plot, Return level plot, Density
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 91-94

**Stationary GEV modeling via the profile log-likelihood function**

Now, we use the profile log-likehood function rather than log-likehood function  to estimate the parameters of the GEV.

.. GENERATED FROM PYTHON SOURCE LINES 94-96

.. code-block:: default

    result_PLL = factory.buildMethodOfProfileLikelihoodMaximizationEstimator(sample)








.. GENERATED FROM PYTHON SOURCE LINES 97-100

The following graph allows one to get the profile log-likelihood plot.
It also indicates the optimal value of :math:`\xi`, the maximum profile log-likelihood and
the confidence interval for :math:`\xi` of order 0.95 (which is the default value).

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: default

    order = 0.95
    result_PLL.setConfidenceLevel(order)
    view = otv.View(result_PLL.drawProfileLikelihoodFunction())




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_003.png
   :alt: profile likelihood
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 105-109

We can get the numerical values of the confidence interval: it appears to be a bit smaller
than the interval obtained with the log-likelihood function.
Note that if the order requested is too high, the confidence interval might not be calculated because
one of its bound is out of the definition domain of the log-likelihood function.

.. GENERATED FROM PYTHON SOURCE LINES 109-115

.. code-block:: default

    try:
        print("Confidence interval for xi = ", result_PLL.getParameterConfidenceInterval())
    except Exception as ex:
        print(type(ex))
        pass





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Confidence interval for xi =  [-0.334109, -0.0802265]




.. GENERATED FROM PYTHON SOURCE LINES 116-127

**Return level estimate from the estimated stationary GEV**

We estimate the :math:`m`-block return level :math:`z_m`: it is computed as a particular quantile of the
GEV model estimated using the log-likelihood function. We just have to use the maximum log-likelihood
estimator built in the previous section.

As the data are annual sea-levels, each block corresponds to one year: the 10-year return level
corresponds to :math:`m=10` and the 100-year return level corresponds to :math:`m=100`.

The method provides the asymptotic distribution of the estimator :math:`\hat{z}_m`
which mean is the return-level estimate.

.. GENERATED FROM PYTHON SOURCE LINES 127-134

.. code-block:: default

    zm_10 = factory.buildReturnLevelEstimator(result_LL, 10.0)
    return_level_10 = zm_10.getMean()
    print("Maximum log-likelihood function : ")
    print(f"10-year return level = {return_level_10}")
    return_level_ci10 = zm_10.computeBilateralConfidenceInterval(0.95)
    print(f"CI = {return_level_ci10}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Maximum log-likelihood function : 
    10-year return level = [1.73376]
    CI = [1.68892, 1.7786]




.. GENERATED FROM PYTHON SOURCE LINES 135-141

.. code-block:: default

    zm_100 = factory.buildReturnLevelEstimator(result_LL, 100.0)
    return_level_100 = zm_100.getMean()
    print(f"100-year return level = {return_level_100}")
    return_level_ci100 = zm_100.computeBilateralConfidenceInterval(0.95)
    print(f"CI = {return_level_ci100}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    100-year return level = [1.89328]
    CI = [1.79336, 1.99319]




.. GENERATED FROM PYTHON SOURCE LINES 142-146

**Return level estimate via the profile log-likelihood function of a stationary GEV**

We can estimate the :math:`m`-block return level :math:`z_m` directly from the data using the profile
likelihood with respect to :math:`z_m`.

.. GENERATED FROM PYTHON SOURCE LINES 146-150

.. code-block:: default

    result_zm_10_PLL = factory.buildReturnLevelProfileLikelihoodEstimator(sample, 10.0)
    zm_10_PLL = result_zm_10_PLL.getParameter()
    print(f"10-year return level (profile) = {zm_10_PLL}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    10-year return level (profile) = 1.7337304564424918




.. GENERATED FROM PYTHON SOURCE LINES 151-155

We can get the confidence interval of :math:`z_m`:  once more, it appears to be a bit smaller
than the interval obtained from the log-likelihood function.
As for the confidence interval of :math:`\xi`, depending on the order requested, the interval might
not be calculated.

.. GENERATED FROM PYTHON SOURCE LINES 155-164

.. code-block:: default

    result_zm_10_PLL.setConfidenceLevel(0.95)
    try:
        return_level_ci10 = result_zm_10_PLL.getParameterConfidenceInterval()
    except Exception as ex:
        print(type(ex))
        pass
    print("Maximum profile log-likelihood function : ")
    print(f"CI={return_level_ci10}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Maximum profile log-likelihood function : 
    CI=[1.69343, 1.78619]




.. GENERATED FROM PYTHON SOURCE LINES 165-167

We can also plot the profile log-likelihood function and get the confidence interval, the optimal value
of :math:`z_m` and its confidence interval.

.. GENERATED FROM PYTHON SOURCE LINES 167-169

.. code-block:: default

    view = otv.View(result_zm_10_PLL.drawProfileLikelihoodFunction())




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_004.png
   :alt: profile likelihood
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 170-205

**Non stationary GEV modeling via the log-likelihood function**

If we look at the data carefully, we see that the pattern of variation has not remained constant over
the observation period. There is an increase in the data through time.
We want to model this dependence because a slight increase in extreme sea-levels might have
a significant impact on the safety of coastal flood defenses.

We have define the functional basis for each parameter of the GEV model. Even if we have
the possibility to affect a time-varying model to each of the 3 parameters :math:`(\mu, \sigma, \xi)`,
it is strongly recommended not to vary the parameter :math:`\xi` and to let it constant.

For numerical reasons, it is strongly recommended to normalize all the data as follows:

.. math::

    \tau(t) = \dfrac{t-c}{d}

where:

- the *CenterReduce* method where :math:`c = \dfrac{1}{n} \sum_{i=1}^n t_i` is the mean time stamps
  and :math:`d = \sqrt{\dfrac{1}{n} \sum_{i=1}^n (t_i-c)^2}` is the standard deviation of the time stamps;
- the *MinMax* method where :math:`c = t_1` is the initial time and :math:`d = t_n-t_1` the final time;
- the *None* method where :math:`c = 0` and :math:`d = 1`: in that case, data are not normalized.

We suppose that :math:`\mu` is linear in time, and that the other parameters remain constant:

.. math::
    :nowrap:

    \begin{align*}
      \mu(t) & = \beta_1 + \beta_2\tau(t) \\
      \sigma(t) & = \beta_3 \\
      \xi(t) & = \beta_4
    \end{align*}


.. GENERATED FROM PYTHON SOURCE LINES 205-211

.. code-block:: default

    constant = ot.SymbolicFunction(["t"], ["1.0"])
    basis_lin = ot.Basis([constant, ot.SymbolicFunction(["t"], ["t"])])
    basis_cst = ot.Basis([constant])
    # basis for mu, sigma, xi
    basis_coll = [basis_lin, basis_cst, basis_cst]








.. GENERATED FROM PYTHON SOURCE LINES 212-214

.. code-block:: default

    timeStamps = data[:, 0]








.. GENERATED FROM PYTHON SOURCE LINES 215-228

We can now estimate the list of coefficients :math:`\vect{\beta} = (\beta_1, \beta_2, \beta_3, \beta_4)`
using the log-likelihood of the data.

We test the 3 normalizing methods and both initial points in order to evaluate their impact on the results.
We can see that:

- both normalization methods lead to the same result for :math:`\beta_1`, :math:`\beta_3` and :math:`\beta_4`
  (note that :math:`\beta_2` depends on the normalization function),
- both initial points lead to the same result when the data have been normalized,
- it is very important to normalize all the data: if not, the result strongly depends on the initial point
  and it differs from the result obtained with normalized data. The results are not optimal in that case
  since the associated log-likelihood are much smaller than those obtained with normalized data.


.. GENERATED FROM PYTHON SOURCE LINES 228-248

.. code-block:: default

    initiPoint_list = list()
    initiPoint_list.append("Gumbel")
    initiPoint_list.append("Static")
    normMethod_list = list()
    normMethod_list.append("MinMax")
    normMethod_list.append("CenterReduce")
    normMethod_list.append("None")

    print("Linear mu(t) model: ")
    for normMeth in normMethod_list:
        for initPoint in initiPoint_list:
            print("normMeth, initPoint = ", normMeth, initPoint)
            # The ot.Function() is the identity function.
            result = factory.buildTimeVarying(
                sample, timeStamps, basis_coll, ot.Function(), initPoint, normMeth
            )
            beta = result.getOptimalParameter()
            print("beta1, beta2, beta3, beta4 = ", beta)
            print("Max log-likelihood =  ", result.getLogLikelihood())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Linear mu(t) model: 
    normMeth, initPoint =  MinMax Gumbel
    beta1, beta2, beta3, beta4 =  [1.38216,0.187033,0.124317,-0.125086]
    Max log-likelihood =   49.912808020251134
    normMeth, initPoint =  MinMax Static
    beta1, beta2, beta3, beta4 =  [1.38227,0.186899,0.124343,-0.125475]
    Max log-likelihood =   49.91281020707175
    normMeth, initPoint =  CenterReduce Gumbel
    beta1, beta2, beta3, beta4 =  [1.48016,0.0541499,0.124307,-0.124893]
    Max log-likelihood =   49.91279553702213
    normMeth, initPoint =  CenterReduce Static
    beta1, beta2, beta3, beta4 =  [1.48024,0.0541138,0.124349,-0.125787]
    Max log-likelihood =   49.91278966404141
    normMeth, initPoint =  None Gumbel
    beta1, beta2, beta3, beta4 =  [1.47155,1.67803e-05,0.211226,0.0876902]
    Max log-likelihood =   26.490076768443522
    normMeth, initPoint =  None Static
    beta1, beta2, beta3, beta4 =  [1.4823,1.34614e-09,0.141241,-0.217051]
    Max log-likelihood =   43.566619143025775




.. GENERATED FROM PYTHON SOURCE LINES 249-251

According to the previous results, we choose the *MinMax* normalization method and the *Gumbel* initial point.
This initial point is cheaper than the *Static* one as it requires no optimization computation.

.. GENERATED FROM PYTHON SOURCE LINES 251-260

.. code-block:: default

    result_NonStatLL = factory.buildTimeVarying(
        sample, timeStamps, basis_coll, ot.Function(), "Gumbel", "MinMax"
    )
    beta = result_NonStatLL.getOptimalParameter()
    print("beta1, beta2, beta3, beta_4 = ", beta)
    print(f"mu(t) = {beta[0]:.4f} + {beta[1]:.4f} * tau")
    print(f"sigma = {beta[2]:.4f}")
    print(f"xi = {beta[3]:.4f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    beta1, beta2, beta3, beta_4 =  [1.38216,0.187033,0.124317,-0.125086]
    mu(t) = 1.3822 + 0.1870 * tau
    sigma = 0.1243
    xi = -0.1251




.. GENERATED FROM PYTHON SOURCE LINES 261-262

You can get the expression of the normalizing function :math:`t \mapsto \tau(t)`:

.. GENERATED FROM PYTHON SOURCE LINES 262-267

.. code-block:: default

    normFunc = result_NonStatLL.getNormalizationFunction()
    print("Function tau(t): ", normFunc)
    print("c = ", normFunc.getEvaluation().getImplementation().getCenter()[0])
    print("1/d = ", normFunc.getEvaluation().getImplementation().getLinear()[0, 0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Function tau(t):  class=LinearFunction name=Unnamed implementation=class=LinearEvaluation name=Unnamed center=[1897] constant=[0] linear=[[ 0.0108696 ]]
    c =  1897.0
    1/d =  0.010869565217391304




.. GENERATED FROM PYTHON SOURCE LINES 268-269

You can get the function :math:`t \mapsto \vect{\theta}(t)` where :math:`\vect{\theta}(t) = (\mu(t), \sigma(t), \xi(t))`.

.. GENERATED FROM PYTHON SOURCE LINES 269-271

.. code-block:: default

    functionTheta = result_NonStatLL.getParameterFunction()








.. GENERATED FROM PYTHON SOURCE LINES 272-274

We get the asymptotic distribution of :math:`\vect{\beta}` to compute some confidence intervals of
the estimates, for example of order :math:`p = 0.95`.

.. GENERATED FROM PYTHON SOURCE LINES 274-293

.. code-block:: default

    dist_beta = result_NonStatLL.getParameterDistribution()
    condifence_level = 0.95
    for i in range(beta.getSize()):
        lower_bound = dist_beta.getMarginal(i).computeQuantile((1 - condifence_level) / 2)[
            0
        ]
        upper_bound = dist_beta.getMarginal(i).computeQuantile((1 + condifence_level) / 2)[
            0
        ]
        print(
            "Conf interval for beta_"
            + str(i + 1)
            + " = ["
            + str(lower_bound)
            + "; "
            + str(upper_bound)
            + "]"
        )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Conf interval for beta_1 = [1.3261592601754428; 1.4381658634148222]
    Conf interval for beta_2 = [0.09344563045761152; 0.2806199116219121]
    Conf interval for beta_3 = [0.10189124975098564; 0.14674373833543314]
    Conf interval for beta_4 = [-0.29294234394146657; 0.0427699012822019]




.. GENERATED FROM PYTHON SOURCE LINES 294-296

In order to compare different modelings, we get the optimal log-likelihood of the data for both stationary
and non stationary models. The difference is significant enough to be in favor of the non stationary model.

.. GENERATED FROM PYTHON SOURCE LINES 296-300

.. code-block:: default

    print("Max log-likelihood: ")
    print("Stationary model =  ", result_LL.getLogLikelihood())
    print("Non stationary linear mu(t) model =  ", result_NonStatLL.getLogLikelihood())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Max log-likelihood: 
    Stationary model =   43.566611777651026
    Non stationary linear mu(t) model =   49.912808020251134




.. GENERATED FROM PYTHON SOURCE LINES 301-320

In order to draw some diagnostic plots similar to those drawn in the stationary case, we refer to the
following result: if :math:`Z_t` is a non stationary GEV model parametrized by :math:`(\mu(t), \sigma(t), \xi(t))`,
then the standardized variables :math:`\hat{Z}_t` defined by:

.. math::

   \hat{Z}_t = \dfrac{1}{\xi(t)} \log \left[1+ \xi(t)\left( \dfrac{Z_t-\mu(t)}{\sigma(t)} \right)\right]

have  the standard Gumbel distribution which is the GEV model with :math:`(\mu, \sigma, \xi) = (0, 1, 0)`.

As a result, we can validate the inference result thanks the 4 usual diagnostic plots:

- the probability-probability pot,
- the quantile-quantile pot,
- the return level plot,
- the data histogram and the desnity of the fitted model.

using the transformed data compared to the Gumbel model. We can see that the adequation is better
than with the stationary model.

.. GENERATED FROM PYTHON SOURCE LINES 320-323

.. code-block:: default

    graph = result_NonStatLL.drawDiagnosticPlot()
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_005.png
   :alt: , Sample versus model PP-plot, Sample versus model QQ-plot, Return level plot, Density
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 324-342

We can draw the mean function  :math:`t \mapsto \Expect{\mbox{GEV}(t)}`. Be careful, it is not the function
:math:`t \mapsto \mu(t)`. As a matter of fact, the mean is defined for :math:`\xi <1` only and in that case,
for :math:`\xi \neq 0`, we have:

.. math::
    \Expect{\mbox{GEV}(t)} = \mu(t) + \dfrac{\sigma(t)}{\xi(t)} (\Gamma(1-\xi(t))-1)

and for :math:`\xi = 0`, we have:

.. math::
    \Expect{\mbox{GEV}(t)} = \mu(t) + \sigma(t)\gamma

where :math:`\gamma` is the Euler constant.

We can also draw the function :math:`t \mapsto q_p(t)` where :math:`q_p(t)` is the quantile of
order :math:`p` of the GEV distribution at time :math:`t`.
Here, :math:`\mu(t)` is a linear function and the other parameters are constant, so the mean and the quantile
functions are also linear functions.

.. GENERATED FROM PYTHON SOURCE LINES 342-371

.. code-block:: default

    graph = ot.Graph(
        r"Annual maximum sea-levels at Fremantle - Linear $\mu(t)$",
        "year",
        "level (m)",
        True,
        "",
    )
    graph.setIntegerXTick(True)
    # data
    cloud = ot.Cloud(data[:, :2])
    cloud.setColor("red")
    graph.add(cloud)
    # mean function
    meandata = [
        result_NonStatLL.getDistribution(t).getMean()[0] for t in data[:, 0].asPoint()
    ]
    curve_meanPoints = ot.Curve(data[:, 0].asPoint(), meandata)
    graph.add(curve_meanPoints)
    # quantile function
    graphQuantile = result_NonStatLL.drawQuantileFunction(0.95)
    drawQuant = graphQuantile.getDrawable(0)
    drawQuant = graphQuantile.getDrawable(0)
    drawQuant.setLineStyle("dashed")
    graph.add(drawQuant)
    graph.setLegends(["data", "mean function", "quantile 0.95  function"])
    graph.setLegendPosition("bottomright")
    view = otv.View(graph)





.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_006.png
   :alt: Annual maximum sea-levels at Fremantle - Linear $\mu(t)$
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_fremantle_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 372-383

At last, we can test the validity of the stationary model :math:`\mathcal{M}_0`
relative to the model with time varying parameters  :math:`\mathcal{M}_1`. The
model :math:`\mathcal{M}_0` is parametrized by :math:`(\beta_1, \beta_3, \beta_4)` and the model
:math:`\mathcal{M}_1` is parametrized by :math:`(\beta_1, \beta_2, \beta_3, \beta_4)`: so we have
:math:`\mathcal{M}_0 \subset \mathcal{M}_1`.

We use the Likelihood Ratio test. The null hypothesis is the stationary model :math:`\mathcal{M}_0`.
The Type I error :math:`\alpha` is taken equal to 0.05.

This test confirms that the dependence through time is not negligible: it means that the linear :math:`\mu(t)`
component explains a large variation in the data.

.. GENERATED FROM PYTHON SOURCE LINES 383-395

.. code-block:: default

    llh_LL = result_LL.getLogLikelihood()
    llh_NonStatLL = result_NonStatLL.getLogLikelihood()
    modelM0_Nb_param = 3
    modelM1_Nb_param = 4
    resultLikRatioTest = ot.HypothesisTest.LikelihoodRatioTest(
        modelM0_Nb_param, llh_LL, modelM1_Nb_param, llh_NonStatLL, 0.05
    )
    accepted = resultLikRatioTest.getBinaryQualityMeasure()
    print(
        f"Hypothesis H0 (stationary model) vs H1 (linear mu(t) model):  accepted ? = {accepted}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Hypothesis H0 (stationary model) vs H1 (linear mu(t) model):  accepted ? = False




.. GENERATED FROM PYTHON SOURCE LINES 396-400

We detail the statistics of the Likelihood Ratio test: the deviance statistics :math:`\mathcal{D}_p` follows
a :math:`\chi^2_1` distribution.
The model :math:`\mathcal{M}_0` is rejected if the deviance statistics estimated on the data is greater than
the threshold :math:`c_{\alpha}` or if the p-value is less than the Type I error  :math:`\alpha = 0.05`.

.. GENERATED FROM PYTHON SOURCE LINES 400-404

.. code-block:: default

    print(f"Dp={resultLikRatioTest.getStatistic():.2f}")
    print(f"alpha={resultLikRatioTest.getThreshold():.2f}")
    print(f"p-value={resultLikRatioTest.getPValue():.2f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dp=12.69
    alpha=0.05
    p-value=0.00




.. GENERATED FROM PYTHON SOURCE LINES 405-434

We can perform the same study with a quadratic model for :math:`\mu(t)` or a linear model for
:math:`\mu(t)` and :math:`\sigma(t)`:

.. math::
    :nowrap:

    \begin{align*}
      \mu(t) & = \beta_1 + \beta_2 \tau(t) + \beta_3\tau(t)^2 \\
      \sigma(t) & = \beta_4 \\
      \xi(t) & = \beta_5
    \end{align*}

or

.. math::
    :nowrap:

    \begin{align*}
    \mu(t) & = \beta_1 + \beta_2 \tau(t) \\
    \sigma(t) & = \beta_3 + \beta_4\tau(t)\\
    \xi(t) & = \beta_5
    \end{align*}

For each model, we give the log-likelihood values and we test the validity of each model with respect
to the non stationary model where :math:`\mu(t)` is linear.
We notice that there is no evidence to adopt a quadratic model for :math:`\mu(t)` nor a linear model
for :math:`\mu(t)` and :math:`\sigma(t)`: the optimal log-likelihood for each model is very near the likelihood
we obtained with a linear model for :math:`\mu(t)` only. It means that these both models do not bring significant
improvements with respect to model tested before.

.. GENERATED FROM PYTHON SOURCE LINES 434-469

.. code-block:: default

    basis_quad = ot.Basis(
        [constant, ot.SymbolicFunction(["t"], ["t"]), ot.SymbolicFunction(["t"], ["t^2"])]
    )
    basis_coll_2 = [basis_quad, basis_cst, basis_cst]
    basis_coll_3 = [basis_lin, basis_lin, basis_cst]
    result_NonStatLL_2 = factory.buildTimeVarying(
        sample, timeStamps, basis_coll_2, ot.Function(), "Gumbel", "MinMax"
    )
    result_NonStatLL_3 = factory.buildTimeVarying(
        sample, timeStamps, basis_coll_3, ot.Function(), "Gumbel", "MinMax"
    )
    print("Max log-likelihood = ")
    print("Non stationary quadratic mu(t) model = ", result_NonStatLL_2.getLogLikelihood())
    print(
        "Non stationary linear mu(t) and sigma(t) model = ",
        result_NonStatLL_3.getLogLikelihood(),
    )
    llh_LL = result_LL.getLogLikelihood()
    llh_NonStatLL_2 = result_NonStatLL_2.getLogLikelihood()
    llh_NonStatLL_3 = result_NonStatLL_3.getLogLikelihood()
    resultLikRatioTest_2 = ot.HypothesisTest.LikelihoodRatioTest(
        4, llh_NonStatLL, 5, llh_NonStatLL_2, 0.05
    )
    resultLikRatioTest_3 = ot.HypothesisTest.LikelihoodRatioTest(
        4, llh_NonStatLL, 5, llh_NonStatLL_3, 0.05
    )
    accepted_2 = resultLikRatioTest_2.getBinaryQualityMeasure()
    accepted_3 = resultLikRatioTest_3.getBinaryQualityMeasure()
    print(
        f"Hypothesis H0 (linear mu(t) model) vs H1 (quadratic mu(t) model):  accepted ? = {accepted_2}"
    )
    print(
        f"Hypothesis H0 (linear mu(t) model) vs H1 (linear mu(t) and sigma(t) model):  accepted ? = {accepted_3}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Max log-likelihood = 
    Non stationary quadratic mu(t) model =  50.65441648784694
    Non stationary linear mu(t) and sigma(t) model =  50.70305201922592
    Hypothesis H0 (linear mu(t) model) vs H1 (quadratic mu(t) model):  accepted ? = True
    Hypothesis H0 (linear mu(t) model) vs H1 (linear mu(t) and sigma(t) model):  accepted ? = True




.. GENERATED FROM PYTHON SOURCE LINES 470-471

.. code-block:: default

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.006 seconds)


.. _sphx_glr_download_auto_data_analysis_distribution_fitting_plot_estimate_gev_fremantle.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_estimate_gev_fremantle.py <plot_estimate_gev_fremantle.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_estimate_gev_fremantle.ipynb <plot_estimate_gev_fremantle.ipynb>`
