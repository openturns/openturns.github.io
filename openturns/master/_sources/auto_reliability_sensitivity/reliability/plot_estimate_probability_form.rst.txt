.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_reliability_sensitivity_reliability_plot_estimate_probability_form.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_reliability_sensitivity_reliability_plot_estimate_probability_form.py:


Estimate a probability with FORM
================================

In this example we estimate a failure probability with the `FORM` algorithm on the :ref:`cantilever beam <use-case-cantilever-beam>` example. More precisely, we show how to use the associated results:

- the design point in both physical and standard space,
- the probability estimation according to the FORM approximation, and the following SORM ones: Tvedt, Hohen-Bichler and Breitung,
- the Hasofer reliability index and the generalized ones evaluated from the Breitung, Tvedt and Hohen-Bichler approximations,
- the importance factors defined as the normalized director factors of the design point in the :math:`U`-space
- the sensitivity factors of the Hasofer reliability index and the FORM probability.
- the coordinates of the mean point in the standard event space.

The coordinates of the mean point in the standard event space is:

.. math::
   \frac{1}{E_1(-\beta)}\int_{\beta}^{\infty} u_1 p_1(u_1)du_1


where :math:`E_1` is the spheric univariate distribution of the standard space and :math:`\beta` is the reliability index.

Model definition
----------------


.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)








We load the model from the usecases module :


.. code-block:: default

    from openturns.usecases import cantilever_beam as cantilever_beam
    cb = cantilever_beam.CantileverBeam()








We use the input parameters distribution from the data class :


.. code-block:: default

    distribution = cb.distribution
    distribution.setDescription(['E', 'F', 'L', 'I'])








We define the model


.. code-block:: default

    model = cb.model








Create the event whose probability we want to estimate.


.. code-block:: default

    vect = ot.RandomVector(distribution)
    G = ot.CompositeRandomVector(model, vect)
    event = ot.ThresholdEvent(G, ot.Greater(), 0.3)
    event.setName("deviation")








Define a solver


.. code-block:: default

    optimAlgo = ot.Cobyla()
    optimAlgo.setMaximumEvaluationNumber(1000)
    optimAlgo.setMaximumAbsoluteError(1.0e-10)
    optimAlgo.setMaximumRelativeError(1.0e-10)
    optimAlgo.setMaximumResidualError(1.0e-10)
    optimAlgo.setMaximumConstraintError(1.0e-10)








Run FORM


.. code-block:: default

    algo = ot.FORM(optimAlgo, event, distribution.getMean())
    algo.run()
    result = algo.getResult()








Probability


.. code-block:: default

    result.getEventProbability()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    1.0900370418627411e-06



Hasofer reliability index


.. code-block:: default

    result.getHasoferReliabilityIndex()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    4.735972259888527



Design point in the standard U* space.


.. code-block:: default

    result.getStandardSpaceDesignPoint()






.. raw:: html

    <p>[-0.665643,4.31264,1.23029,-1.3689]</p>
    <br />
    <br />

Design point in the physical X space.


.. code-block:: default

    result.getPhysicalSpaceDesignPoint()






.. raw:: html

    <p>[6.56566e+10,458.976,2.58907,1.34803e-07]</p>
    <br />
    <br />

Importance factors


.. code-block:: default

    graph = result.drawImportanceFactors()
    view = viewer.View(graph)




.. image:: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_estimate_probability_form_001.png
    :alt: Importance Factors from Design Point - deviation
    :class: sphx-glr-single-img






.. code-block:: default

    marginalSensitivity, otherSensitivity = result.drawHasoferReliabilityIndexSensitivity()
    marginalSensitivity.setLegends(["E","F","L","I"])
    marginalSensitivity.setLegendPosition('bottom')
    view = viewer.View(marginalSensitivity)




.. image:: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_estimate_probability_form_002.png
    :alt: Hasofer Reliability Index Sensitivities - Marginal parameters - deviation
    :class: sphx-glr-single-img






.. code-block:: default

    marginalSensitivity, otherSensitivity = result.drawEventProbabilitySensitivity()
    marginalSensitivity.setLegends(["E","F","L","I"])
    marginalSensitivity.setLegendPosition('bottom')
    view = viewer.View(marginalSensitivity)




.. image:: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_estimate_probability_form_003.png
    :alt: FORM - Event Probability Sensitivities - Marginal parameters - deviation
    :class: sphx-glr-single-img





Error history


.. code-block:: default

    optimResult = result.getOptimizationResult()
    graphErrors = optimResult.drawErrorHistory()
    graphErrors.setLegendPosition('bottom')
    graphErrors.setYMargin(0.0)
    view = viewer.View(graphErrors)




.. image:: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_estimate_probability_form_004.png
    :alt: Error history
    :class: sphx-glr-single-img





Get additional results with SORM


.. code-block:: default

    algo = ot.SORM(optimAlgo, event, distribution.getMean())
    algo.run()
    sorm_result = algo.getResult()








Reliability index with Breitung approximation


.. code-block:: default

    sorm_result.getGeneralisedReliabilityIndexBreitung()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    4.915018845541476



... with Hohenbichler approximation


.. code-block:: default

    sorm_result.getGeneralisedReliabilityIndexHohenbichler()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    4.92039449786118



.. with Tvedt approximation


.. code-block:: default

    sorm_result.getGeneralisedReliabilityIndexTvedt()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    4.923707817325711



SORM probability of the event with Breitung approximation


.. code-block:: default

    sorm_result.getEventProbabilityBreitung()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    4.4386959812405156e-07



... with Hohenbichler approximation


.. code-block:: default

    sorm_result.getEventProbabilityHohenbichler()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    4.31849736540921e-07



... with Tvedt approximation


.. code-block:: default

    sorm_result.getEventProbabilityTvedt()

    plt.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.423 seconds)


.. _sphx_glr_download_auto_reliability_sensitivity_reliability_plot_estimate_probability_form.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_estimate_probability_form.py <plot_estimate_probability_form.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_estimate_probability_form.ipynb <plot_estimate_probability_form.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
