
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_reliability_sensitivity/reliability/plot_subset_sampling.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_reliability_sensitivity_reliability_plot_subset_sampling.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_reliability_sensitivity_reliability_plot_subset_sampling.py:


Subset Sampling
===============

.. GENERATED FROM PYTHON SOURCE LINES 7-31

The objective is to evaluate a probability from the Subset sampling technique.

We consider the function :math:`g : \mathbb{R}^2 \rightarrow \mathbb{R}` defined by:

.. math::
  \begin{align*}
  g(X)= 20-(x_1-x_2)^2-8(x_1+x_2-4)^3
  \end{align*}

and the input random vector :math:`X = (X_1, X_2)` which follows a Normal distribution with independent components,
and identical marginals with 0.25 mean and unit variance:

.. math::
  \begin{align*}
  X \sim  \mathcal{N}(\mu = [0.25, 0.25], \sigma = [1,1], cor = I_2)
  \end{align*}

We want to evaluate the probability:

.. math::
  \begin{align*}
  p = \mathbb{P} \{ g(X) \leq 0 \}
  \end{align*}


.. GENERATED FROM PYTHON SOURCE LINES 34-35

First, import the python modules:

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as otv








.. GENERATED FROM PYTHON SOURCE LINES 41-43

Create the probabilistic model :math:`Y = g(X)`
-----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 45-46

Create the input random vector :math:`X`:

.. GENERATED FROM PYTHON SOURCE LINES 46-48

.. code-block:: Python

    X = ot.RandomVector(ot.Normal([0.25] * 2, [1] * 2, ot.IdentityMatrix(2)))








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Create the function :math:`g`:

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: Python

    g = ot.SymbolicFunction(["x1", "x2"], ["20-(x1-x2)^2-8*(x1+x2-4)^3"])
    print("function g: ", g)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    function g:  [x1,x2]->[20-(x1-x2)^2-8*(x1+x2-4)^3]




.. GENERATED FROM PYTHON SOURCE LINES 54-55

Create the output random vector :math:`Y = g(X)`:

.. GENERATED FROM PYTHON SOURCE LINES 55-57

.. code-block:: Python

    Y = ot.CompositeRandomVector(g, X)








.. GENERATED FROM PYTHON SOURCE LINES 58-60

Create the event :math:`\{ Y = g(X) \leq 0 \}`
----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 60-62

.. code-block:: Python

    event = ot.ThresholdEvent(Y, ot.Less(), 0.0)








.. GENERATED FROM PYTHON SOURCE LINES 63-65

Evaluate the probability with the subset sampling technique
-----------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: Python

    algo = ot.SubsetSampling(event)








.. GENERATED FROM PYTHON SOURCE LINES 70-71

In order to get all the inputs and outputs that realize the event, you have to mention it now:

.. GENERATED FROM PYTHON SOURCE LINES 71-73

.. code-block:: Python

    algo.setKeepSample(True)








.. GENERATED FROM PYTHON SOURCE LINES 74-75

Now you can run the algorithm!

.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: Python

    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 78-83

.. code-block:: Python

    result = algo.getResult()
    proba = result.getProbabilityEstimate()
    print("Proba Subset = ", proba)
    print("Current coefficient of variation = ", result.getCoefficientOfVariation())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Proba Subset =  0.00036469999999999976
    Current coefficient of variation =  0.08712426010311422




.. GENERATED FROM PYTHON SOURCE LINES 84-85

The length of the confidence interval of level :math:`95\%` is:

.. GENERATED FROM PYTHON SOURCE LINES 85-88

.. code-block:: Python

    length95 = result.getConfidenceLength()
    print("Confidence length (0.95) = ", result.getConfidenceLength())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Confidence length (0.95) =  0.0001245526444995276




.. GENERATED FROM PYTHON SOURCE LINES 89-90

which enables to build the confidence interval:

.. GENERATED FROM PYTHON SOURCE LINES 90-98

.. code-block:: Python

    print(
        "Confidence interval (0.95) = [",
        proba - length95 / 2,
        ", ",
        proba + length95 / 2,
        "]",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Confidence interval (0.95) = [ 0.00030242367775023594 ,  0.0004269763222497636 ]




.. GENERATED FROM PYTHON SOURCE LINES 99-100

You can also get the successive thresholds used by the algorithm:

.. GENERATED FROM PYTHON SOURCE LINES 100-103

.. code-block:: Python

    levels = algo.getThresholdPerStep()
    print("Levels of g = ", levels)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Levels of g =  [56.2773,18.3973,8.37332,0]




.. GENERATED FROM PYTHON SOURCE LINES 104-106

Draw the subset samples used by the algorithm
---------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 108-109

You can get the number :math:`N_s` of steps with:

.. GENERATED FROM PYTHON SOURCE LINES 109-112

.. code-block:: Python

    Ns = algo.getStepsNumber()
    print("Number of steps= ", Ns)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of steps=  4




.. GENERATED FROM PYTHON SOURCE LINES 113-114

Get all the inputs where :math:`g` was evaluated at each step

.. GENERATED FROM PYTHON SOURCE LINES 114-118

.. code-block:: Python

    list_subSamples = list()
    for step in range(Ns):
        list_subSamples.append(algo.getInputSample(step))








.. GENERATED FROM PYTHON SOURCE LINES 119-120

The following graph draws each subset sample and the frontier :math:`g(x_1, x_2) = l_i` where :math:`l_i` is the threshold at the step :math:`i`:

.. GENERATED FROM PYTHON SOURCE LINES 120-128

.. code-block:: Python

    graph = ot.Graph()
    graph.setAxes(True)
    graph.setGrid(True)
    graph.setTitle("Subset sampling: samples")
    graph.setXTitle(r"$x_1$")
    graph.setYTitle(r"$x_2$")
    graph.setLegendPosition("lower left")








.. GENERATED FROM PYTHON SOURCE LINES 129-130

Add all the subset samples:

.. GENERATED FROM PYTHON SOURCE LINES 130-135

.. code-block:: Python

    for i in range(Ns):
        cloud = ot.Cloud(list_subSamples[i])
        cloud.setPointStyle("dot")
        graph.add(cloud)








.. GENERATED FROM PYTHON SOURCE LINES 136-137

Add the frontiers :math:`g(x_1, x_2) = l_i` where :math:`l_i` is the threshold at the step :math:`i`:

.. GENERATED FROM PYTHON SOURCE LINES 137-145

.. code-block:: Python

    gIsoLines = g.draw([-3] * 2, [5] * 2, [128] * 2)
    dr = gIsoLines.getDrawable(0)
    dr.setColor("black")
    for i in range(levels.getSize()):
        dr.setLevels([levels[i]])
        dr.setLegend(r"$g(X) = $" + str(round(levels[i], 2)))
        graph.add(dr)








.. GENERATED FROM PYTHON SOURCE LINES 146-148

.. code-block:: Python

    _ = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_subset_sampling_001.png
   :alt: Subset sampling: samples
   :srcset: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_subset_sampling_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 149-151

Draw the frontiers only
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 153-154

The following graph enables to understand the progression of the algorithm:

.. GENERATED FROM PYTHON SOURCE LINES 154-172

.. code-block:: Python

    graph = ot.Graph()
    graph.setAxes(True)
    graph.setGrid(True)
    dr = gIsoLines.getDrawable(0)
    colors = ot.Drawable().BuildDefaultPalette(len(levels))
    for i in range(levels.getSize()):
        dr.setLevels([levels[i]])
        dr.setLegend(r"$g(X) = $" + str(round(levels[i], 2)))
        dr.setColor(colors[i])
        graph.add(dr)

    graph.setLegendPosition("lower left")
    graph.setTitle("Subset sampling: thresholds")
    graph.setXTitle(r"$x_1$")
    graph.setYTitle(r"$x_2$")

    _ = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_subset_sampling_002.png
   :alt: Subset sampling: thresholds
   :srcset: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_subset_sampling_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 173-175

Get all the input and output points that realized the event
-----------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 177-178

The following lines are possible only if you have mentioned that you wanted to keep samples with the method *algo.setKeepSample(True)*

.. GENERATED FROM PYTHON SOURCE LINES 178-184

.. code-block:: Python

    select = ot.SubsetSampling.EVENT1  # points that realize the event
    step = Ns - 1  # get the working sample from last iteration
    inputEventSample = algo.getInputSample(step, select)
    outputEventSample = algo.getOutputSample(step, select)
    print("Number of event realizations = ", inputEventSample.getSize())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of event realizations =  3647




.. GENERATED FROM PYTHON SOURCE LINES 185-186

Draw them! They are all in the event space.

.. GENERATED FROM PYTHON SOURCE LINES 186-199

.. code-block:: Python

    graph = ot.Graph()
    graph.setAxes(True)
    graph.setGrid(True)
    cloud = ot.Cloud(inputEventSample)
    cloud.setPointStyle("dot")
    graph.add(cloud)
    gIsoLines = g.draw([-3] * 2, [5] * 2, [1000] * 2)
    dr = gIsoLines.getDrawable(0)
    dr.setLevels([0.0])
    dr.setColor("red")
    graph.add(dr)
    _ = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_subset_sampling_003.png
   :alt: plot subset sampling
   :srcset: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_subset_sampling_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 200-201

.. code-block:: Python

    otv.View.ShowAll()








.. _sphx_glr_download_auto_reliability_sensitivity_reliability_plot_subset_sampling.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_subset_sampling.ipynb <plot_subset_sampling.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_subset_sampling.py <plot_subset_sampling.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_subset_sampling.zip <plot_subset_sampling.zip>`
