
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_reliability_sensitivity/reliability/plot_estimate_probability_monte_carlo.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_reliability_sensitivity_reliability_plot_estimate_probability_monte_carlo.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_reliability_sensitivity_reliability_plot_estimate_probability_monte_carlo.py:


Estimate a probability with Monte Carlo
=======================================

.. GENERATED FROM PYTHON SOURCE LINES 6-8

In this example we estimate a probability by means of a simulation algorithm, the Monte-Carlo algorithm. To do this, we need the classes `MonteCarloExperiment` and `ProbabilitySimulationAlgorithm`.
We consider the :ref:`axial stressed beam <use-case-stressed-beam>` example.

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: default

    from openturns.usecases import stressed_beam
    import openturns as ot

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 17-18

We load the model from the usecases module :

.. GENERATED FROM PYTHON SOURCE LINES 18-20

.. code-block:: default

    sm = stressed_beam.AxialStressedBeam()








.. GENERATED FROM PYTHON SOURCE LINES 21-22

We get the joint distribution of the parameters.

.. GENERATED FROM PYTHON SOURCE LINES 22-24

.. code-block:: default

    distribution = sm.distribution








.. GENERATED FROM PYTHON SOURCE LINES 25-26

The model is also stored in the data class :

.. GENERATED FROM PYTHON SOURCE LINES 26-28

.. code-block:: default

    model = sm.model








.. GENERATED FROM PYTHON SOURCE LINES 29-30

We create the event whose probability we want to estimate.

.. GENERATED FROM PYTHON SOURCE LINES 32-36

.. code-block:: default

    vect = ot.RandomVector(distribution)
    G = ot.CompositeRandomVector(model, vect)
    event = ot.ThresholdEvent(G, ot.Less(), 0.0)








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Create a Monte Carlo algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 40-46

.. code-block:: default

    experiment = ot.MonteCarloExperiment()
    algo = ot.ProbabilitySimulationAlgorithm(event, experiment)
    algo.setMaximumCoefficientOfVariation(0.05)
    algo.setMaximumOuterSampling(int(1e5))
    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Retrieve results.

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: default

    result = algo.getResult()
    probability = result.getProbabilityEstimate()
    print("Pf=", probability)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pf= 0.02936292270531395





.. _sphx_glr_download_auto_reliability_sensitivity_reliability_plot_estimate_probability_monte_carlo.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_estimate_probability_monte_carlo.py <plot_estimate_probability_monte_carlo.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_estimate_probability_monte_carlo.ipynb <plot_estimate_probability_monte_carlo.ipynb>`
