
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_reliability_sensitivity/reliability/plot_stiffened_panel.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_reliability_sensitivity_reliability_plot_stiffened_panel.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_reliability_sensitivity_reliability_plot_stiffened_panel.py:


Estimate a buckling probability
===============================

.. GENERATED FROM PYTHON SOURCE LINES 7-12

In this example, we estimate the probability that the output of a function
exceeds a given threshold with the FORM method, the SORM method and an advanced
sampling method.

We consider the :ref:`stiffened panel model <use-case-stiffened-panel>`.

.. GENERATED FROM PYTHON SOURCE LINES 15-17

Define the model
----------------

.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: Python

    from openturns.usecases import stiffened_panel
    import openturns as ot
    import openturns.viewer as viewer

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 26-27

We load the stiffened panel model from the usecases module :

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: Python

    panel = stiffened_panel.StiffenedPanel()
    distribution = panel.distribution
    model = panel.model








.. GENERATED FROM PYTHON SOURCE LINES 32-33

See the input distribution

.. GENERATED FROM PYTHON SOURCE LINES 33-35

.. code-block:: Python

    distribution






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    JointDistribution
    <ul>
      <li>name=JointDistribution</li>
      <li>dimension: 10</li>
      <li>description=[E (Pa),nu (-),h_c (m),ell (m),f_1 (m),f_2 (m),t (m),a (m),b_0 (m),p (m)]#10
      <li>copula: NormalCopula(R = 10x10
    [[  1         0         0         0         0         0         0         0         0         0        ]
     [  0         1         0         0         0         0         0         0         0         0        ]
     [  0         0         1         0         0         0         0         0         0         0        ]
     [  0         0         0         1         0         0         0         0         0         0        ]
     [  0         0         0         0         1        -0.813473  0         0         0         0        ]
     [  0         0         0         0        -0.813473  1         0         0         0         0        ]
     [  0         0         0         0         0         0         1         0         0         0        ]
     [  0         0         0         0         0         0         0         1         0         0        ]
     [  0         0         0         0         0         0         0         0         1         0        ]
     [  0         0         0         0         0         0         0         0         0         1        ]])</li>
    </ul>

    <table>
      <tr>
        <th>Index</th>
        <th>Variable</th>
        <th>Distribution</th>
      </tr>
      <tr>
        <td>0</td>
        <td>E (Pa)</td>
        <td>TruncatedNormal(mu = 1.1e+11, sigma = 5.5e+10, a = 9.9e+10, b = 1.21e+11)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>nu (-)</td>
        <td>Uniform(a = 0.3675, b = 0.3825)</td>
      </tr>
      <tr>
        <td>2</td>
        <td>h_c (m)</td>
        <td>Uniform(a = 0.0285, b = 0.0315)</td>
      </tr>
      <tr>
        <td>3</td>
        <td>ell (m)</td>
        <td>Uniform(a = 0.04655, b = 0.05145)</td>
      </tr>
      <tr>
        <td>4</td>
        <td>f_1 (m)</td>
        <td>Uniform(a = 0.0266, b = 0.0294)</td>
      </tr>
      <tr>
        <td>5</td>
        <td>f_2 (m)</td>
        <td>Uniform(a = 0.00627, b = 0.00693)</td>
      </tr>
      <tr>
        <td>6</td>
        <td>t (m)</td>
        <td>Uniform(a = 8.02e-05, b = 8.181e-05)</td>
      </tr>
      <tr>
        <td>7</td>
        <td>a (m)</td>
        <td>Uniform(a = 0.6039, b = 0.6161)</td>
      </tr>
      <tr>
        <td>8</td>
        <td>b_0 (m)</td>
        <td>Uniform(a = 0.04455, b = 0.04545)</td>
      </tr>
      <tr>
        <td>9</td>
        <td>p (m)</td>
        <td>Uniform(a = 0.03762, b = 0.03838)</td>
      </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 36-37

See the model

.. GENERATED FROM PYTHON SOURCE LINES 37-39

.. code-block:: Python

    model.getOutputDescription()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    [(N_{xy})_{cr}]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 40-41

Draw the distribution of a sample of the output.

.. GENERATED FROM PYTHON SOURCE LINES 41-47

.. code-block:: Python

    sampleSize = 1000
    inputSample = distribution.getSample(sampleSize)
    outputSample = model(inputSample)
    graph = ot.HistogramFactory().build(outputSample).drawPDF()
    _ = viewer.View(graph)




.. image-sg:: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_stiffened_panel_001.png
   :alt: (N_{xy})_{cr} PDF
   :srcset: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_stiffened_panel_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 48-50

Define the event
----------------

.. GENERATED FROM PYTHON SOURCE LINES 52-53

Then we create the event whose probability we want to estimate.

.. GENERATED FROM PYTHON SOURCE LINES 55-61

.. code-block:: Python

    vect = ot.RandomVector(distribution)
    criticalLoad = ot.CompositeRandomVector(model, vect)
    minimumCriticalLoad = 165.0
    event = ot.ThresholdEvent(criticalLoad, ot.Less(), minimumCriticalLoad)
    event.setName("buckling")








.. GENERATED FROM PYTHON SOURCE LINES 62-64

Estimate the probability with FORM
----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 66-67

Define a solver.

.. GENERATED FROM PYTHON SOURCE LINES 69-76

.. code-block:: Python

    optimAlgo = ot.Cobyla()
    optimAlgo.setMaximumCallsNumber(1000)
    optimAlgo.setMaximumAbsoluteError(1.0e-10)
    optimAlgo.setMaximumRelativeError(1.0e-10)
    optimAlgo.setMaximumResidualError(1.0e-10)
    optimAlgo.setMaximumConstraintError(1.0e-10)








.. GENERATED FROM PYTHON SOURCE LINES 77-78

Run FORM.

.. GENERATED FROM PYTHON SOURCE LINES 80-88

.. code-block:: Python

    optimAlgo.setStartingPoint(distribution.getMean())
    algo = ot.FORM(optimAlgo, event)
    n0 = model.getCallsNumber()
    algo.run()
    n1 = model.getCallsNumber()
    result = algo.getResult()
    standardSpaceDesignPoint = result.getStandardSpaceDesignPoint()








.. GENERATED FROM PYTHON SOURCE LINES 89-90

Retrieve results.

.. GENERATED FROM PYTHON SOURCE LINES 92-96

.. code-block:: Python

    result = algo.getResult()
    probability = result.getEventProbability()
    print("Pf (FORM)=%.3e" % probability, "nb evals=", n1 - n0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pf (FORM)=9.602e-04 nb evals= 1




.. GENERATED FROM PYTHON SOURCE LINES 97-98

Importance factors.

.. GENERATED FROM PYTHON SOURCE LINES 100-103

.. code-block:: Python

    graph = result.drawImportanceFactors()
    view = viewer.View(graph)




.. image-sg:: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_stiffened_panel_002.png
   :alt: Importance Factors from Design Point - buckling
   :srcset: /auto_reliability_sensitivity/reliability/images/sphx_glr_plot_stiffened_panel_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 104-106

Estimate the probability with SORM
----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 108-109

Run SORM.

.. GENERATED FROM PYTHON SOURCE LINES 111-116

.. code-block:: Python

    algo = ot.SORM(optimAlgo, event)
    n0 = model.getCallsNumber()
    algo.run()
    n1 = model.getCallsNumber()








.. GENERATED FROM PYTHON SOURCE LINES 117-118

Retrieve results.

.. GENERATED FROM PYTHON SOURCE LINES 120-124

.. code-block:: Python

    result = algo.getResult()
    probability = result.getEventProbabilityBreitung()
    print("Pf (SORM)=%.3e" % probability, "nb evals=", n1 - n0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pf (SORM)=9.757e-05 nb evals= 1




.. GENERATED FROM PYTHON SOURCE LINES 125-127

We see that the FORM and SORM approximations give significantly different
results. Use a simulation algorithm to get a confidence interval.

.. GENERATED FROM PYTHON SOURCE LINES 129-131

Estimate the probability with PostAnalyticalControlledImportanceSampling
------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 133-145

.. code-block:: Python

    algo = ot.PostAnalyticalControlledImportanceSampling(result)
    algo.setBlockSize(100)
    algo.setMaximumOuterSampling(100)
    algo.setMaximumCoefficientOfVariation(0.1)
    n0 = model.getCallsNumber()
    algo.run()
    n1 = model.getCallsNumber()
    result = algo.getResult()
    Pf = result.getProbabilityEstimate()
    print("Pf (sim) = %.3e" % Pf, "nb evals=", n1 - n0)
    width = result.getConfidenceLength(0.95)
    print("C.I (95%)=[" + "%.3e" % (Pf - 0.5 * width), ",%.3e" % (Pf + 0.5 * width), "]")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pf (sim) = 7.120e-05 nb evals= 0
    C.I (95%)=[3.481e-05 ,1.076e-04 ]





.. _sphx_glr_download_auto_reliability_sensitivity_reliability_plot_stiffened_panel.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_stiffened_panel.ipynb <plot_stiffened_panel.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_stiffened_panel.py <plot_stiffened_panel.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_stiffened_panel.zip <plot_stiffened_panel.zip>`
