
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_reliability_sensitivity/design_of_experiments/plot_design_of_experiment_continuous_discrete.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_reliability_sensitivity_design_of_experiments_plot_design_of_experiment_continuous_discrete.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_reliability_sensitivity_design_of_experiments_plot_design_of_experiment_continuous_discrete.py:


Create a design of experiments with discrete and continuous variables
=====================================================================

.. GENERATED FROM PYTHON SOURCE LINES 6-7

In this example we present how to create a design of experiments when one (or several) of the marginals are discrete.

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 16-17

To create the first marginal of the distribution, we select a univariate discrete distribution. Some of them, like the `Bernoulli` or `Geometric` distributions, are implemented in the library as classes. In this example however, we pick the `UserDefined` distribution that assigns equal weights to the values -2, -1, 1 and 2.

.. GENERATED FROM PYTHON SOURCE LINES 19-22

.. code-block:: default

    sample = ot.Sample([[-2.], [-1.], [1.], [2.]])
    sample






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>v0</TH></TR>
    <TR><TH>0</TH><TD>-2</TD></TR>
    <TR><TH>1</TH><TD>-1</TD></TR>
    <TR><TH>2</TH><TD>1</TD></TR>
    <TR><TH>3</TH><TD>2</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 23-25

.. code-block:: default

    X0 = ot.UserDefined(sample)








.. GENERATED FROM PYTHON SOURCE LINES 26-27

For the second marginal, we pick a Gaussian distribution.

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: default

    X1 = ot.Normal()








.. GENERATED FROM PYTHON SOURCE LINES 32-33

Create the multivariate distribution from its marginals and an independent copula.

.. GENERATED FROM PYTHON SOURCE LINES 35-37

.. code-block:: default

    distribution = ot.ComposedDistribution([X0, X1])








.. GENERATED FROM PYTHON SOURCE LINES 38-39

Create the design.

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: default

    size = 100
    experiment = ot.MonteCarloExperiment(distribution, size)
    sample = experiment.generate()








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Plot the design.

.. GENERATED FROM PYTHON SOURCE LINES 49-54

.. code-block:: default

    graph = ot.Graph("MonteCarloExperiment", "x0", "x1", True, "")
    cloud = ot.Cloud(sample, "blue", "fsquare", "")
    graph.add(cloud)
    view = viewer.View(graph)




.. image-sg:: /auto_reliability_sensitivity/design_of_experiments/images/sphx_glr_plot_design_of_experiment_continuous_discrete_001.png
   :alt: MonteCarloExperiment
   :srcset: /auto_reliability_sensitivity/design_of_experiments/images/sphx_glr_plot_design_of_experiment_continuous_discrete_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 55-56

Any other type of design of experiments can be generated based on this distribution. The following example shows a LHS experiment.

.. GENERATED FROM PYTHON SOURCE LINES 58-64

.. code-block:: default

    size = 100
    alwaysShuffle = True
    randomShift = True
    experiment = ot.LHSExperiment(distribution, size, alwaysShuffle, randomShift)
    sample = experiment.generate()








.. GENERATED FROM PYTHON SOURCE LINES 65-70

.. code-block:: default

    graph = ot.Graph("LHSExperiment", "x0", "x1", True, "")
    cloud = ot.Cloud(sample, "blue", "fsquare", "")
    graph.add(cloud)
    view = viewer.View(graph)
    plt.show()



.. image-sg:: /auto_reliability_sensitivity/design_of_experiments/images/sphx_glr_plot_design_of_experiment_continuous_discrete_002.png
   :alt: LHSExperiment
   :srcset: /auto_reliability_sensitivity/design_of_experiments/images/sphx_glr_plot_design_of_experiment_continuous_discrete_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.120 seconds)


.. _sphx_glr_download_auto_reliability_sensitivity_design_of_experiments_plot_design_of_experiment_continuous_discrete.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_design_of_experiment_continuous_discrete.py <plot_design_of_experiment_continuous_discrete.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_design_of_experiment_continuous_discrete.ipynb <plot_design_of_experiment_continuous_discrete.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
