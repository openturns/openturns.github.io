.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_reliability_sensitivity_design_of_experiments_plot_mixed_design.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_reliability_sensitivity_design_of_experiments_plot_mixed_design.py:


Mixed deterministic and probabilistic design of experiments
===========================================================

In this example we build a mixed deterministic and probabilistic design of experiments in which levels are defined from the probabilistic distribution of the input random vector. More precisely, we show how to create an `Axial` design of experiments whose points are updated so that they match the mean and variance of the distribution.

The example here is an axial design of experiments where levels are proportional to the standard deviation of each component of the random input vector, and centered on the mean vector of the random input vector.


.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    import math as m
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)








Define the underlying random vector. 


.. code-block:: default

    dim = 2
    R = ot.CorrelationMatrix(dim)
    distribution = ot.Normal([2.0, 3.0], [0.5, 2.0], R)
    rv = ot.RandomVector(distribution)








Define the structure of the design of experiments. 


.. code-block:: default

    levels = [1.0, 2.0, 3.0]
    experiment = ot.Axial(dim, levels)
    sample = experiment.generate()








Scale the design proportionnally to the standard deviation of each component.


.. code-block:: default

    covariance = rv.getCovariance()
    scaling = [m.sqrt(covariance[i, i]) for i in range(dim)]
    print('scaling=', scaling)
    sample *= scaling





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scaling= [0.5, 2.0]




Center the design around the mean point of the distribution. 


.. code-block:: default

    center = rv.getMean()
    print('center=', center)
    sample += center





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    center= [2,3]




Draw the design as well as the distribution iso-values.


.. code-block:: default

    graph = distribution.drawPDF()
    doe = ot.Cloud(sample)
    doe.setColor('red')
    doe.setLegend('design')
    graph.add(doe)
    view = viewer.View(graph)
    plt.show()



.. image:: /auto_reliability_sensitivity/design_of_experiments/images/sphx_glr_plot_mixed_design_001.png
    :alt: [X0,X1] iso-PDF
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.146 seconds)


.. _sphx_glr_download_auto_reliability_sensitivity_design_of_experiments_plot_mixed_design.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mixed_design.py <plot_mixed_design.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mixed_design.ipynb <plot_mixed_design.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
