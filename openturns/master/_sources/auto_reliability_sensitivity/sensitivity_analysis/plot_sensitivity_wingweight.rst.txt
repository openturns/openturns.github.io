
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_reliability_sensitivity/sensitivity_analysis/plot_sensitivity_wingweight.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_reliability_sensitivity_sensitivity_analysis_plot_sensitivity_wingweight.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_reliability_sensitivity_sensitivity_analysis_plot_sensitivity_wingweight.py:


Example of sensitivity analyses on the wing weight model
=========================================================

.. GENERATED FROM PYTHON SOURCE LINES 6-20

This example is a brief overview of the use of the most usual sensitivity analysis techniques and how to call them:

- PCC: Partial Correlation Coefficients
- PRCC: Partial Rank Correlation Coefficients
- SRC: Standard Regression Coefficients
- SRRC: Standard Rank Regression Coefficients
- Pearson coefficients
- Spearman coefficients
- Taylor expansion importance factors
- Sobol' indices
- Rank-based estimation of Sobol' indices
- HSIC : Hilbert-Schmidt Independence Criterion

We present the methods on the :ref:`WingWeight function<use-case-wingweight>` and use the same notations.

.. GENERATED FROM PYTHON SOURCE LINES 23-29

Definition of the model
-----------------------

We load the model from the usecases module.



.. GENERATED FROM PYTHON SOURCE LINES 29-38

.. code-block:: Python

    import openturns as ot
    import openturns.experimental as otexp
    import openturns.viewer as otv
    from openturns.usecases.wingweight_function import WingWeightModel
    from matplotlib import pylab as plt

    ot.Log.Show(ot.Log.NONE)
    m = WingWeightModel()








.. GENERATED FROM PYTHON SOURCE LINES 39-46

Cross cuts of the function
--------------------------

Let's have a look on 2D cross cuts of the wing weight function.
For each 2D cross cut, the other variables are fixed to the input distribution mean values.
This graph allows one to have a first idea of the variations of the function in pair of dimensions.
The colors of each contour plot are comparable. The number of contour levels are related to the amount of variation of the function in the corresponding coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 46-106

.. code-block:: Python


    ot.ResourceMap.SetAsBool("Contour-DefaultIsFilled", True)
    ot.ResourceMap.SetAsUnsignedInteger("Contour-DefaultLevelsNumber", 50)

    lowerBound = m.distributionX.getRange().getLowerBound()
    upperBound = m.distributionX.getRange().getUpperBound()

    grid = ot.GridLayout(m.dim - 1, m.dim - 1)
    for i in range(1, m.dim):
        for j in range(i):
            crossCutIndices = []
            crossCutReferencePoint = []
            for k in range(m.dim):
                if k != i and k != j:
                    crossCutIndices.append(k)
                    # Definition of the reference point
                    crossCutReferencePoint.append(m.distributionX.getMean()[k])

            # Definition of 2D cross cut function
            crossCutFunction = ot.ParametricFunction(
                m.model, crossCutIndices, crossCutReferencePoint
            )
            crossCutLowerBound = [lowerBound[j], lowerBound[i]]
            crossCutUpperBound = [upperBound[j], upperBound[i]]

            # Get and customize the contour plot
            graph = crossCutFunction.draw(crossCutLowerBound, crossCutUpperBound)
            graph.setTitle("")
            contour = graph.getDrawable(0).getImplementation()
            contour.setVmin(176.0)
            contour.setVmax(363.0)
            contour.setColorBarPosition("")  # suppress colorbar of each plot
            contour.setColorMap("hsv")
            graph.setDrawable(contour, 0)
            graph.setXTitle("")
            graph.setYTitle("")
            graph.setTickLocation(ot.GraphImplementation.TICKNONE)
            graph.setGrid(False)

            # Creation of axes title
            if j == 0:
                graph.setYTitle(m.distributionX.getDescription()[i])
            if i == 9:
                graph.setXTitle(m.distributionX.getDescription()[j])

            grid.setGraph(i - 1, j, graph)

    # Get View object to manipulate the underlying figure
    v = otv.View(grid)
    fig = v.getFigure()
    fig.set_size_inches(12, 12)  # reduce the size

    # Setup a large colorbar
    axes = v.getAxes()
    colorbar = fig.colorbar(
        v.getSubviews()[6][2].getContourSets()[0], ax=axes[:, -1], fraction=0.3
    )

    fig.subplots_adjust(top=1.0, bottom=0.0, left=0.0, right=1.0)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_001.png
   :alt: plot sensitivity wingweight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 107-108

We can see that the variables :math:`t_c, N_z, A, W_{dg}` seem to be influent on the wing weight whereas :math:`\Lambda, \ell, q, W_p, W_{fw}` have less influence on the function.

.. GENERATED FROM PYTHON SOURCE LINES 110-114

Data generation
---------------

We create the input and output data for the estimation of the different sensitivity coefficients and we get the input variables description:

.. GENERATED FROM PYTHON SOURCE LINES 114-121

.. code-block:: Python


    inputNames = m.distributionX.getDescription()

    size = 500
    inputDesign = m.distributionX.getSample(size)
    outputDesign = m.model(inputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 122-124

Let's estimate the PCC, PRCC, SRC, SRRC, Pearson and Spearman coefficients, display and analyze them.
We create a :class:`~openturns.CorrelationAnalysis` model.

.. GENERATED FROM PYTHON SOURCE LINES 124-127

.. code-block:: Python


    corr_analysis = ot.CorrelationAnalysis(inputDesign, outputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 128-131

PCC coefficients
----------------
We compute here PCC coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 133-136

.. code-block:: Python

    pcc_indices = corr_analysis.computePCC()
    print(pcc_indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.943195,-0.0719582,0.966757,0.104356,-0.0168604,0.271874,-0.945223,0.981902,0.914195,0.448612]#10




.. GENERATED FROM PYTHON SOURCE LINES 140-145

.. code-block:: Python

    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        pcc_indices, inputNames, "PCC coefficients - Wing weight"
    )
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_002.png
   :alt: PCC coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 146-149

PRCC coefficients
-----------------
We compute here PRCC coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 151-154

.. code-block:: Python

    prcc_indices = corr_analysis.computePRCC()
    print(prcc_indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.868747,-0.0690074,0.926949,-0.0705432,0.0165869,0.260671,-0.874925,0.961124,0.819996,0.286135]#10




.. GENERATED FROM PYTHON SOURCE LINES 155-160

.. code-block:: Python

    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        prcc_indices, inputNames, "PRCC coefficients - Wing weight"
    )
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_003.png
   :alt: PRCC coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 161-164

SRC coefficients
-------------------
We compute here SRC coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 166-169

.. code-block:: Python

    src_indices = corr_analysis.computeSRC()
    print(src_indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.344248,-0.00874343,0.460798,0.0127166,-0.00204946,0.0342475,-0.352055,0.632169,0.274457,0.0611331]#10




.. GENERATED FROM PYTHON SOURCE LINES 170-175

.. code-block:: Python

    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        src_indices, inputNames, "SRC coefficients - Wing weight"
    )
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_004.png
   :alt: SRC coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 176-177

Normalized squared SRC coefficients (coefficients are made to sum to 1) :

.. GENERATED FROM PYTHON SOURCE LINES 179-182

.. code-block:: Python

    squared_src_indices = corr_analysis.computeSquaredSRC(True)
    print(squared_src_indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.126759,8.17707e-05,0.22712,0.000172973,4.49275e-06,0.00125456,0.132573,0.427465,0.0805719,0.00399749]#10




.. GENERATED FROM PYTHON SOURCE LINES 183-184

And their associated graph:

.. GENERATED FROM PYTHON SOURCE LINES 186-191

.. code-block:: Python

    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        squared_src_indices, inputNames, "Squared SRC coefficients - Wing weight"
    )
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_005.png
   :alt: Squared SRC coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 195-198

SRRC coefficients
--------------------
We compute here SRRC coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 200-203

.. code-block:: Python

    srrc_indices = corr_analysis.computeSRRC()
    print(srrc_indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.323303,-0.0127426,0.4578,-0.0130256,0.00306401,0.0497339,-0.333881,0.645126,0.264992,0.0552599]#10




.. GENERATED FROM PYTHON SOURCE LINES 204-209

.. code-block:: Python

    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        srrc_indices, inputNames, "SRRC coefficients - Wing weight"
    )
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_006.png
   :alt: SRRC coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 210-213

Pearson coefficients
-----------------------
We compute here the Pearson :math:`\rho` coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 215-218

.. code-block:: Python

    pearson_correlation = corr_analysis.computeLinearCorrelation()
    print(pearson_correlation)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.336267,-0.00931802,0.471827,-0.0318564,-0.0224971,0.00708379,-0.332824,0.683086,0.364572,0.052548]#10




.. GENERATED FROM PYTHON SOURCE LINES 219-225

.. code-block:: Python

    title_pearson_graph = "Pearson correlation coefficients - Wing weight"
    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        pearson_correlation, inputNames, title_pearson_graph
    )
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_007.png
   :alt: Pearson correlation coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 226-229

Spearman coefficients
-----------------------
We compute here the Spearman :math:`\rho_s` coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 231-234

.. code-block:: Python

    spearman_correlation = corr_analysis.computeSpearmanCorrelation()
    print(spearman_correlation)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.313817,-0.0128127,0.467777,-0.0533252,-0.0170981,0.0222142,-0.315071,0.692137,0.3569,0.0451898]#10




.. GENERATED FROM PYTHON SOURCE LINES 235-242

.. code-block:: Python

    title_spearman_graph = "Spearman correlation coefficients - Wing weight"
    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        spearman_correlation, inputNames, title_spearman_graph
    )
    view = otv.View(graph)
    plt.show()




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_008.png
   :alt: Spearman correlation coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 243-246

The different computed correlation estimators show that the variables :math:`S_w, A, N_z, t_c` seem to be the most correlated with the wing weight in absolute value.
Pearson and Spearman coefficients do not reveal any linear nor monotonic correlation as no coefficients are equal to +/- 1.
Coefficients about :math:`t_c` are negative revealing a negative correlation with the wing weight, that is consistent with the model expression.

.. GENERATED FROM PYTHON SOURCE LINES 250-253

Taylor expansion importance factors
-----------------------------------
We compute here the Taylor expansion importance factors using :class:`~openturns.TaylorExpansionMoments`.

.. GENERATED FROM PYTHON SOURCE LINES 257-258

We create a distribution-based RandomVector.

.. GENERATED FROM PYTHON SOURCE LINES 258-260

.. code-block:: Python

    X = ot.RandomVector(m.distributionX)








.. GENERATED FROM PYTHON SOURCE LINES 261-262

We create a composite RandomVector Y from X and m.model.

.. GENERATED FROM PYTHON SOURCE LINES 262-264

.. code-block:: Python

    Y = ot.CompositeRandomVector(m.model, X)








.. GENERATED FROM PYTHON SOURCE LINES 265-266

We create a Taylor expansion method to approximate moments.

.. GENERATED FROM PYTHON SOURCE LINES 266-268

.. code-block:: Python

    taylor = ot.TaylorExpansionMoments(Y)








.. GENERATED FROM PYTHON SOURCE LINES 269-270

We get the importance factors.

.. GENERATED FROM PYTHON SOURCE LINES 270-272

.. code-block:: Python

    print(taylor.getImportanceFactors())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [Sw : 0.130315, Wfw : 2.94004e-06, A : 0.228153, Lambda : 0, q : 8.25053e-05, l : 0.00180269, tc : 0.135002, Nz : 0.412794, Wdg : 0.0883317, Wp : 0.00351621]




.. GENERATED FROM PYTHON SOURCE LINES 273-274

We draw the importance factors

.. GENERATED FROM PYTHON SOURCE LINES 274-278

.. code-block:: Python

    graph = taylor.drawImportanceFactors()
    graph.setTitle("Taylor expansion imporfance factors - Wing weight")
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_009.png
   :alt: Taylor expansion imporfance factors - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 279-281

The Taylor expansion importance factors is consistent with the previous estimators as :math:`S_w, A, N_z, t_c` seem to be the most influent variables.
To analyze the relevance of the previous indices, a Sobol' analysis is now carried out.

.. GENERATED FROM PYTHON SOURCE LINES 284-287

Sobol' indices
--------------
We compute the Sobol' indices from both sampling approach and  Polynomial Chaos Expansion.

.. GENERATED FROM PYTHON SOURCE LINES 289-296

.. code-block:: Python

    sizeSobol = 1000
    sie = ot.SobolIndicesExperiment(m.distributionX, sizeSobol)
    inputDesignSobol = sie.generate()
    inputNames = m.distributionX.getDescription()
    inputDesignSobol.setDescription(inputNames)
    inputDesignSobol.getSize()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    12000



.. GENERATED FROM PYTHON SOURCE LINES 297-298

We see that 12000 function evaluations are required to estimate the first order and total Sobol' indices.

.. GENERATED FROM PYTHON SOURCE LINES 300-301

Then, we evaluate the outputs corresponding to this design of experiments.

.. GENERATED FROM PYTHON SOURCE LINES 303-305

.. code-block:: Python

    outputDesignSobol = m.model(inputDesignSobol)








.. GENERATED FROM PYTHON SOURCE LINES 306-307

We estimate the Sobol' indices with the :class:`~openturns.SaltelliSensitivityAlgorithm`.

.. GENERATED FROM PYTHON SOURCE LINES 309-313

.. code-block:: Python

    sensitivityAnalysis = ot.SaltelliSensitivityAlgorithm(
        inputDesignSobol, outputDesignSobol, sizeSobol
    )








.. GENERATED FROM PYTHON SOURCE LINES 314-315

The `getFirstOrderIndices` and `getTotalOrderIndices` methods respectively return estimates of all first order and total Sobol' indices.

.. GENERATED FROM PYTHON SOURCE LINES 317-319

.. code-block:: Python

    print("First order indices:", sensitivityAnalysis.getFirstOrderIndices())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First order indices: [0.0792809,-0.0497666,0.169256,-0.0493279,-0.0498466,-0.0506475,0.10712,0.368467,0.0390652,-0.0458043]#10




.. GENERATED FROM PYTHON SOURCE LINES 320-323

.. code-block:: Python

    print("Total order indices:", sensitivityAnalysis.getTotalOrderIndices())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Total order indices: [0.123244,0.000121576,0.255372,0.000317252,-0.000327391,0.00504451,0.201303,0.417093,0.0948381,0.00271039]#10




.. GENERATED FROM PYTHON SOURCE LINES 324-325

The `draw` method produces the following graph. The vertical bars represent the 95% confidence intervals of the estimates.

.. GENERATED FROM PYTHON SOURCE LINES 327-331

.. code-block:: Python

    graph = sensitivityAnalysis.draw()
    graph.setTitle("Sobol indices with Saltelli - wing weight")
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_010.png
   :alt: Sobol indices with Saltelli - wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 332-333

We see that several Sobol' indices are negative, that is inconsistent with the theory. Therefore, a larger number of samples is required to get consistent indices

.. GENERATED FROM PYTHON SOURCE LINES 333-352

.. code-block:: Python

    sizeSobol = 10000
    sie = ot.SobolIndicesExperiment(m.distributionX, sizeSobol)
    inputDesignSobol = sie.generate()
    inputNames = m.distributionX.getDescription()
    inputDesignSobol.setDescription(inputNames)
    inputDesignSobol.getSize()
    outputDesignSobol = m.model(inputDesignSobol)

    sensitivityAnalysis = ot.SaltelliSensitivityAlgorithm(
        inputDesignSobol, outputDesignSobol, sizeSobol
    )

    sensitivityAnalysis.getFirstOrderIndices()
    sensitivityAnalysis.getTotalOrderIndices()

    graph = sensitivityAnalysis.draw()
    graph.setTitle("Sobol indices with Saltelli - wing weight")
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_011.png
   :alt: Sobol indices with Saltelli - wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 353-354

It improves the accuracy of the estimation but, for very low indices, Saltelli scheme is not accurate since several confidence intervals provide negative lower bounds.

.. GENERATED FROM PYTHON SOURCE LINES 356-358

Now, we estimate the Sobol' indices using Polynomial Chaos Expansion.
We create a Functional Chaos Expansion.

.. GENERATED FROM PYTHON SOURCE LINES 358-369

.. code-block:: Python

    sizePCE = 800
    inputDesignPCE = m.distributionX.getSample(sizePCE)
    outputDesignPCE = m.model(inputDesignPCE)

    algo = ot.FunctionalChaosAlgorithm(inputDesignPCE, outputDesignPCE, m.distributionX)

    algo.run()
    result = algo.getResult()
    print(result.getResiduals())
    print(result.getRelativeErrors())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.000355663]
    [4.30461e-08]




.. GENERATED FROM PYTHON SOURCE LINES 370-372

The relative errors are low : this indicates that the PCE model has good accuracy.
Then, we exploit the surrogate model to compute the Sobol' indices.

.. GENERATED FROM PYTHON SOURCE LINES 372-375

.. code-block:: Python

    sensitivityAnalysis = ot.FunctionalChaosSobolIndices(result)
    sensitivityAnalysis






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    FunctionalChaosSobolIndices
    <ul>
      <li>input dimension: 10</li>
      <li>output dimension: 1</li>
      <li>basis size: 761</li>
      <li>mean: [268.085]</li>
      <li>std-dev: [48.0822]</li>
    </ul>
    <table>
      <tr>
        <th>Input</th>
        <th>Variable</th>
        <th>Sobol' index</th>
        <th>Total index</th>
      </tr>
      <tr>
        <td>0</td>
        <td>Sw</td>
        <td>0.124224</td>
        <td>0.127655</td>
      </tr>
      <tr>
        <td>1</td>
        <td>Wfw</td>
        <td>0.000003</td>
        <td>0.000010</td>
      </tr>
      <tr>
        <td>2</td>
        <td>A</td>
        <td>0.220448</td>
        <td>0.226185</td>
      </tr>
      <tr>
        <td>3</td>
        <td>Lambda</td>
        <td>0.000488</td>
        <td>0.000509</td>
      </tr>
      <tr>
        <td>4</td>
        <td>q</td>
        <td>0.000090</td>
        <td>0.000097</td>
      </tr>
      <tr>
        <td>5</td>
        <td>l</td>
        <td>0.001807</td>
        <td>0.001875</td>
      </tr>
      <tr>
        <td>6</td>
        <td>tc</td>
        <td>0.140939</td>
        <td>0.145042</td>
      </tr>
      <tr>
        <td>7</td>
        <td>Nz</td>
        <td>0.411980</td>
        <td>0.420005</td>
      </tr>
      <tr>
        <td>8</td>
        <td>Wdg</td>
        <td>0.084693</td>
        <td>0.087309</td>
      </tr>
      <tr>
        <td>9</td>
        <td>Wp</td>
        <td>0.003347</td>
        <td>0.003371</td>
      </tr>
    </table>
    <table>
      <tr>
        <th>Index</th>
        <th>Multi-index</th>
        <th>Part of variance</th>
      </tr>
      <tr>
        <td>8</td>
        <td>[0,0,0,0,0,0,0,1,0,0]#10</td>
        <td>0.410672</td>
      </tr>
      <tr>
        <td>3</td>
        <td>[0,0,1,0,0,0,0,0,0,0]#10</td>
        <td>0.220297</td>
      </tr>
      <tr>
        <td>7</td>
        <td>[0,0,0,0,0,0,1,0,0,0]#10</td>
        <td>0.138339</td>
      </tr>
      <tr>
        <td>1</td>
        <td>[1,0,0,0,0,0,0,0,0,0]#10</td>
        <td>0.124212</td>
      </tr>
      <tr>
        <td>9</td>
        <td>[0,0,0,0,0,0,0,0,1,0]#10</td>
        <td>0.084638</td>
      </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 376-383

.. code-block:: Python

    firstOrder = [sensitivityAnalysis.getSobolIndex(i) for i in range(m.dim)]
    totalOrder = [sensitivityAnalysis.getSobolTotalIndex(i) for i in range(m.dim)]
    graph = ot.SobolIndicesAlgorithm.DrawSobolIndices(inputNames, firstOrder, totalOrder)
    graph.setTitle("Sobol indices by Polynomial Chaos Expansion - wing weight")
    view = otv.View(graph)





.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_012.png
   :alt: Sobol indices by Polynomial Chaos Expansion - wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 384-386

Furthermore, first order Sobol' indices can also been estimated in a data-driven way using a rank-based sensitivity algorithm.
In such a way, the estimation of sensitivity indices does not involve any surrogate model.

.. GENERATED FROM PYTHON SOURCE LINES 386-398

.. code-block:: Python

    sizeRankSobol = 800
    inputDesignRankSobol = m.distributionX.getSample(sizeRankSobol)
    outputDesignankSobol = m.model(inputDesignRankSobol)
    myRankSobol = otexp.RankSobolSensitivityAlgorithm(
        inputDesignRankSobol, outputDesignankSobol
    )
    indicesrankSobol = myRankSobol.getFirstOrderIndices()
    print("First order indices:", indicesrankSobol)
    graph = myRankSobol.draw()
    graph.setTitle("Sobol indices by rank-based estimation - wing weight")
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_013.png
   :alt: Sobol indices by rank-based estimation - wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_013.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First order indices: [0.0948125,-0.011427,0.213625,0.0602035,0.0279379,-0.0029266,0.202861,0.411582,0.0791244,-0.0444128]#10




.. GENERATED FROM PYTHON SOURCE LINES 399-405

The Sobol' indices confirm the previous analyses, in terms of ranking of the most influent variables.
We also see that five variables have a quasi null total Sobol' indices, that indicates almost no influence on the wing weight.
There is no discrepancy between first order and total Sobol' indices, that indicates no or very low interaction between the variables in the variance of the output.
As the most important variables act only through decoupled first degree contributions, the hypothesis of a linear dependence between the input variables and the weight is legitimate.
This explains why both squared SRC and Taylor give the exact same results even if the first one is based on a :math:`\mathcal{L}^2` linear approximation
and the second one is based on a linear expansion around the mean value of the input variables.

.. GENERATED FROM PYTHON SOURCE LINES 409-411

HSIC indices
------------

.. GENERATED FROM PYTHON SOURCE LINES 413-414

We then estimate the HSIC indices using a data-driven approach.

.. GENERATED FROM PYTHON SOURCE LINES 414-420

.. code-block:: Python

    sizeHSIC = 250
    inputDesignHSIC = m.distributionX.getSample(sizeHSIC)
    outputDesignHSIC = m.model(inputDesignHSIC)

    covarianceModelCollection = []








.. GENERATED FROM PYTHON SOURCE LINES 421-427

.. code-block:: Python

    for i in range(m.dim):
        Xi = inputDesignHSIC.getMarginal(i)
        inputCovariance = ot.SquaredExponential(1)
        inputCovariance.setScale(Xi.computeStandardDeviation())
        covarianceModelCollection.append(inputCovariance)








.. GENERATED FROM PYTHON SOURCE LINES 428-429

We define a covariance kernel associated to the output variable.

.. GENERATED FROM PYTHON SOURCE LINES 429-433

.. code-block:: Python

    outputCovariance = ot.SquaredExponential(1)
    outputCovariance.setScale(outputDesignHSIC.computeStandardDeviation())
    covarianceModelCollection.append(outputCovariance)








.. GENERATED FROM PYTHON SOURCE LINES 434-436

In this paragraph, we perform the analysis on the raw data: that is
the global HSIC estimator.

.. GENERATED FROM PYTHON SOURCE LINES 436-438

.. code-block:: Python

    estimatorType = ot.HSICUStat()








.. GENERATED FROM PYTHON SOURCE LINES 439-440

We now build the HSIC estimator:

.. GENERATED FROM PYTHON SOURCE LINES 440-444

.. code-block:: Python

    globHSIC = ot.HSICEstimatorGlobalSensitivity(
        covarianceModelCollection, inputDesignHSIC, outputDesignHSIC, estimatorType
    )








.. GENERATED FROM PYTHON SOURCE LINES 445-446

We get the R2-HSIC indices:

.. GENERATED FROM PYTHON SOURCE LINES 446-450

.. code-block:: Python

    R2HSICIndices = globHSIC.getR2HSICIndices()
    print("\n Global HSIC analysis")
    print("R2-HSIC Indices: ", R2HSICIndices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


     Global HSIC analysis
    R2-HSIC Indices:  [0.0780962,0.00221686,0.140306,-0.00613866,0.0023793,-0.00132872,0.0649564,0.312287,0.0914946,-0.00189391]#10




.. GENERATED FROM PYTHON SOURCE LINES 451-452

and the HSIC indices:

.. GENERATED FROM PYTHON SOURCE LINES 452-455

.. code-block:: Python

    HSICIndices = globHSIC.getHSICIndices()
    print("HSIC Indices: ", HSICIndices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    HSIC Indices:  [0.00725694,0.000201445,0.0129624,-0.000551457,0.000213765,-0.000118734,0.00593143,0.0276205,0.0082076,-0.00016761]#10




.. GENERATED FROM PYTHON SOURCE LINES 456-457

The p-value by permutation.

.. GENERATED FROM PYTHON SOURCE LINES 457-460

.. code-block:: Python

    pvperm = globHSIC.getPValuesPermutation()
    print("p-value (permutation): ", pvperm)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    p-value (permutation):  [0,0.277228,0,0.940594,0.237624,0.50495,0,0,0,0.524752]#10




.. GENERATED FROM PYTHON SOURCE LINES 461-462

We have an asymptotic estimate of the value for this estimator.

.. GENERATED FROM PYTHON SOURCE LINES 462-465

.. code-block:: Python

    pvas = globHSIC.getPValuesAsymptotic()
    print("p-value (asymptotic): ", pvas)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    p-value (asymptotic):  [6.82222e-09,0.277419,3.89579e-15,0.919663,0.272547,0.514991,1.22543e-07,1.43071e-28,9.55187e-11,0.555707]#10




.. GENERATED FROM PYTHON SOURCE LINES 466-467

We vizualise the results.

.. GENERATED FROM PYTHON SOURCE LINES 467-479

.. code-block:: Python

    graph1 = globHSIC.drawHSICIndices()
    view1 = otv.View(graph1)

    graph2 = globHSIC.drawPValuesAsymptotic()
    view2 = otv.View(graph2)

    graph3 = globHSIC.drawR2HSICIndices()
    view3 = otv.View(graph3)

    graph4 = globHSIC.drawPValuesPermutation()
    view4 = otv.View(graph4)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_014.png
         :alt: HSIC indices
         :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_014.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_015.png
         :alt: Asymptotic p-values
         :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_016.png
         :alt: R2-HSIC indices
         :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_016.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_017.png
         :alt: p-values by permutation
         :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_017.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 480-483

The HSIC indices go in the same way as the other estimators in terms the most influent variables.
The variables :math:`W_{fw}, q, l, W_p` seem to be independent to the output as the corresponding p-values are high.
We can also see that the asymptotic p-values and p-values estimated by permutation are quite similar.

.. GENERATED FROM PYTHON SOURCE LINES 485-486

Reset default settings

.. GENERATED FROM PYTHON SOURCE LINES 486-487

.. code-block:: Python

    ot.ResourceMap.Reload()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.415 seconds)


.. _sphx_glr_download_auto_reliability_sensitivity_sensitivity_analysis_plot_sensitivity_wingweight.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sensitivity_wingweight.ipynb <plot_sensitivity_wingweight.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sensitivity_wingweight.py <plot_sensitivity_wingweight.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_sensitivity_wingweight.zip <plot_sensitivity_wingweight.zip>`
