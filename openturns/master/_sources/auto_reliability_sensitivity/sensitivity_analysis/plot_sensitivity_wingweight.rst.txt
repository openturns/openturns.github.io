
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_reliability_sensitivity/sensitivity_analysis/plot_sensitivity_wingweight.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_reliability_sensitivity_sensitivity_analysis_plot_sensitivity_wingweight.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_reliability_sensitivity_sensitivity_analysis_plot_sensitivity_wingweight.py:


Example of sensitivity analyses on the wing weight model
=========================================================

.. GENERATED FROM PYTHON SOURCE LINES 6-19

This example is a brief overview of the use of the most usual sensitivity analysis techniques and how to call them:

- PCC: Partial Correlation Coefficients
- PRCC: Partial Rank Correlation Coefficients 
- SRC: Standard Regression Coefficients
- SRRC: Standard Rank Regression Coefficients
- Pearson coefficients
- Spearman coefficients
- Taylor expansion importance factors
- Sobol' indices
- HSIC : Hilbert-Schmidt Independence Criterion

We present the methods on the :ref:`WingWeight function<use-case-wingweight>` and use the same notations.

.. GENERATED FROM PYTHON SOURCE LINES 22-28

Definition of the model
-----------------------

We load the model from the usecases module.



.. GENERATED FROM PYTHON SOURCE LINES 28-36

.. code-block:: default

    import openturns as ot
    import openturns.viewer as otv
    from openturns.usecases.wingweight_function import WingWeightModel
    from matplotlib import pylab as plt
    import numpy as np
    ot.Log.Show(ot.Log.NONE)
    m = WingWeightModel()








.. GENERATED FROM PYTHON SOURCE LINES 37-44

Cross cuts of the function
--------------------------

Let's have a look on 2D cross cuts of the wing weight function.
For each 2D cross cut, the other variables are fixed to the input distribution mean values.
This graph allows to have a first idea of the variations of the function in pair of dimensions.
The colors of each contour plot are comparable. The number of contour levels are related to the amount of variation of the function in the corresponding coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 44-89

.. code-block:: default

    fig = plt.figure(figsize=(12, 12))
    lowerBound = m.distributionX.getRange().getLowerBound()
    upperBound = m.distributionX.getRange().getUpperBound()

    # Definition of number of meshes in x and y axes for the 2D cross cut plots
    nX = 20
    nY = 20
    for i in range(m.dim):
        for j in range(i):
            crossCutIndices = []
            crossCutReferencePoint = []
            for k in range(m.dim):
                if k != i and k != j:
                    crossCutIndices.append(k)
                    # Definition of the reference point
                    crossCutReferencePoint.append(m.distributionX.getMean()[k])
            # Definition of 2D cross cut function
            crossCutFunction = ot.ParametricFunction(
                m.model, crossCutIndices, crossCutReferencePoint)
            crossCutLowerBound = [lowerBound[j], lowerBound[i]]
            crossCutUpperBound = [upperBound[j], upperBound[i]]
            # Definition of the mesh
            inputData = ot.Box([nX, nY]).generate()
            inputData *= (ot.Point(crossCutUpperBound)-ot.Point(crossCutLowerBound))
            inputData += ot.Point(crossCutLowerBound)
            meshX = np.array(inputData)[:,0].reshape(nX+2,nY+2)
            meshY = np.array(inputData)[:,1].reshape(nX+2,nY+2)
            data = crossCutFunction(inputData)
            meshZ = np.array(data).reshape(nX+2,nY+2)
            levels = [(150 + 3*i) for i in range(101)]
        
            # Creation of the contour        
            index = 1 + i * m.dim + j

            ax = fig.add_subplot(m.dim, m.dim, index)
            ax.contour(meshX, meshY,meshZ,levels,cmap='hsv')
            ax.set_xticks([])
            ax.set_yticks([])        
        
            # Creation of axes title
            if j==0:
                ax.set_ylabel(m.distributionX.getDescription()[i])            
            if i ==9:
                ax.set_xlabel(m.distributionX.getDescription()[j])




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_001.png
   :alt: plot sensitivity wingweight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 90-91

We can see that the variables :math:`t_c, N_z, A, W_{dg}` seem to be influent on the wing weight whereas :math:`l, W_p, W_{fw}` do not have influence on the function.

.. GENERATED FROM PYTHON SOURCE LINES 94-98

Data generation 
---------------

We create the input and output data for the estimation of the different sensitivity coefficients and we get the input variables description:

.. GENERATED FROM PYTHON SOURCE LINES 98-105

.. code-block:: default


    inputNames = m.distributionX.getDescription()

    size = 500
    inputDesign = m.distributionX.getSample(size)
    outputDesign = m.model(inputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Let's estimate the PCC, PRCC, SRC, SRRC, Pearson and Spearman coefficients, display and analyze them.
 We create a :class:`~openturns.CorrelationAnalysis` model.

.. GENERATED FROM PYTHON SOURCE LINES 108-111

.. code-block:: default


    corr_analysis = ot.CorrelationAnalysis(inputDesign, outputDesign)








.. GENERATED FROM PYTHON SOURCE LINES 112-115

PCC coefficients
----------------
We compute here PCC coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 117-120

.. code-block:: default

    pcc_indices = corr_analysis.computePCC()
    print(pcc_indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.940186,0.0882968,0.968989,0.0101513,0.115705,0.315289,-0.947166,0.981847,0.917402,0.44622]#10




.. GENERATED FROM PYTHON SOURCE LINES 124-128

.. code-block:: default

    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        pcc_indices, inputNames, "PCC coefficients - Wing weight")
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_002.png
   :alt: PCC coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 129-132

PRCC coefficients
-----------------
We compute here PRCC coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 134-137

.. code-block:: default

    prcc_indices = corr_analysis.computePRCC()
    print(prcc_indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.8486,0.0649984,0.913677,-0.0206522,0.0858264,0.179864,-0.862092,0.949614,0.816437,0.340957]#10




.. GENERATED FROM PYTHON SOURCE LINES 138-142

.. code-block:: default

    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        prcc_indices, inputNames, "PRCC coefficients - Wing weight")
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_003.png
   :alt: PRCC coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 143-146

SRC coefficients
-------------------
We compute here SRC coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 148-151

.. code-block:: default

    src_indices = corr_analysis.computeSRC()
    print(src_indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.368479,0.0117622,0.519118,0.00135185,0.0153738,0.043904,-0.391804,0.692999,0.303627,0.0659533]#10




.. GENERATED FROM PYTHON SOURCE LINES 152-156

.. code-block:: default

    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        src_indices, inputNames, 'SRC coefficients - Wing weight')
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_004.png
   :alt: SRC coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 157-158

Normalized squared SRC coefficients (coefficients are made to sum to 1) :

.. GENERATED FROM PYTHON SOURCE LINES 160-163

.. code-block:: default

    squared_src_indices = corr_analysis.computeSquaredSRC(True)
    print(squared_src_indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.119327,0.000121588,0.236833,1.60608e-06,0.000207717,0.00169402,0.134911,0.422061,0.0810197,0.00382282]#10




.. GENERATED FROM PYTHON SOURCE LINES 164-165

And their associated graph:

.. GENERATED FROM PYTHON SOURCE LINES 167-171

.. code-block:: default

    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        squared_src_indices, inputNames, 'Squared SRC coefficients - Wing weight')
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_005.png
   :alt: Squared SRC coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 175-178

SRRC coefficients
--------------------
We compute here SRRC coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 180-183

.. code-block:: default

    srrc_indices = corr_analysis.computeSRRC()
    print(srrc_indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.361267,0.0145646,0.501659,-0.00463828,0.0191614,0.0407509,-0.380531,0.683358,0.313877,0.0808765]#10




.. GENERATED FROM PYTHON SOURCE LINES 184-188

.. code-block:: default

    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(
        srrc_indices, inputNames, 'SRRC coefficients - Wing weight')
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_006.png
   :alt: SRRC coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 189-192

Pearson coefficients
-----------------------
We compute here the Pearson :math:`\rho` coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 194-197

.. code-block:: default

    pearson_correlation = corr_analysis.computePearsonCorrelation()
    print(pearson_correlation)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.235512,-0.0328824,0.419915,-0.0135446,-0.0692302,0.0434365,-0.379096,0.612647,0.335063,0.0419078]#10




.. GENERATED FROM PYTHON SOURCE LINES 198-204

.. code-block:: default

    title_pearson_graph = "Pearson correlation coefficients - Wing weight"
    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(pearson_correlation,
                                                                 inputNames,
                                                                 title_pearson_graph)
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_007.png
   :alt: Pearson correlation coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 205-208

Spearman coefficients
-----------------------
We compute here the Spearman :math:`\rho_s` coefficients using the :class:`~openturns.CorrelationAnalysis`.

.. GENERATED FROM PYTHON SOURCE LINES 210-213

.. code-block:: default

    spearman_correlation = corr_analysis.computeSpearmanCorrelation()
    print(spearman_correlation)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.226962,-0.0274201,0.40528,-0.0187471,-0.0642766,0.0358186,-0.366801,0.605454,0.344385,0.0551515]#10




.. GENERATED FROM PYTHON SOURCE LINES 214-221

.. code-block:: default

    title_spearman_graph = "Spearman correlation coefficients - Wing weight"
    graph = ot.SobolIndicesAlgorithm.DrawCorrelationCoefficients(spearman_correlation,
                                                                 inputNames,
                                                                 title_spearman_graph)
    view = otv.View(graph)
    plt.show()




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_008.png
   :alt: Spearman correlation coefficients - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 222-225

The different computed correlation estimators show that the variables :math:`S_w, A, N_z, t_c` seem to be the most correlated with the wing weight in absolute value.
Pearson and Spearman coefficients do not reveal any linear nor monotonic correlation as no coefficients are equal to +/- 1.
Coefficients about :math:`t_c` are negative revealing a negative correlation with the wing weight, that is consistent with the model expression.

.. GENERATED FROM PYTHON SOURCE LINES 229-232

Taylor expansion importance factors
-----------------------------------
We compute here the Taylor expansion importance factors using :class:`~openturns.TaylorExpansionMoments`.

.. GENERATED FROM PYTHON SOURCE LINES 236-237

We create a distribution-based RandomVector.

.. GENERATED FROM PYTHON SOURCE LINES 237-239

.. code-block:: default

    X = ot.RandomVector(m.distributionX)








.. GENERATED FROM PYTHON SOURCE LINES 240-241

We create a composite RandomVector Y from X and m.model.

.. GENERATED FROM PYTHON SOURCE LINES 241-243

.. code-block:: default

    Y = ot.CompositeRandomVector(m.model, X)








.. GENERATED FROM PYTHON SOURCE LINES 244-245

We create a Taylor expansion method to approximate moments.

.. GENERATED FROM PYTHON SOURCE LINES 245-247

.. code-block:: default

    taylor = ot.TaylorExpansionMoments(Y)








.. GENERATED FROM PYTHON SOURCE LINES 248-249

We get the importance factors.

.. GENERATED FROM PYTHON SOURCE LINES 249-251

.. code-block:: default

    print(taylor.getImportanceFactors())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [Sw : 0.130315, Wfw : 2.94004e-06, A : 0.228153, Lambda : 0, q : 8.25053e-05, l : 0.00180269, tc : 0.135002, Nz : 0.412794, Wdg : 0.0883317, Wp : 0.00351621]




.. GENERATED FROM PYTHON SOURCE LINES 252-253

We draw the importance factors

.. GENERATED FROM PYTHON SOURCE LINES 253-257

.. code-block:: default

    graph = taylor.drawImportanceFactors()
    graph.setTitle('Taylor expansion imporfance factors - Wing weight')
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_009.png
   :alt: Taylor expansion imporfance factors - Wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 258-260

The Taylor expansion importance factors is consistent with the previous estimators as :math:`S_w, A, N_z, t_c` seem to be the most influent variables.
To analyze the relevance of the previous indices, a Sobol' analysis is now carried out.

.. GENERATED FROM PYTHON SOURCE LINES 263-266

Sobol' indices
--------------
We compute the Sobol' indices from both sampling approach and  Polynomial Chaos Expansion.

.. GENERATED FROM PYTHON SOURCE LINES 268-275

.. code-block:: default

    sizeSobol = 1000
    sie = ot.SobolIndicesExperiment(m.distributionX, sizeSobol)
    inputDesignSobol = sie.generate()
    inputNames = m.distributionX.getDescription()
    inputDesignSobol.setDescription(inputNames)
    inputDesignSobol.getSize()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    12000



.. GENERATED FROM PYTHON SOURCE LINES 276-277

We see that 12000 function evaluations are required to estimate the first order and total Sobol' indices.

.. GENERATED FROM PYTHON SOURCE LINES 279-280

Then, we evaluate the outputs corresponding to this design of experiments.

.. GENERATED FROM PYTHON SOURCE LINES 282-284

.. code-block:: default

    outputDesignSobol = m.model(inputDesignSobol)








.. GENERATED FROM PYTHON SOURCE LINES 285-286

We estimate the Sobol' indices with the :class:`~openturns.SaltelliSensitivityAlgorithm`.

.. GENERATED FROM PYTHON SOURCE LINES 288-291

.. code-block:: default

    sensitivityAnalysis = ot.SaltelliSensitivityAlgorithm(
        inputDesignSobol, outputDesignSobol, sizeSobol)








.. GENERATED FROM PYTHON SOURCE LINES 292-293

The `getFirstOrderIndices` and `getTotalOrderIndices` methods respectively return estimates of all first order and total Sobol' indices.

.. GENERATED FROM PYTHON SOURCE LINES 295-297

.. code-block:: default

    print('First order indices:', sensitivityAnalysis.getFirstOrderIndices())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First order indices: [0.0895403,-0.0324985,0.224239,-0.0324775,-0.0326605,-0.0297425,0.111533,0.459428,0.0692415,-0.0257065]#10




.. GENERATED FROM PYTHON SOURCE LINES 298-301

.. code-block:: default

    print('Total order indices:',sensitivityAnalysis.getTotalOrderIndices())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Total order indices: [0.132254,1.75663e-05,0.25098,0.000159035,0.000417434,0.000214447,0.144213,0.410061,0.101327,0.00225025]#10




.. GENERATED FROM PYTHON SOURCE LINES 302-303

The `draw` method produces the following graph. The vertical bars represent the 95% confidence intervals of the estimates.

.. GENERATED FROM PYTHON SOURCE LINES 305-309

.. code-block:: default

    graph = sensitivityAnalysis.draw()
    graph.setTitle('Sobol indices with Saltelli - wing weight')
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_010.png
   :alt: Sobol indices with Saltelli - wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 310-311

We see that several Sobol' indices are negative, that is inconsistent with the theory. Therefore, a larger number of samples is required to get consistent indices

.. GENERATED FROM PYTHON SOURCE LINES 311-329

.. code-block:: default

    sizeSobol = 10000
    sie = ot.SobolIndicesExperiment(m.distributionX, sizeSobol)
    inputDesignSobol = sie.generate()
    inputNames = m.distributionX.getDescription()
    inputDesignSobol.setDescription(inputNames)
    inputDesignSobol.getSize()
    outputDesignSobol = m.model(inputDesignSobol)

    sensitivityAnalysis = ot.SaltelliSensitivityAlgorithm(
        inputDesignSobol, outputDesignSobol, sizeSobol)
    
    sensitivityAnalysis.getFirstOrderIndices()
    sensitivityAnalysis.getTotalOrderIndices()

    graph = sensitivityAnalysis.draw()
    graph.setTitle('Sobol indices with Saltelli - wing weight')
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_011.png
   :alt: Sobol indices with Saltelli - wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 330-331

It improves the accuracy of the estimation but, for very low indices, Saltelli scheme is not accurate since several confidence intervals provide negative lower bounds.

.. GENERATED FROM PYTHON SOURCE LINES 333-335

Now, we estimate the Sobol' indices using Polynomial Chaos Expansion.
We first create a Functional Chaos Expansion.

.. GENERATED FROM PYTHON SOURCE LINES 335-355

.. code-block:: default

    sizePCE = 200
    inputDesignPCE = m.distributionX.getSample(sizePCE)
    outputDesignPCE = m.model(inputDesignPCE)

    multivariateBasis = ot.OrthogonalProductPolynomialFactory(
        [m.distributionX.getMarginal(i) for i in range(m.dim)])
    selectionAlgorithm = ot.LeastSquaresMetaModelSelectionFactory()
    projectionStrategy = ot.LeastSquaresStrategy(inputDesignPCE, outputDesignPCE, selectionAlgorithm)
    totalDegree = 4
    enumfunc = multivariateBasis.getEnumerateFunction()
    P = enumfunc.getStrataCumulatedCardinal(totalDegree)
    adaptiveStrategy = ot.FixedStrategy(multivariateBasis, P)
    algo = ot.FunctionalChaosAlgorithm(
        inputDesignPCE, outputDesignPCE, m.distributionX, adaptiveStrategy, projectionStrategy)

    algo.run()
    result = algo.getResult()
    print(result.getResiduals())
    print(result.getRelativeErrors())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.00955479]
    [1.07233e-06]




.. GENERATED FROM PYTHON SOURCE LINES 356-357

The relative errors are very low: this indicates that the PCE model has good accuracy.

.. GENERATED FROM PYTHON SOURCE LINES 359-360

Then, we exploit the surrogate model to compute the Sobol' indices.

.. GENERATED FROM PYTHON SOURCE LINES 360-370

.. code-block:: default

    sensitivityAnalysis = ot.FunctionalChaosSobolIndices(result)
    print(sensitivityAnalysis.summary())
    firstOrder = [sensitivityAnalysis.getSobolIndex(i) for i in range(m.dim)]
    totalOrder = [sensitivityAnalysis.getSobolTotalIndex(
        i) for i in range(m.dim)]
    graph = ot.SobolIndicesAlgorithm.DrawSobolIndices(
        inputNames, firstOrder, totalOrder)
    graph.setTitle('Sobol indices by Polynomial Chaos Expansion - wing weight')
    view = otv.View(graph)




.. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_012.png
   :alt: Sobol indices by Polynomial Chaos Expansion - wing weight
   :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_012.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     input dimension: 10
     output dimension: 1
     basis size: 105
     mean: [268.111]
     std-dev: [48.101]
    ------------------------------------------------------------
    Index   | Multi-indice                  | Part of variance  
    ------------------------------------------------------------
          6 | [0,0,0,0,0,0,0,1,0,0]         | 0.410796
          2 | [0,0,1,0,0,0,0,0,0,0]         | 0.220073
          5 | [0,0,0,0,0,0,1,0,0,0]         | 0.139081
          1 | [1,0,0,0,0,0,0,0,0,0]         | 0.124534
          7 | [0,0,0,0,0,0,0,0,1,0]         | 0.0844863
    ------------------------------------------------------------


    ------------------------------------------------------------
    Component | Sobol index            | Sobol total index      
    ------------------------------------------------------------
            0 | 0.12455                | 0.127885              
            1 | 0                      | 5.11089e-06           
            2 | 0.220194               | 0.225845              
            3 | 0.000545033            | 0.000563498           
            4 | 6.52128e-05            | 8.87667e-05           
            5 | 0.00172527             | 0.00177244            
            6 | 0.141499               | 0.14544               
            7 | 0.412025               | 0.419721              
            8 | 0.0845279              | 0.08702               
            9 | 0.00329707             | 0.00334609            
    ------------------------------------------------------------






.. GENERATED FROM PYTHON SOURCE LINES 371-373

The Sobol' indices confirm the previous analyses, in terms of ranking of the most influent variables. We also see that five variables have a quasi null total Sobol' indices, that indicates almost no influence on the wing weight.
There is no discrepancy between first order and total Sobol' indices, that indicates no or very low interaction between the variables in the variance of the output.

.. GENERATED FROM PYTHON SOURCE LINES 377-379

HSIC indices
------------

.. GENERATED FROM PYTHON SOURCE LINES 381-382

We then estimate the HSIC indices using a data-driven approach by exploiting the design of experiments used to train the PCE model.

.. GENERATED FROM PYTHON SOURCE LINES 382-387

.. code-block:: default

    inputDesignHSIC = inputDesignPCE
    outputDesignHSIC = outputDesignPCE

    covarianceModelCollection = []








.. GENERATED FROM PYTHON SOURCE LINES 388-394

.. code-block:: default

    for i in range(m.dim):
        Xi = inputDesignHSIC.getMarginal(i)
        inputCovariance = ot.SquaredExponential(1)
        inputCovariance.setScale(Xi.computeStandardDeviation())
        covarianceModelCollection.append(inputCovariance)








.. GENERATED FROM PYTHON SOURCE LINES 395-396

We define a covariance kernel associated to the output variable.

.. GENERATED FROM PYTHON SOURCE LINES 396-400

.. code-block:: default

    outputCovariance = ot.SquaredExponential(1)
    outputCovariance.setScale(outputDesignHSIC.computeStandardDeviation())
    covarianceModelCollection.append(outputCovariance)








.. GENERATED FROM PYTHON SOURCE LINES 401-403

In this paragraph, we perform the analysis on the raw data: that is
the global HSIC estimator.

.. GENERATED FROM PYTHON SOURCE LINES 404-407

.. code-block:: default


    estimatorType = ot.HSICUStat()








.. GENERATED FROM PYTHON SOURCE LINES 408-409

We now build the HSIC estimator:

.. GENERATED FROM PYTHON SOURCE LINES 409-412

.. code-block:: default

    globHSIC = ot.HSICEstimatorGlobalSensitivity(
        covarianceModelCollection, inputDesignHSIC, outputDesignHSIC, estimatorType)








.. GENERATED FROM PYTHON SOURCE LINES 413-414

We get the R2-HSIC indices:

.. GENERATED FROM PYTHON SOURCE LINES 414-418

.. code-block:: default

    R2HSICIndices = globHSIC.getR2HSICIndices()
    print("\n Global HSIC analysis")
    print("R2-HSIC Indices: ", R2HSICIndices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


     Global HSIC analysis
    R2-HSIC Indices:  [0.0577484,-0.00373071,0.106967,0.00581159,-0.00530909,0.00704091,0.0595426,0.293652,0.0924003,-0.000969001]#10




.. GENERATED FROM PYTHON SOURCE LINES 419-420

and the HSIC indices:

.. GENERATED FROM PYTHON SOURCE LINES 420-423

.. code-block:: default

    HSICIndices = globHSIC.getHSICIndices()
    print("HSIC Indices: ", HSICIndices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    HSIC Indices:  [0.00508928,-0.000316705,0.0089892,0.000494318,-0.00045258,0.000609337,0.00510215,0.0252512,0.00787126,-8.01297e-05]#10




.. GENERATED FROM PYTHON SOURCE LINES 424-425

The p-value by permutation.

.. GENERATED FROM PYTHON SOURCE LINES 425-428

.. code-block:: default

    pvperm = globHSIC.getPValuesPermutation()
    print("p-value (permutation): ", pvperm)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    p-value (permutation):  [0,0.643564,0,0.188119,0.712871,0.168317,0,0,0,0.445545]#10




.. GENERATED FROM PYTHON SOURCE LINES 429-430

We have an asymptotic estimate of the value for this estimator.

.. GENERATED FROM PYTHON SOURCE LINES 430-433

.. code-block:: default

    pvas = globHSIC.getPValuesAsymptotic()
    print("p-value (asymptotic): ", pvas)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    p-value (asymptotic):  [9.37986e-06,0.654557,4.23007e-10,0.180937,0.755991,0.140928,9.18252e-06,8.64633e-23,2.26231e-08,0.473288]#10




.. GENERATED FROM PYTHON SOURCE LINES 434-435

We vizualise the results.

.. GENERATED FROM PYTHON SOURCE LINES 435-447

.. code-block:: default

    graph1 = globHSIC.drawHSICIndices()
    view1 = otv.View(graph1)

    graph2 = globHSIC.drawPValuesAsymptotic()
    view2 = otv.View(graph2)

    graph3 = globHSIC.drawR2HSICIndices()
    view3 = otv.View(graph3)

    graph4 = globHSIC.drawPValuesPermutation()
    view4 = otv.View(graph4)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_013.png
         :alt: HSIC indices
         :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_014.png
         :alt: Asymptotic p-values
         :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_014.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_015.png
         :alt: R2-HSIC indices
         :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_016.png
         :alt: p-values by permutation
         :srcset: /auto_reliability_sensitivity/sensitivity_analysis/images/sphx_glr_plot_sensitivity_wingweight_016.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 448-449

The HSIC indices go in the same way as the other estimators in terms the most influent variables. The variables :math:`W_{fw}, q, l, W_p` seem to be independent to the output as the corresponding p-values are high. We can also see that the asymptotic p-values and p-values estimated by permutation are quite similar.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.034 seconds)


.. _sphx_glr_download_auto_reliability_sensitivity_sensitivity_analysis_plot_sensitivity_wingweight.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sensitivity_wingweight.py <plot_sensitivity_wingweight.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sensitivity_wingweight.ipynb <plot_sensitivity_wingweight.ipynb>`
