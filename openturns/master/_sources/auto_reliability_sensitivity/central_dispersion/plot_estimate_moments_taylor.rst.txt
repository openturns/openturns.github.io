
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_reliability_sensitivity/central_dispersion/plot_estimate_moments_taylor.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_reliability_sensitivity_central_dispersion_plot_estimate_moments_taylor.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_reliability_sensitivity_central_dispersion_plot_estimate_moments_taylor.py:


Estimate moments from Taylor expansions
=======================================
In this example we are going to estimate mean and standard deviation of an output variable of interest thanks to the Taylor variance decomposition method of order 1 or 2.

.. GENERATED FROM PYTHON SOURCE LINES 8-10

Model definition
----------------

.. GENERATED FROM PYTHON SOURCE LINES 12-17

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as viewer
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 18-19

Create a composite random vector

.. GENERATED FROM PYTHON SOURCE LINES 19-31

.. code-block:: Python

    input_names = ["x1", "x2", "x3", "x4"]
    myFunc = ot.SymbolicFunction(input_names, ["cos(x2*x2+x4)/(x1*x1+1+x3^4)"])
    R = ot.CorrelationMatrix(4)
    for i in range(4):
        R[i, i - 1] = 0.25
    distribution = ot.Normal([0.2] * 4, [0.1, 0.2, 0.3, 0.4], R)
    distribution.setDescription(input_names)
    # We create a distribution-based RandomVector
    X = ot.RandomVector(distribution)
    # We create a composite RandomVector Y from X and myFunc
    Y = ot.CompositeRandomVector(myFunc, X)








.. GENERATED FROM PYTHON SOURCE LINES 32-34

Taylor expansion based estimation of the moments
------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 36-37

We create a Taylor expansion method to approximate moments

.. GENERATED FROM PYTHON SOURCE LINES 37-39

.. code-block:: Python

    taylor = ot.TaylorExpansionMoments(Y)








.. GENERATED FROM PYTHON SOURCE LINES 40-42

Analysis of the results
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 44-45

get 1st order mean

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: Python

    print(taylor.getMeanFirstOrder())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.932544]




.. GENERATED FROM PYTHON SOURCE LINES 48-49

get 2nd order mean

.. GENERATED FROM PYTHON SOURCE LINES 49-51

.. code-block:: Python

    print(taylor.getMeanSecondOrder())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.820295]




.. GENERATED FROM PYTHON SOURCE LINES 52-53

get covariance

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: Python

    print(taylor.getCovariance())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 0.0124546 ]]




.. GENERATED FROM PYTHON SOURCE LINES 56-57

draw importance factors

.. GENERATED FROM PYTHON SOURCE LINES 57-59

.. code-block:: Python

    taylor.getImportanceFactors()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=PointWithDescription name=Unnamed dimension=4 description=[x1,x2,x3,x4] values=[0.181718,0.0430356,0.0248297,0.750417]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 60-61

draw importance factors

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: Python

    graph = taylor.drawImportanceFactors()
    view = viewer.View(graph)




.. image-sg:: /auto_reliability_sensitivity/central_dispersion/images/sphx_glr_plot_estimate_moments_taylor_001.svg
   :alt: Importance Factors from Taylor expansions - y0
   :srcset: /auto_reliability_sensitivity/central_dispersion/images/sphx_glr_plot_estimate_moments_taylor_001.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-66

Get the value of the output at the mean point

.. GENERATED FROM PYTHON SOURCE LINES 66-68

.. code-block:: Python

    taylor.getValueAtMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=1 values=[0.932544]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 69-70

Get the gradient value of the output at the mean point

.. GENERATED FROM PYTHON SOURCE LINES 70-72

.. code-block:: Python

    taylor.getGradientAtMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ -0.35812   ]<br>
     [ -0.0912837 ]<br>
     [ -0.0286496 ]<br>
     [ -0.228209  ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 73-74

Get the hessian value of the output at the mean point

.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: Python

    taylor.getHessianAtMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>sheet #0<br>
    [[ -1.51555     0.0350552   0.0220043   0.0876379  ]<br>
     [  0.0350552  -0.605625    0.00280441 -0.373018   ]<br>
     [  0.0220043   0.00280441 -0.427983    0.00701103 ]<br>
     [  0.0876379  -0.373018    0.00701103 -0.932544   ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 77-79

Using finite difference gradients
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 81-84

When no gradient and/or functions are provided for the model, a finite difference
approach is relied on automatically. However, it is possible to manually specify
the characteristic of the considered difference steps.

.. GENERATED FROM PYTHON SOURCE LINES 84-93

.. code-block:: Python



    def myPythonFunction(X):
        x1, x2, x3, x4 = X
        return [np.cos(x2 * x2 + x4) / (x1 * x1 + 1.0 + x3**4)]


    myFunc = ot.PythonFunction(4, 1, myPythonFunction)








.. GENERATED FROM PYTHON SOURCE LINES 94-95

For instance, a user-defined constant step value can be considered

.. GENERATED FROM PYTHON SOURCE LINES 95-106

.. code-block:: Python

    gradEpsilon = [1e-8] * 4
    hessianEpsilon = [1e-7] * 4
    gradStep = ot.ConstantStep(gradEpsilon)  # Costant gradient step
    hessianStep = ot.ConstantStep(hessianEpsilon)  # Constant Hessian step
    myFunc.setGradient(
        ot.CenteredFiniteDifferenceGradient(gradStep, myFunc.getEvaluation())
    )
    myFunc.setHessian(
        ot.CenteredFiniteDifferenceHessian(hessianStep, myFunc.getEvaluation())
    )








.. GENERATED FROM PYTHON SOURCE LINES 107-109

Alternatively, we can consider a finite difference step value which
depends on the location in the input space by relying on the BlendedStep class:

.. GENERATED FROM PYTHON SOURCE LINES 109-120

.. code-block:: Python

    gradEpsilon = [1e-8] * 4
    hessianEpsilon = [1e-7] * 4
    gradStep = ot.BlendedStep(gradEpsilon)  # Costant gradient step
    hessianStep = ot.BlendedStep(hessianEpsilon)  # Constant Hessian step
    myFunc.setGradient(
        ot.CenteredFiniteDifferenceGradient(gradStep, myFunc.getEvaluation())
    )
    myFunc.setHessian(
        ot.CenteredFiniteDifferenceHessian(hessianStep, myFunc.getEvaluation())
    )








.. GENERATED FROM PYTHON SOURCE LINES 121-122

We can then proceed in the same way as before

.. GENERATED FROM PYTHON SOURCE LINES 122-125

.. code-block:: Python

    Y = ot.CompositeRandomVector(myFunc, X)
    taylor = ot.TaylorExpansionMoments(Y)








.. GENERATED FROM PYTHON SOURCE LINES 126-127

.. code-block:: Python

    viewer.View.ShowAll()








.. _sphx_glr_download_auto_reliability_sensitivity_central_dispersion_plot_estimate_moments_taylor.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_estimate_moments_taylor.ipynb <plot_estimate_moments_taylor.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_estimate_moments_taylor.py <plot_estimate_moments_taylor.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_estimate_moments_taylor.zip <plot_estimate_moments_taylor.zip>`
