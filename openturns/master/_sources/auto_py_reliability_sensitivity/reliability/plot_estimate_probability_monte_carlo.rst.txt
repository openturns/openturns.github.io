.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_py_reliability_sensitivity_reliability_plot_estimate_probability_monte_carlo.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_py_reliability_sensitivity_reliability_plot_estimate_probability_monte_carlo.py:


Estimate a probability with Monte Carlo
=======================================

In this example we estimate a probability by means of a simulation algorithm, the Monte-Carlo algorithm. To do this, we need the classes `MonteCarloExperiment` and `ProbabilitySimulationAlgorithm`.

Introduction
------------

We consider a simple beam stressed by a traction load F at both sides.

![Axial stressed beam](axial-stressed-beam.png)

The geometry is supposed to be deterministic; the diameter D is equal to:

.. math::
   D=0.02 \textrm{ (m)}.


By definition, the yield stress is the load divided by the surface. Since the surface is :math:`\pi D^2/4`, the stress is:

.. math::
   S = \frac{F}{\pi D^2/4}.


Failure occurs when the beam plastifies, i.e. when the axial stress gets larger than the yield stress:

.. math::
   R - \frac{F}{\pi D^2/4} \leq 0


where :math:`R` is the strength.

Therefore, the limit state function :math:`G` is: 

.. math::
   G(R,F) = R - \frac{F}{\pi D^2/4},


for any :math:`R,F\in\mathbb{R}`.

The value of the parameter :math:`D` is such that:

.. math::
   D^2/4 = 10^{-4},


which leads to the equation:

.. math::
   G(R,F) = R - \frac{F}{10^{-4} \pi}.


We consider the following distribution functions.

 ========  ===========================================================================
 Variable  Distribution 
 ========  ===========================================================================
  R         LogNormal(:math:`\mu_R=3\times 10^6`, :math:`\sigma_R=3\times 10^5`) [Pa]
  F         Normal(:math:`\mu_F=750`, :math:`\sigma_F=50`) [N]
 ========  ===========================================================================

where :math:`\mu_R=E(R)` and :math:`\sigma_R^2=V(R)` are the mean and the variance of :math:`R`.

The failure probability is: 

.. math::
   P_f = \text{Prob}(G(R,F) \leq 0).


The exact :math:`P_f` is 

.. math::
   P_f = 0.02920.



.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)








Create the joint distribution of the parameters.


.. code-block:: default

    distribution_R = ot.LogNormalMuSigma(300.0, 30.0, 0.0).getDistribution()
    distribution_F = ot.Normal(75e3, 5e3)
    marginals = [distribution_R, distribution_F]
    distribution = ot.ComposedDistribution(marginals)








Create the model.


.. code-block:: default

    model = ot.SymbolicFunction(['R', 'F'], ['R-F/(pi_*100.0)'])








Create the event whose probability we want to estimate.


.. code-block:: default

    vect = ot.RandomVector(distribution)
    G = ot.CompositeRandomVector(model, vect)
    event = ot.ThresholdEvent(G, ot.Less(), 0.0)








Create a Monte Carlo algorithm.


.. code-block:: default

    experiment = ot.MonteCarloExperiment()
    algo = ot.ProbabilitySimulationAlgorithm(event, experiment)
    algo.setMaximumCoefficientOfVariation(0.05)
    algo.setMaximumOuterSampling(int(1e5))
    algo.run()








Retrieve results.


.. code-block:: default

    result = algo.getResult()
    probability = result.getProbabilityEstimate()
    print('Pf=', probability)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Pf= 0.031224851118622166





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.037 seconds)


.. _sphx_glr_download_auto_py_reliability_sensitivity_reliability_plot_estimate_probability_monte_carlo.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_estimate_probability_monte_carlo.py <plot_estimate_probability_monte_carlo.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_estimate_probability_monte_carlo.ipynb <plot_estimate_probability_monte_carlo.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
