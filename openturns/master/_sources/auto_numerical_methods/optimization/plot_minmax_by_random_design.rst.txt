
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_numerical_methods/optimization/plot_minmax_by_random_design.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_numerical_methods_optimization_plot_minmax_by_random_design.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_numerical_methods_optimization_plot_minmax_by_random_design.py:


Mix/max search and sensitivity from design
==========================================

.. GENERATED FROM PYTHON SOURCE LINES 6-7

In this example, we are going to evaluate the minimum and maximum values of the output variable of interest from a sample and to evaluate the gradient of the limit-state function defining the output variable of interest at a particular point.

.. GENERATED FROM PYTHON SOURCE LINES 10-17

.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    import math as m
    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Create the marginal distributions of the parameters.

.. GENERATED FROM PYTHON SOURCE LINES 19-26

.. code-block:: default

    dist_E = ot.Beta(0.93, 2.27, 2.8e7, 4.8e7)
    dist_F = ot.LogNormalMuSigma(30000, 9000, 15000).getDistribution()
    dist_L = ot.Uniform(250, 260)
    dist_I = ot.Beta(2.5, 1.5, 3.1e2, 4.5e2)
    marginals = [dist_E, dist_F, dist_L, dist_I]
    distribution = ot.ComposedDistribution(marginals)








.. GENERATED FROM PYTHON SOURCE LINES 27-28

Sample the inputs.

.. GENERATED FROM PYTHON SOURCE LINES 28-30

.. code-block:: default

    sampleX = distribution.getSample(100)








.. GENERATED FROM PYTHON SOURCE LINES 31-32

Create the model.

.. GENERATED FROM PYTHON SOURCE LINES 32-34

.. code-block:: default

    model = ot.SymbolicFunction(['E', 'F', 'L', 'I'], ['F*L^3/(3*E*I)'])








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Evaluate the outputs.

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: default

    sampleY = model(sampleX)








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Get minimum and maximum values of both inputs and output variables.

.. GENERATED FROM PYTHON SOURCE LINES 40-47

.. code-block:: default

    minY = sampleY.getMin()
    minX = sampleX[sampleY.find(minY)]
    print('min: y=', minY, ' with x=', minX)
    maxY = sampleY.getMax()
    maxX = sampleX[sampleY.find(maxY)]
    print('max: y=', maxY, ' with x=', maxX)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    min: y= [5.53223]  with x= [4.57791e+07,21377.1,251.276,446.39]
    max: y= [22.1267]  with x= [2.84205e+07,42022.2,255.605,371.978]




.. GENERATED FROM PYTHON SOURCE LINES 48-49

Get sensitivity at minimum input values.

.. GENERATED FROM PYTHON SOURCE LINES 49-50

.. code-block:: default

    model.gradient(minX)





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ -1.20846e-07 ]<br>
     [  0.000258792 ]<br>
     [  0.0660496   ]<br>
     [ -0.0123933   ]]</p>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.004 seconds)


.. _sphx_glr_download_auto_numerical_methods_optimization_plot_minmax_by_random_design.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_minmax_by_random_design.py <plot_minmax_by_random_design.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_minmax_by_random_design.ipynb <plot_minmax_by_random_design.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
