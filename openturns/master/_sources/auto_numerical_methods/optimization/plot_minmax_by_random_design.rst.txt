
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_numerical_methods/optimization/plot_minmax_by_random_design.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_numerical_methods_optimization_plot_minmax_by_random_design.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_numerical_methods_optimization_plot_minmax_by_random_design.py:


Mix/max search and sensitivity from design
==========================================

.. GENERATED FROM PYTHON SOURCE LINES 6-8

In this example, we are going to evaluate the minimum and maximum values of the output variable of interest from a sample
and to evaluate the gradient of the limit-state function defining the output variable of interest at a particular point.

.. GENERATED FROM PYTHON SOURCE LINES 11-15

.. code-block:: default

    import openturns as ot

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Create the marginal distributions of the parameters.

.. GENERATED FROM PYTHON SOURCE LINES 17-24

.. code-block:: default

    dist_E = ot.Beta(0.93, 2.27, 2.8e7, 4.8e7)
    dist_F = ot.LogNormalMuSigma(30000, 9000, 15000).getDistribution()
    dist_L = ot.Uniform(250, 260)
    dist_I = ot.Beta(2.5, 1.5, 3.1e2, 4.5e2)
    marginals = [dist_E, dist_F, dist_L, dist_I]
    distribution = ot.ComposedDistribution(marginals)








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Sample the inputs.

.. GENERATED FROM PYTHON SOURCE LINES 26-28

.. code-block:: default

    sampleX = distribution.getSample(100)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Create the model.

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    model = ot.SymbolicFunction(["E", "F", "L", "I"], ["F*L^3/(3*E*I)"])








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Evaluate the outputs.

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: default

    sampleY = model(sampleX)








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Get minimum and maximum values of both inputs and output variables.

.. GENERATED FROM PYTHON SOURCE LINES 38-45

.. code-block:: default

    minY = sampleY.getMin()
    minX = sampleX[sampleY.find(minY)]
    print("min: y=", minY, " with x=", minX)
    maxY = sampleY.getMax()
    maxX = sampleX[sampleY.find(maxY)]
    print("max: y=", maxY, " with x=", maxX)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    min: y= [5.70461]  with x= [4.54452e+07,21315.3,253.496,446.445]
    max: y= [29.211]  with x= [3.24474e+07,64867.3,250.415,358.226]




.. GENERATED FROM PYTHON SOURCE LINES 46-47

Get sensitivity at minimum input values.

.. GENERATED FROM PYTHON SOURCE LINES 47-48

.. code-block:: default

    model.gradient(minX)





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ -1.25527e-07 ]<br>
     [  0.00026763  ]<br>
     [  0.0675113   ]<br>
     [ -0.0127778   ]]</p>
    </div>
    <br />
    <br />


.. _sphx_glr_download_auto_numerical_methods_optimization_plot_minmax_by_random_design.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_minmax_by_random_design.py <plot_minmax_by_random_design.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_minmax_by_random_design.ipynb <plot_minmax_by_random_design.ipynb>`
