.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_numerical_methods_optimization_plot_minmax_optimization.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_numerical_methods_optimization_plot_minmax_optimization.py:


Mix/max search using optimization
=================================

In this example we are going to evaluate the min and max values of the output variable of interest in a domain using an optimization algorithm.


.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    import math as m
    ot.Log.Show(ot.Log.NONE)








Create the marginal distributions of the parameters


.. code-block:: default

    dist_E = ot.Beta(0.93, 2.27, 2.8e7, 4.8e7)
    dist_F = ot.LogNormalMuSigma(30000, 9000, 15000).getDistribution()
    dist_L = ot.Uniform(250, 260)
    dist_I = ot.Beta(2.5, 1.5, 3.1e2, 4.5e2)
    marginals = [dist_E, dist_F, dist_L, dist_I]
    distribution = ot.ComposedDistribution(marginals)








Define bounds


.. code-block:: default

    lowerBound = [marginal.computeQuantile(0.1)[0] for marginal in marginals]
    upperBound = [marginal.computeQuantile(0.9)[0] for marginal in marginals]
    bounds = ot.Interval(lowerBound, upperBound)








Create the model


.. code-block:: default

    model = ot.SymbolicFunction(['E', 'F', 'L', 'I'], ['F*L^3/(3*E*I)'])








Define the problems


.. code-block:: default

    minProblem = ot.OptimizationProblem(model)
    minProblem.setBounds(bounds)

    maxProblem = ot.OptimizationProblem(model)
    maxProblem.setBounds(bounds)
    maxProblem.setMinimization(False)








Create a solver


.. code-block:: default

    solver = ot.TNC()
    solver.setStartingPoint(distribution.getMean())








Solve the problems


.. code-block:: default

    solver.setProblem(minProblem)
    solver.run()
    minResult = solver.getResult()
    print('min: y=', minResult.getOptimalValue(), 'with x=', minResult.getOptimalPoint())

    solver.setProblem(maxProblem)
    solver.run()
    maxResult = solver.getResult()
    print('max: y=', maxResult.getOptimalValue(), 'with x=', maxResult.getOptimalPoint())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    min: y= [6.37642] with x= [4.04419e+07,21319.7,251,435.785]
    max: y= [23.4246] with x= [2.87477e+07,41178.7,259,354.141]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.006 seconds)


.. _sphx_glr_download_auto_numerical_methods_optimization_plot_minmax_optimization.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_minmax_optimization.py <plot_minmax_optimization.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_minmax_optimization.ipynb <plot_minmax_optimization.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
