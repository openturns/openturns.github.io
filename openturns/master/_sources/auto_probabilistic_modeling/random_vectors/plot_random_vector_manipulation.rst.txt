
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_probabilistic_modeling/random_vectors/plot_random_vector_manipulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_probabilistic_modeling_random_vectors_plot_random_vector_manipulation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_probabilistic_modeling_random_vectors_plot_random_vector_manipulation.py:


Create a random vector
======================

.. GENERATED FROM PYTHON SOURCE LINES 7-14

The :class:`~openturns.RandomVector` object represents the concept of random variable.

This class can be cerated by:

- Case 1: directly using the :class:`~openturns.RandomVector` class,
- Case 2: from python, using the :class:`~openturns.PythonRandomVector` class which enables to
  redefine some methods (as the sampling method for example).

.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. code-block:: Python

    import openturns as ot
    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 20-25

Case 1: use the :class:`~openturns.RandomVector` class
------------------------------------------------------

We create the random vector :math:`(X_0, X_1, X_2)` following the Normal
distribution with zero mean and unit variance.

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: Python

    dist3d = ot.Normal(3)
    X = ot.RandomVector(dist3d)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Get the dimension

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: Python

    X.getDimension()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    3



.. GENERATED FROM PYTHON SOURCE LINES 33-34

Get the mean

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: Python

    X.getMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=3 values=[0,0,0]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 37-38

Get the covariance

.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: Python

    X.getCovariance()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ 1 0 0 ]<br>
     [ 0 1 0 ]<br>
     [ 0 0 1 ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 41-42

Draw a sample

.. GENERATED FROM PYTHON SOURCE LINES 42-44

.. code-block:: Python

    X.getSample(5)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>X0</th><th>X1</th><th>X2</th></tr>
      <tr><th>0</th><td>0.6082017</td><td>-1.266173</td><td>-0.4382656</td></tr>
      <tr><th>1</th><td>1.205478</td><td>-2.181385</td><td>0.3500421</td></tr>
      <tr><th>2</th><td>-0.355007</td><td>1.437249</td><td>0.810668</td></tr>
      <tr><th>3</th><td>0.793156</td><td>-0.4705256</td><td>0.2610179</td></tr>
      <tr><th>4</th><td>-2.290062</td><td>-1.282885</td><td>-1.311781</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 45-46

Extract the component :math:`X_1`:

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: Python

    X1 = X.getMarginal(1)
    X1.getSample(5)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>X1</th></tr>
      <tr><th>0</th><td>-0.09078383</td></tr>
      <tr><th>1</th><td>0.9957932</td></tr>
      <tr><th>2</th><td>-0.1394528</td></tr>
      <tr><th>3</th><td>-0.5602056</td></tr>
      <tr><th>4</th><td>0.4454897</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 50-51

Extract the component :math:`(X_1, X_2)`.

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: Python

    X02 = X.getMarginal([0, 2])
    X02.getSample(5)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>X0</th><th>X2</th></tr>
      <tr><th>0</th><td>0.322925</td><td>0.4457853</td></tr>
      <tr><th>1</th><td>-1.038077</td><td>-0.8567123</td></tr>
      <tr><th>2</th><td>0.4736169</td><td>-0.1254977</td></tr>
      <tr><th>3</th><td>0.3514178</td><td>1.782359</td></tr>
      <tr><th>4</th><td>0.07020736</td><td>-0.7813665</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 55-65

Case 2: use the :class:`~openturns.PythonRandomVector` class
------------------------------------------------------------

We create a random vector using the :class:`~openturns.PythonRandomVector` class, which
enables to overload the following methods: *getRealization*, *getSample*,
*getMean* and *getCovariance*.

Inherit :class:`~openturns.PythonRandomVector`
Here, we create a random vector of dimension 2 :math:`(X_1, X_2)`, where :math:`X_1 \sim \cU(0,1)` and
:math:`X_1 \sim \cU(1,3)` with independent components.

.. GENERATED FROM PYTHON SOURCE LINES 65-91

.. code-block:: Python



    class RVEC(ot.PythonRandomVector):
        def __init__(self):
            super(RVEC, self).__init__(2)
            self.setDescription(["R", "S"])

        def getRealization(self):
            X = [ot.RandomGenerator.Generate(), 2.0 + ot.RandomGenerator.Generate()]
            return X

        def getSample(self, size):
            X = []
            for i in range(size):
                X.append(
                    [ot.RandomGenerator.Generate(), 2.0 + ot.RandomGenerator.Generate()]
                )
            return X

        def getMean(self):
            return [0.5, 2.5]

        def getCovariance(self):
            return [[1.0 / 12.0, 0.0], [0.0, 1.0 / 12.0]]









.. GENERATED FROM PYTHON SOURCE LINES 92-93

Instantiate the distribution

.. GENERATED FROM PYTHON SOURCE LINES 93-95

.. code-block:: Python

    randomVector = ot.RandomVector(RVEC())








.. GENERATED FROM PYTHON SOURCE LINES 96-97

Get a sample

.. GENERATED FROM PYTHON SOURCE LINES 97-99

.. code-block:: Python

    randomVector.getSample(5)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>v0</th><th>v1</th></tr>
      <tr><th>0</th><td>0.2036527</td><td>2.855795</td></tr>
      <tr><th>1</th><td>0.4350783</td><td>2.361664</td></tr>
      <tr><th>2</th><td>0.002107615</td><td>2.239434</td></tr>
      <tr><th>3</th><td>0.2551563</td><td>2.591534</td></tr>
      <tr><th>4</th><td>0.1692165</td><td>2.977334</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 100-101

Get its mean

.. GENERATED FROM PYTHON SOURCE LINES 101-103

.. code-block:: Python

    randomVector.getMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[0.5,2.5]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 104-105

Compute the probability contained in an interval

.. GENERATED FROM PYTHON SOURCE LINES 105-106

.. code-block:: Python

    randomVector.getCovariance()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ 0.0833333 0         ]<br>
     [ 0         0.0833333 ]]</p>
    </div>
    <br />
    <br />


.. _sphx_glr_download_auto_probabilistic_modeling_random_vectors_plot_random_vector_manipulation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_random_vector_manipulation.ipynb <plot_random_vector_manipulation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_random_vector_manipulation.py <plot_random_vector_manipulation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_random_vector_manipulation.zip <plot_random_vector_manipulation.zip>`
