
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_probabilistic_modeling/stochastic_processes/plot_create_normal_process.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_probabilistic_modeling_stochastic_processes_plot_create_normal_process.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_probabilistic_modeling_stochastic_processes_plot_create_normal_process.py:


Create a Gaussian process
=========================

.. GENERATED FROM PYTHON SOURCE LINES 7-13

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 14-18

Create a Gaussian process from a covariance model
-------------------------------------------------

In this paragraph we build a Gaussian process from its covariance model.

.. GENERATED FROM PYTHON SOURCE LINES 21-22

We first define a covariance model :

.. GENERATED FROM PYTHON SOURCE LINES 24-32

.. code-block:: Python

    defaultDimension = 1
    # Amplitude values
    amplitude = [1.0] * defaultDimension
    # Scale values
    scale = [1.0] * defaultDimension
    # Covariance model
    myModel = ot.AbsoluteExponential(scale, amplitude)








.. GENERATED FROM PYTHON SOURCE LINES 33-34

We define a mesh,

.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: Python

    tmin = 0.0
    step = 0.1
    n = 11
    myTimeGrid = ot.RegularGrid(tmin, step, n)








.. GENERATED FROM PYTHON SOURCE LINES 40-41

and create the process :

.. GENERATED FROM PYTHON SOURCE LINES 41-44

.. code-block:: Python

    process = ot.GaussianProcess(myModel, myTimeGrid)
    print(process)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    GaussianProcess(trend=[x0]->[0], covariance=AbsoluteExponential(scale=[1], amplitude=[1]))




.. GENERATED FROM PYTHON SOURCE LINES 45-46

We draw the first marginal of a sample of size 6 :

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: Python

    sample = process.getSample(6)
    graph = sample.drawMarginal(0)
    graph.setTitle("First marginal of six realizations of the process")
    view = viewer.View(graph)





.. image-sg:: /auto_probabilistic_modeling/stochastic_processes/images/sphx_glr_plot_create_normal_process_001.png
   :alt: First marginal of six realizations of the process
   :srcset: /auto_probabilistic_modeling/stochastic_processes/images/sphx_glr_plot_create_normal_process_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 53-58

Create a Gaussian process from spectral density
-----------------------------------------------

In this paragraph we build a Gaussian process from its spectral density.


.. GENERATED FROM PYTHON SOURCE LINES 60-61

We first define a spectral model :

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: Python

    amplitude = [1.0, 2.0]
    scale = [4.0, 5.0]
    spatialCorrelation = ot.CorrelationMatrix(2)
    spatialCorrelation[0, 1] = 0.8
    mySpectralModel = ot.CauchyModel(scale, amplitude, spatialCorrelation)








.. GENERATED FROM PYTHON SOURCE LINES 68-69

As usual we define a mesh,

.. GENERATED FROM PYTHON SOURCE LINES 69-71

.. code-block:: Python

    myTimeGrid = ot.RegularGrid(0.0, 0.1, 20)








.. GENERATED FROM PYTHON SOURCE LINES 72-73

and create the process thereafter

.. GENERATED FROM PYTHON SOURCE LINES 73-76

.. code-block:: Python

    process = ot.SpectralGaussianProcess(mySpectralModel, myTimeGrid)
    print(process)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     SpectralGaussianProcess=SpectralGaussianProcess dimension=2 spectralModel=class=CauchyModel amplitude=[1,2] scale=[4,5] spatial correlation=
    [[ 1   0.8 ]
     [ 0.8 1   ]] maximal frequency=5 n frequency=10




.. GENERATED FROM PYTHON SOURCE LINES 77-78

Eventually we draw the first marginal of a sample of size 6 :

.. GENERATED FROM PYTHON SOURCE LINES 78-83

.. code-block:: Python

    sample = process.getSample(6)
    graph = sample.drawMarginal(0)
    graph.setTitle("First marginal of six realizations of the process")
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/stochastic_processes/images/sphx_glr_plot_create_normal_process_002.png
   :alt: First marginal of six realizations of the process
   :srcset: /auto_probabilistic_modeling/stochastic_processes/images/sphx_glr_plot_create_normal_process_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-85

Display figures

.. GENERATED FROM PYTHON SOURCE LINES 85-86

.. code-block:: Python

    plt.show()








.. _sphx_glr_download_auto_probabilistic_modeling_stochastic_processes_plot_create_normal_process.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_create_normal_process.ipynb <plot_create_normal_process.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_create_normal_process.py <plot_create_normal_process.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_create_normal_process.zip <plot_create_normal_process.zip>`
