
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_probabilistic_modeling/stochastic_processes/plot_create_stationary_covmodel.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_probabilistic_modeling_stochastic_processes_plot_create_stationary_covmodel.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_probabilistic_modeling_stochastic_processes_plot_create_stationary_covmodel.py:


Create a stationary covariance model
====================================

.. GENERATED FROM PYTHON SOURCE LINES 7-35

This use case illustrates how the User can create a covariance function from parametric models.
The library implements the *multivariate Exponential model* as a parametric model for the covariance function where the spatial covariance function :math:`\rho` writes:

.. math::
   \rho(\vect{s}, \vect{t} ) = e^{-\left\| \vect{s}- \vect{t} \right\|_2} \quad \forall (\vect{s}, \vect{t}) \in \mathcal{D}

It is possible to define the exponential model from the spatial covariance matrix :math:`\mat{C}^{spat}`
rather than the correlation matrix :math:`\mat{R}`:

.. math::
    \forall \vect{t} \in \mathcal{D},\quad \mat{C}^{spat} = \mathbb{E} \left[ X_{\vect{t}} X^t_{\vect{t}} \right]
    = \mat{A}\,\mat{R}, \mat{A}

with:

.. math::
   \mat{A} = \mbox{Diag}(a_1, \dots, a_d)

We call :math:`\vect{a}` the amplitude vector and :math:`\vect{\lambda}` the scale vector.

The library implements the multivariate exponential model thanks to the object *ExponentialModel* which is created from:


- the scale and amplitude vectors :math:`(\vect{\lambda}, \vect{a})`: in that case, by default :math:`\mat{R} = \mat{I}`;
- the scale and amplitude vectors and the spatial correlation matrix  :math:`(\vect{\lambda}, \vect{a},\mat{R})`;
- the scale and amplitude vectors and the spatial covariance matrix  :math:`(\vect{\lambda}, \vect{a},\mat{C})`;
  Then :math:`\mat{C}` is mapped into the associated correlation matrix :math:`\mat{R}` and the previous constructor is used.


.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: Python

    import openturns as ot









.. GENERATED FROM PYTHON SOURCE LINES 41-42

Create the amplitude vector (output dimension 3)

.. GENERATED FROM PYTHON SOURCE LINES 42-62

.. code-block:: Python

    amplitude = [1.0, 2.0, 3.0]

    # Scale vector (input dimension 1)
    scale = [4.0]

    # SpatialCorrelation
    spatialCorrelation = ot.CorrelationMatrix(3)
    spatialCorrelation[0, 1] = 0.8
    spatialCorrelation[0, 2] = 0.6
    spatialCorrelation[1, 2] = 0.1

    # SpatialCovariance
    spatialCovariance = ot.CovarianceMatrix(3)
    spatialCovariance[0, 0] = 4.0
    spatialCovariance[1, 1] = 5.0
    spatialCovariance[2, 2] = 6.0
    spatialCovariance[0, 1] = 1.2
    spatialCovariance[0, 2] = 0.9
    spatialCovariance[1, 2] = -0.2








.. GENERATED FROM PYTHON SOURCE LINES 63-64

Create the covariance model from the amplitude and scale, no spatial correlation

.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: Python

    ot.ExponentialModel(scale, amplitude)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=ExponentialModel scale=class=Point name=Unnamed dimension=1 values=[4] amplitude=class=Point name=Unnamed dimension=3 values=[1,2,3] spatial correlation=class=CorrelationMatrix dimension=3 implementation=class=MatrixImplementation name=Unnamed rows=3 columns=3 values=[1,0,0,0,1,0,0,0,1] isDiagonal=true
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 67-68

or from the amplitude, scale and spatial vorrelation

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: Python

    ot.ExponentialModel(scale, amplitude, spatialCorrelation)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=ExponentialModel scale=class=Point name=Unnamed dimension=1 values=[4] amplitude=class=Point name=Unnamed dimension=3 values=[1,2,3] spatial correlation=class=CorrelationMatrix dimension=3 implementation=class=MatrixImplementation name=Unnamed rows=3 columns=3 values=[1,0.8,0.6,0.8,1,0.1,0.6,0.1,1] isDiagonal=false
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 71-72

or from the scale and spatial covariance

.. GENERATED FROM PYTHON SOURCE LINES 72-73

.. code-block:: Python

    ot.ExponentialModel(scale, spatialCovariance)





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=ExponentialModel scale=class=Point name=Unnamed dimension=1 values=[4] amplitude=class=Point name=Unnamed dimension=3 values=[2,2.23607,2.44949] spatial correlation=class=CorrelationMatrix dimension=3 implementation=class=MatrixImplementation name=Unnamed rows=3 columns=3 values=[1,0.268328,0.183712,0.268328,1,-0.0365148,0.183712,-0.0365148,1] isDiagonal=false
    </div>
    <br />
    <br />


.. _sphx_glr_download_auto_probabilistic_modeling_stochastic_processes_plot_create_stationary_covmodel.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_create_stationary_covmodel.ipynb <plot_create_stationary_covmodel.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_create_stationary_covmodel.py <plot_create_stationary_covmodel.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_create_stationary_covmodel.zip <plot_create_stationary_covmodel.zip>`
