
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_probabilistic_modeling/distributions/plot_distribution_manipulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_probabilistic_modeling_distributions_plot_distribution_manipulation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_probabilistic_modeling_distributions_plot_distribution_manipulation.py:


Distribution manipulation
=========================

.. GENERATED FROM PYTHON SOURCE LINES 7-22

In this example we are going to exhibit some of the services exposed by the distribution objects:

- ask for the dimension, with the method `getDimension` ;
- extract the marginal distributions, with the method `getMarginal` ;
- to ask for some properties, with `isContinuous`, `isDiscrete`, `isElliptical` ;
- to get the copula, with the method `getCopula` ;
- to ask for some properties on the copula, with the methods `hasIndependentCopula`, `hasEllipticalCopula` ;
- to evaluate some moments, with `getMean`, `getStandardDeviation`, `getCovariance`, `getSkewness`, `getKurtosis` ;
- to evaluate the roughness, with the method `getRoughness` ;
- to get one realization or simultaneously :math:`n` realizations, with the method `getRealization`, `getSample` ;
- to evaluate the probability content of a given interval, with the method `computeProbability` ;
- to evaluate a quantile or a complementary quantile, with the method `computeQuantile` ;
- to evaluate the characteristic function of the distribution ;
- to evaluate the derivative of the CDF or PDF ;
- to draw some curves.

.. GENERATED FROM PYTHON SOURCE LINES 24-30

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 31-32

Create an 1-d distribution

.. GENERATED FROM PYTHON SOURCE LINES 32-45

.. code-block:: Python

    dist_1 = ot.Normal()

    # Create a 2-d distribution
    dist_2 = ot.JointDistribution(
        [ot.Normal(), ot.Triangular(0.0, 2.0, 3.0)], ot.ClaytonCopula(2.3)
    )

    # Create a 3-d distribution
    copula_dim3 = ot.Student(5.0, 3).getCopula()
    dist_3 = ot.JointDistribution(
        [ot.Normal(), ot.Triangular(0.0, 2.0, 3.0), ot.Exponential(0.2)], copula_dim3
    )








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Get the dimension fo the distribution

.. GENERATED FROM PYTHON SOURCE LINES 47-49

.. code-block:: Python

    dist_2.getDimension()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 50-51

Get the 2nd marginal

.. GENERATED FROM PYTHON SOURCE LINES 51-53

.. code-block:: Python

    dist_2.getMarginal(1)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    Triangular
    <ul>
      <li>name=Triangular</li>
      <li>dimension=1</li>
      <li>weight=1</li>
      <li>range=[0, 3]</li>
      <li>description=[X1]</li>
      <li>isParallel=true</li>
      <li>isCopula=false</li>
    </ul>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 54-55

Get a 2-d marginal

.. GENERATED FROM PYTHON SOURCE LINES 55-57

.. code-block:: Python

    dist_3.getMarginal([0, 1]).getDimension()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 58-59

Ask some properties of the distribution

.. GENERATED FROM PYTHON SOURCE LINES 59-61

.. code-block:: Python

    dist_1.isContinuous(), dist_1.isDiscrete(), dist_1.isElliptical()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (True, False, True)



.. GENERATED FROM PYTHON SOURCE LINES 62-63

Get the copula

.. GENERATED FROM PYTHON SOURCE LINES 63-65

.. code-block:: Python

    copula = dist_2.getCopula()








.. GENERATED FROM PYTHON SOURCE LINES 66-67

Ask some properties on the copula

.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: Python

    dist_2.hasIndependentCopula(), dist_2.hasEllipticalCopula()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (False, False)



.. GENERATED FROM PYTHON SOURCE LINES 70-71

Get the mean vector of the distribution

.. GENERATED FROM PYTHON SOURCE LINES 71-73

.. code-block:: Python

    dist_2.getMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[0,1.66667]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 74-75

Get the standard deviation vector of the distribution

.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: Python

    dist_2.getStandardDeviation()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[1,0.62361]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 78-79

Get the covariance matrix of the distribution

.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: Python

    dist_2.getCovariance()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ 1        0.491927 ]<br>
     [ 0.491927 0.388889 ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 82-83

Get the skewness vector of the distribution

.. GENERATED FROM PYTHON SOURCE LINES 83-85

.. code-block:: Python

    dist_2.getSkewness()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[0,-0.305441]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 86-87

Get the kurtosis vector of the distribution

.. GENERATED FROM PYTHON SOURCE LINES 87-89

.. code-block:: Python

    dist_2.getKurtosis()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[3,2.4]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 90-91

Get the roughness of the distribution

.. GENERATED FROM PYTHON SOURCE LINES 91-93

.. code-block:: Python

    dist_1.getRoughness()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.28209479177387814



.. GENERATED FROM PYTHON SOURCE LINES 94-95

Get one realization

.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: Python

    dist_2.getRealization()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[0.331526,2.46203]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 98-99

Get several realizations

.. GENERATED FROM PYTHON SOURCE LINES 99-101

.. code-block:: Python

    dist_2.getSample(5)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>X0</th><th>X1</th></tr>
      <tr><th>0</th><td>-1.101791</td><td>0.5472873</td></tr>
      <tr><th>1</th><td>-0.3932781</td><td>2.473752</td></tr>
      <tr><th>2</th><td>1.409658</td><td>2.197672</td></tr>
      <tr><th>3</th><td>-1.528404</td><td>0.5763847</td></tr>
      <tr><th>4</th><td>0.5662321</td><td>1.920692</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 102-103

Evaluate the PDF at the mean point

.. GENERATED FROM PYTHON SOURCE LINES 103-105

.. code-block:: Python

    dist_2.computePDF(dist_2.getMean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.3528005531670077



.. GENERATED FROM PYTHON SOURCE LINES 106-107

Evaluate the CDF at the mean point

.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: Python

    dist_2.computeCDF(dist_2.getMean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.3706626446357781



.. GENERATED FROM PYTHON SOURCE LINES 110-111

Evaluate the complementary CDF

.. GENERATED FROM PYTHON SOURCE LINES 111-113

.. code-block:: Python

    dist_2.computeComplementaryCDF(dist_2.getMean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.6293373553642219



.. GENERATED FROM PYTHON SOURCE LINES 114-115

Evaluate the survival function at the mean point

.. GENERATED FROM PYTHON SOURCE LINES 115-117

.. code-block:: Python

    dist_2.computeSurvivalFunction(dist_2.getMean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.40769968167281506



.. GENERATED FROM PYTHON SOURCE LINES 118-119

Evaluate the PDF on a sample

.. GENERATED FROM PYTHON SOURCE LINES 119-121

.. code-block:: Python

    dist_2.computePDF(dist_2.getSample(5))






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>v0</th></tr>
      <tr><th>0</th><td>0.2683016</td></tr>
      <tr><th>1</th><td>0.1739274</td></tr>
      <tr><th>2</th><td>0.1028448</td></tr>
      <tr><th>3</th><td>0.2144221</td></tr>
      <tr><th>4</th><td>0.06667854</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 122-123

Evaluate the CDF on a sample

.. GENERATED FROM PYTHON SOURCE LINES 123-125

.. code-block:: Python

    dist_2.computeCDF(dist_2.getSample(5))






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>v0</th></tr>
      <tr><th>0</th><td>0.3512684</td></tr>
      <tr><th>1</th><td>0.07566107</td></tr>
      <tr><th>2</th><td>0.1577371</td></tr>
      <tr><th>3</th><td>0.01886743</td></tr>
      <tr><th>4</th><td>0.9561219</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 126-127

Evaluate the probability content of an 1-d interval

.. GENERATED FROM PYTHON SOURCE LINES 127-130

.. code-block:: Python

    interval = ot.Interval(-2.0, 3.0)
    dist_1.computeProbability(interval)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.9758999700201907



.. GENERATED FROM PYTHON SOURCE LINES 131-132

Evaluate the probability content of a 2-d interval

.. GENERATED FROM PYTHON SOURCE LINES 132-135

.. code-block:: Python

    interval = ot.Interval([0.4, -1], [3.4, 2])
    dist_2.computeProbability(interval)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.129833882783416



.. GENERATED FROM PYTHON SOURCE LINES 136-137

Evaluate the quantile of order `p=90%`

.. GENERATED FROM PYTHON SOURCE LINES 137-139

.. code-block:: Python

    dist_2.computeQuantile(0.90)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[1.60422,2.59627]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 140-141

and the quantile of order 1-p

.. GENERATED FROM PYTHON SOURCE LINES 141-143

.. code-block:: Python

    dist_2.computeQuantile(0.90, True)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[-1.10363,0.899591]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 144-146

Evaluate the quantiles of order p et q
For example, the quantile `90%` and `95%`

.. GENERATED FROM PYTHON SOURCE LINES 146-148

.. code-block:: Python

    dist_1.computeQuantile([0.90, 0.95])






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>v0</th></tr>
      <tr><th>0</th><td>1.281552</td></tr>
      <tr><th>1</th><td>1.644854</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 149-150

and the quantile of order 1-p and 1-q

.. GENERATED FROM PYTHON SOURCE LINES 150-152

.. code-block:: Python

    dist_1.computeQuantile([0.90, 0.95], True)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>v0</th></tr>
      <tr><th>0</th><td>-1.281552</td></tr>
      <tr><th>1</th><td>-1.644854</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 153-154

Evaluate the characteristic function of the distribution (only 1-d)

.. GENERATED FROM PYTHON SOURCE LINES 154-156

.. code-block:: Python

    dist_1.computeCharacteristicFunction(dist_1.getMean()[0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (1+0j)



.. GENERATED FROM PYTHON SOURCE LINES 157-158

Evaluate the derivatives of the PDF with respect to the parameters at mean

.. GENERATED FROM PYTHON SOURCE LINES 158-160

.. code-block:: Python

    dist_2.computePDFGradient(dist_2.getMean())






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=6 values=[0.137017,-0.352801,0.074815,-0.186635,-0.124423,0.0795929]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 161-162

Evaluate the derivatives of the CDF with respect to the parameters at mean

.. GENERATED FROM PYTHON SOURCE LINES 162-164

.. code-block:: Python

    dist_2.computeCDFGradient(dist_2.getMean())






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=6 values=[-0.148573,0,-0.0814977,-0.111133,-0.0740888,0.0294044]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 165-166

Draw PDF

.. GENERATED FROM PYTHON SOURCE LINES 166-169

.. code-block:: Python

    graph = dist_1.drawPDF()
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_distribution_manipulation_001.png
   :alt: plot distribution manipulation
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_distribution_manipulation_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 170-171

Draw CDF

.. GENERATED FROM PYTHON SOURCE LINES 171-174

.. code-block:: Python

    graph = dist_1.drawCDF()
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_distribution_manipulation_002.png
   :alt: plot distribution manipulation
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_distribution_manipulation_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 175-176

Draw an 1-d quantile curve

.. GENERATED FROM PYTHON SOURCE LINES 176-184

.. code-block:: Python


    # Define the range and the number of points
    qMin = 0.2
    qMax = 0.6
    nbrPoints = 101
    quantileGraph = dist_1.drawQuantile(qMin, qMax, nbrPoints)
    view = viewer.View(quantileGraph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_distribution_manipulation_003.png
   :alt: plot distribution manipulation
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_distribution_manipulation_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 185-186

Draw a 2-d quantile curve

.. GENERATED FROM PYTHON SOURCE LINES 186-194

.. code-block:: Python


    # Define the range and the number of points
    qMin = 0.3
    qMax = 0.9
    nbrPoints = 101
    quantileGraph = dist_2.drawQuantile(qMin, qMax, nbrPoints)
    view = viewer.View(quantileGraph)
    plt.show()



.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_distribution_manipulation_004.png
   :alt: [X0,X1] Quantile
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_distribution_manipulation_004.png
   :class: sphx-glr-single-img






.. _sphx_glr_download_auto_probabilistic_modeling_distributions_plot_distribution_manipulation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_distribution_manipulation.ipynb <plot_distribution_manipulation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_distribution_manipulation.py <plot_distribution_manipulation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_distribution_manipulation.zip <plot_distribution_manipulation.zip>`
