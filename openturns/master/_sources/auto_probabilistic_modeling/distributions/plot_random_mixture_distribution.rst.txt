
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_probabilistic_modeling/distributions/plot_random_mixture_distribution.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_probabilistic_modeling_distributions_plot_random_mixture_distribution.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_probabilistic_modeling_distributions_plot_random_mixture_distribution.py:


Create a random mixture of distributions
========================================

.. GENERATED FROM PYTHON SOURCE LINES 6-17

In this example we are going to build an affine combination of input random variables.

.. math:: 
   Y = 2 + 5 X_1 + X_2

where:

- :math:`X1 \sim \mathcal{E}(\lambda=1.5)`
- :math:`X2 \sim \mathcal{N}(\mu=4, \sigma=1)`

This notion is different from the Mixture where the combination is made on the probability density functions and not on the univariate random variable.

.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 26-27

create the distributions associated to the input random variables

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default

    X1 = ot.Exponential(1.5)
    X2 = ot.Normal(4.0, 1.0)








.. GENERATED FROM PYTHON SOURCE LINES 31-32

offset

.. GENERATED FROM PYTHON SOURCE LINES 32-34

.. code-block:: default

    a0 = 2.0








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Create the weights

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: default

    weight = [5.0, 1.0]








.. GENERATED FROM PYTHON SOURCE LINES 39-40

create the affine combination

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    distribution = ot.RandomMixture([X1, X2], weight, a0)
    distribution






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>RandomMixture(Normal(mu = 6, sigma = 1) + Exponential(lambda = 0.3, gamma = 0))</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-45

ask its mean

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: default

    distribution.getMean()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[9.33333]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 48-49

ask its variance

.. GENERATED FROM PYTHON SOURCE LINES 49-51

.. code-block:: default

    distribution.getCovariance()[0, 0]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    12.11111111111111



.. GENERATED FROM PYTHON SOURCE LINES 52-53

ask the 90% quantile

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: default

    distribution.computeQuantile(0.9)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[13.8253]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 56-57

ask its probability to exceeds 3

.. GENERATED FROM PYTHON SOURCE LINES 57-59

.. code-block:: default

    distribution.computeSurvivalFunction(3.0)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    0.9998938620694351



.. GENERATED FROM PYTHON SOURCE LINES 60-61

draw PDF

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: default

    graph = distribution.drawPDF()
    view = viewer.View(graph)




.. image:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_random_mixture_distribution_001.png
    :alt: plot random mixture distribution
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-66

draw PDF

.. GENERATED FROM PYTHON SOURCE LINES 66-70

.. code-block:: default

    graph = distribution.drawCDF()
    view = viewer.View(graph)
    plt.show()




.. image:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_random_mixture_distribution_002.png
    :alt: plot random mixture distribution
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.183 seconds)


.. _sphx_glr_download_auto_probabilistic_modeling_distributions_plot_random_mixture_distribution.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_random_mixture_distribution.py <plot_random_mixture_distribution.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_random_mixture_distribution.ipynb <plot_random_mixture_distribution.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
