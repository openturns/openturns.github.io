
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_probabilistic_modeling/distributions/plot_quick_start_guide_distributions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_probabilistic_modeling_distributions_plot_quick_start_guide_distributions.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_probabilistic_modeling_distributions_plot_quick_start_guide_distributions.py:


Quick start guide to distributions
==================================

.. GENERATED FROM PYTHON SOURCE LINES 7-18

Abstract
---------

In this example, we present classes for univariate and multivariate distributions.
We demonstrate the probabilistic programming capabilities of the library.
For univariate distributions, we show how to compute the probability density,
the cumulated probability density and the quantiles.
We also show how to create graphics.
The :class:`~openturns.JointDistribution` class, which creates a distribution based on its
marginals and its copula, is presented.
We show how to truncate any distribution with the :class:`~openturns.TruncatedDistribution` class.

.. GENERATED FROM PYTHON SOURCE LINES 20-33

Univariate distribution
-----------------------

The library is a probabilistic programming library: it is possible to create a random variable and perform operations on this variable *without* generating a sample.

Several *univariate distributions* are implemented in the library. The most commonly used are:

- :class:`~openturns.Uniform`,
- :class:`~openturns.Normal`,
- :class:`~openturns.Beta`,
- :class:`~openturns.LogNormal`,
- :class:`~openturns.Exponential`,
- :class:`~openturns.WeibullMin`.

.. GENERATED FROM PYTHON SOURCE LINES 35-42

.. code-block:: Python

    import openturns.viewer as otv
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 43-47

The uniform distribution
------------------------

Let us create a uniform random variable :math:`\mathcal{U}(2,5)`.

.. GENERATED FROM PYTHON SOURCE LINES 49-51

.. code-block:: Python

    uniform = ot.Uniform(2, 5)








.. GENERATED FROM PYTHON SOURCE LINES 52-53

The :meth:`~openturns.Distribution.drawPDF` method plots the probability density function.

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: Python

    graph = uniform.drawPDF()
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_001.png
   :alt: plot quick start guide distributions
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-60

The :meth:`~openturns.Distribution.computePDF` method computes the probability distribution at a specific point.

.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: Python

    uniform.computePDF(3.5)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.3333333333333333



.. GENERATED FROM PYTHON SOURCE LINES 65-66

The :meth:`~openturns.Distribution.drawCDF` method plots the cumulated distribution function.

.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: Python

    graph = uniform.drawCDF()
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_002.png
   :alt: plot quick start guide distributions
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-73

The :meth:`~openturns.Distribution.computeCDF` method computes the value of the cumulated distribution function a given point.

.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: Python

    uniform.computeCDF(3.5)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.5



.. GENERATED FROM PYTHON SOURCE LINES 78-79

The :meth:`~openturns.Distribution.getSample` method generates a sample.

.. GENERATED FROM PYTHON SOURCE LINES 81-84

.. code-block:: Python

    sample = uniform.getSample(10)
    sample






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>X0</th></tr>
      <tr><th>0</th><td>3.992743</td></tr>
      <tr><th>1</th><td>3.901958</td></tr>
      <tr><th>2</th><td>3.430647</td></tr>
      <tr><th>3</th><td>2.424753</td></tr>
      <tr><th>4</th><td>2.292132</td></tr>
      <tr><th>5</th><td>3.44957</td></tr>
      <tr><th>6</th><td>2.099821</td></tr>
      <tr><th>7</th><td>2.291152</td></tr>
      <tr><th>8</th><td>4.052469</td></tr>
      <tr><th>9</th><td>3.302578</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 85-86

The most common way to "see" a sample is to plot the empirical histogram.

.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: Python

    sample = uniform.getSample(1000)
    graph = ot.HistogramFactory().build(sample).drawPDF()
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_003.png
   :alt: X0 PDF
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-95

Multivariate distributions with or without independent copula
-------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 97-101

We can create multivariate distributions by two different methods:

- we can also create a multivariate distribution by combining a list of univariate marginal distribution and a copula,
- some distributions are defined as multivariate distributions: :class:`~openturns.Normal`, :class:`~openturns.Dirichlet`, :class:`~openturns.Student`.

.. GENERATED FROM PYTHON SOURCE LINES 103-104

Define a multivariate Normal distribution in dimension 4

.. GENERATED FROM PYTHON SOURCE LINES 106-109

.. code-block:: Python

    distribution = ot.Normal(4)
    distribution






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    Normal
    <ul>
      <li>name=Normal</li>
      <li>dimension=4</li>
      <li>weight=1</li>
      <li>range=]-inf (-7.65063), (7.65063) +inf[
    ]-inf (-7.65063), (7.65063) +inf[
    ]-inf (-7.65063), (7.65063) +inf[
    ]-inf (-7.65063), (7.65063) +inf[</li>
      <li>description=[X0,X1,X2,X3]</li>
      <li>isParallel=true</li>
      <li>isCopula=false</li>
    </ul>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 110-113

Since the method based on a marginal and a copula is more flexible, we illustrate below this principle.
In the following script, we define a bivariate distribution made of two univariate distributions (Gaussian and uniform) and an independent copula.
The second input argument of the :class:`~openturns.JointDistribution` class is optional: if it is not specified, the copula is independent by default.

.. GENERATED FROM PYTHON SOURCE LINES 115-120

.. code-block:: Python

    normal = ot.Normal()
    uniform = ot.Uniform()
    distribution = ot.JointDistribution([normal, uniform])
    distribution






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    JointDistribution
    <ul>
      <li>name=JointDistribution</li>
      <li>dimension: 2</li>
      <li>description=[X0,X1]
      <li>copula: IndependentCopula(dimension = 2)</li>
    </ul>

    <table>
      <tr>
        <th>Index</th>
        <th>Variable</th>
        <th>Distribution</th>
      </tr>
      <tr>
        <td>0</td>
        <td>X0</td>
        <td>Normal(mu = 0, sigma = 1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>X1</td>
        <td>Uniform(a = -1, b = 1)</td>
      </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 121-122

We can also use the :class:`~openturns.IndependentCopula` class.

.. GENERATED FROM PYTHON SOURCE LINES 124-130

.. code-block:: Python

    normal = ot.Normal()
    uniform = ot.Uniform()
    copula = ot.IndependentCopula(2)
    distribution = ot.JointDistribution([normal, uniform], copula)
    distribution






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    JointDistribution
    <ul>
      <li>name=JointDistribution</li>
      <li>dimension: 2</li>
      <li>description=[X0,X1]
      <li>copula: IndependentCopula(dimension = 2)</li>
    </ul>

    <table>
      <tr>
        <th>Index</th>
        <th>Variable</th>
        <th>Distribution</th>
      </tr>
      <tr>
        <td>0</td>
        <td>X0</td>
        <td>Normal(mu = 0, sigma = 1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>X1</td>
        <td>Uniform(a = -1, b = 1)</td>
      </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 131-132

We see that this produces the same result: in the end of this section, we will change the copula and see what happens.

.. GENERATED FROM PYTHON SOURCE LINES 134-135

The :meth:`~openturns.Distribution.getSample` method produces a sample from this distribution.

.. GENERATED FROM PYTHON SOURCE LINES 137-139

.. code-block:: Python

    distribution.getSample(10)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>X0</th><th>X1</th></tr>
      <tr><th>0</th><td>-0.3435419</td><td>-0.01949062</td></tr>
      <tr><th>1</th><td>-0.3798357</td><td>-0.2890957</td></tr>
      <tr><th>2</th><td>2.690273</td><td>-0.4098912</td></tr>
      <tr><th>3</th><td>-1.253877</td><td>-0.769341</td></tr>
      <tr><th>4</th><td>-0.7414982</td><td>0.4975002</td></tr>
      <tr><th>5</th><td>-1.223319</td><td>-0.3053202</td></tr>
      <tr><th>6</th><td>-0.2083975</td><td>0.1396199</td></tr>
      <tr><th>7</th><td>-0.4038585</td><td>-0.2546578</td></tr>
      <tr><th>8</th><td>-0.3245522</td><td>-0.5756909</td></tr>
      <tr><th>9</th><td>0.70317</td><td>-0.5689613</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 140-141

In order to visualize a bivariate sample, we can use the :class:`~openturns.Cloud` class.

.. GENERATED FROM PYTHON SOURCE LINES 143-150

.. code-block:: Python

    sample = distribution.getSample(1000)
    showAxes = True
    graph = ot.Graph("X0~N, X1~U", "X0", "X1", showAxes)
    cloud = ot.Cloud(sample, "blue", "fsquare", "")  # Create the cloud
    graph.add(cloud)  # Then, add it to the graph
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_004.png
   :alt: X0~N, X1~U
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 151-152

We see that the marginals are Gaussian and uniform and that the copula is independent.

.. GENERATED FROM PYTHON SOURCE LINES 154-156

Define a plot a copula
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 158-159

The :class:`~openturns.NormalCopula` class allows one to create a Gaussian copula. Such a copula is defined by its correlation matrix.

.. GENERATED FROM PYTHON SOURCE LINES 161-166

.. code-block:: Python

    R = ot.CorrelationMatrix(2)
    R[0, 1] = 0.6
    copula = ot.NormalCopula(R)
    copula






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    NormalCopula
    <ul>
      <li>name=NormalCopula</li>
      <li>dimension=2</li>
      <li>weight=1</li>
      <li>range=[0, 1]
    [0, 1]</li>
      <li>description=[X0,X1]</li>
      <li>isParallel=true</li>
      <li>isCopula=true</li>
    </ul>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 167-168

We can draw the contours of a copula with the :meth:`~openturns.NormalCopula.drawPDF` method.

.. GENERATED FROM PYTHON SOURCE LINES 170-173

.. code-block:: Python

    graph = copula.drawPDF()
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_005.png
   :alt: [X0,X1] iso-PDF
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 174-176

Multivariate distribution with arbitrary copula
-----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-180

Now that we know that we can define a copula, we create a bivariate distribution with normal and uniform marginals and an arbitrary copula.
We select the Ali-Mikhail-Haq copula as an example of a non trivial dependence.

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: Python

    normal = ot.Normal()
    uniform = ot.Uniform()
    theta = 0.9
    copula = ot.AliMikhailHaqCopula(theta)
    distribution = ot.JointDistribution([normal, uniform], copula)
    distribution






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    JointDistribution
    <ul>
      <li>name=JointDistribution</li>
      <li>dimension: 2</li>
      <li>description=[X0,X1]
      <li>copula: AliMikhailHaqCopula(theta = 0.9)</li>
    </ul>

    <table>
      <tr>
        <th>Index</th>
        <th>Variable</th>
        <th>Distribution</th>
      </tr>
      <tr>
        <td>0</td>
        <td>X0</td>
        <td>Normal(mu = 0, sigma = 1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>X1</td>
        <td>Uniform(a = -1, b = 1)</td>
      </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 190-197

.. code-block:: Python

    sample = distribution.getSample(1000)
    showAxes = True
    graph = ot.Graph("X0~N, X1~U, Ali-Mikhail-Haq copula", "X0", "X1", showAxes)
    cloud = ot.Cloud(sample, "blue", "fsquare", "")  # Create the cloud
    graph.add(cloud)  # Then, add it to the graph
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_006.png
   :alt: X0~N, X1~U, Ali-Mikhail-Haq copula
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 198-199

We see that the sample is quite different from the previous sample with independent copula.

.. GENERATED FROM PYTHON SOURCE LINES 201-203

Draw several distributions in the same plot
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 205-206

It is sometimes convenient to create a plot presenting the PDF and CDF on the same graphics. This is possible thanks to Matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 208-215

.. code-block:: Python

    beta = ot.Beta(5, 7, 9, 10)
    pdfbeta = beta.drawPDF()
    cdfbeta = beta.drawCDF()
    exponential = ot.Exponential(3)
    pdfexp = exponential.drawPDF()
    cdfexp = exponential.drawCDF()








.. GENERATED FROM PYTHON SOURCE LINES 218-225

.. code-block:: Python

    grid = ot.GridLayout(2, 2)
    grid.setGraph(0, 0, pdfbeta)
    grid.setGraph(0, 1, cdfbeta)
    grid.setGraph(1, 0, pdfexp)
    grid.setGraph(1, 1, cdfexp)
    view = otv.View(grid)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_007.png
   :alt: plot quick start guide distributions
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 226-245

Truncate a distribution
-----------------------

Any distribution can be truncated with the :class:`~openturns.TruncatedDistribution` class.
Let :math:`f_X` (resp. :math:`F_X`) the PDF (resp. the CDF) of the real
random variable :math:`X`. Let :math:`a` and :math:`b` two reals with :math:`a<b`.
Let :math:`Y` be the random variable defined by:

.. math::
    Y = \max(a, \min(b, X)).

Its distribution is the distribution of :math:`X` truncated to the :math:`[a,b]` interval.
Therefore, the PDF of :math:`Y` is:

.. math::
   f_Y(y) = \frac{f_X(y)}{F_X(b) - F_X(a)}


if :math:`y\in[a,b]` and :math:`f_Y(y)=0` otherwise.

.. GENERATED FROM PYTHON SOURCE LINES 247-248

Consider for example the log-Normal variable :math:`X` with mean :math:`\mu=0` and standard deviation :math:`\sigma=1`.

.. GENERATED FROM PYTHON SOURCE LINES 250-254

.. code-block:: Python

    X = ot.LogNormal()
    graph = X.drawPDF()
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_008.png
   :alt: plot quick start guide distributions
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 255-256

We can truncate this distribution to the :math:`[1,2]` interval. We see that the PDF of the distribution becomes discontinuous at the truncation points 1 and 2.

.. GENERATED FROM PYTHON SOURCE LINES 258-262

.. code-block:: Python

    Y = ot.TruncatedDistribution(X, 1.0, 2.0)
    graph = Y.drawPDF()
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_009.png
   :alt: plot quick start guide distributions
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 263-264

We can also also truncate it with only a lower bound.

.. GENERATED FROM PYTHON SOURCE LINES 266-270

.. code-block:: Python

    Y = ot.TruncatedDistribution(X, 1.0, ot.TruncatedDistribution.LOWER)
    graph = Y.drawPDF()
    view = viewer.View(graph)




.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_010.png
   :alt: plot quick start guide distributions
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 271-272

We can finally truncate a distribution with an upper bound.

.. GENERATED FROM PYTHON SOURCE LINES 274-279

.. code-block:: Python

    Y = ot.TruncatedDistribution(X, 2.0, ot.TruncatedDistribution.UPPER)
    graph = Y.drawPDF()
    view = viewer.View(graph)

    plt.show()



.. image-sg:: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_011.png
   :alt: plot quick start guide distributions
   :srcset: /auto_probabilistic_modeling/distributions/images/sphx_glr_plot_quick_start_guide_distributions_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 280-282

In the specific case of the Gaussian distribution, the specialized :class:`~openturns.TruncatedNormal` distribution can be used
instead of the generic :class:`~openturns.TruncatedDistribution` class.


.. _sphx_glr_download_auto_probabilistic_modeling_distributions_plot_quick_start_guide_distributions.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_quick_start_guide_distributions.ipynb <plot_quick_start_guide_distributions.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_quick_start_guide_distributions.py <plot_quick_start_guide_distributions.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_quick_start_guide_distributions.zip <plot_quick_start_guide_distributions.zip>`
