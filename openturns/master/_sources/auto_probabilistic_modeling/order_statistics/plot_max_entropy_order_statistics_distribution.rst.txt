
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_probabilistic_modeling/order_statistics/plot_max_entropy_order_statistics_distribution.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_probabilistic_modeling_order_statistics_plot_max_entropy_order_statistics_distribution.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_probabilistic_modeling_order_statistics_plot_max_entropy_order_statistics_distribution.py:


Create a maximum entropy order statistics distribution
======================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-47

Context
-------

In this example we illustrate how to build the joint distribution of the
random vector :math:`\inputRV = (X_1, \dots, X_n)` which marginals are given
and such that:

.. math::
   :label: orderConstraintEx

   X_1 \leq \dots \leq X_n \quad \mbox{almost surely}.

The class :class:`~openturns.MaximumEntropyOrderStatisticsDistribution` implements the joint
distribution of :math:`\inputRV` that maximizes the entropy of  :math:`\inputRV`.
See [fischer2017]_ for more details.

The distribution of :math:`\inputRV` is the distribution of the :math:`n` order statistics of a
distribution :math:`Y`. We can write:

.. math::
  (X_1, \dots, X_n) \sim (Y_{(1)}, \dots, Y_{(n)})

In that case, we do not know  :math:`Y` but we fix the marginals of its order
statistics distribution. If the :math:`X_i \sim \beta(i, n-i+1)`, then :math:`\inputRV` is the
joint distribution of the :math:`n` order statistics of :math:`Y \sim \cU([0,1])`.

The marginals of  :math:`\inputRV` must be compatible with the order constraint :eq:`orderConstraint`.
The library checks this compatibility by default. It requires that if :math:`F_i`
is the CDF of :math:`X_i`, then they must verify:

.. math::
   :label: orderConstraintCDFEx

   F_1 \geq F_2 \geq \dots \geq F_n

which implies that if :math:`[a_i, b_i]` is the numerical range of :math:`X_i`, then:

.. math::
   a_i \leq a_{i+1}\\
   b_i \leq b_{i+1}

.. GENERATED FROM PYTHON SOURCE LINES 49-56

.. code-block:: Python

    import openturns as ot
    import openturns.viewer as otv

    ot.ResourceMap.SetAsString("Contour-DefaultColorMapNorm", "rank")

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 57-58

Create the distributions :math:`X_i`:

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: Python

    coll = [ot.Beta(1.5, 1.7, 0.0, 1.0), ot.Beta(2.0, 2.3, 0.5, 1.2)]








.. GENERATED FROM PYTHON SOURCE LINES 61-64

Create the joint order statistics distribution with maximum entropy: the creation is a
success, which means that the marginals are compatible with the order constraint
:eq:`orderConstraintEx` and fulfill :eq:`orderConstraintCDFEx`.

.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: Python

    jointDist = ot.MaximumEntropyOrderStatisticsDistribution(coll)








.. GENERATED FROM PYTHON SOURCE LINES 67-68

Draw a sample: the components are well ordered.

.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: Python

    x_sample = jointDist.getSample(10)
    print(x_sample)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        [ X0        X1        ]
    0 : [ 0.573802  0.640331  ]
    1 : [ 0.0561493 1.08765   ]
    2 : [ 0.860948  0.87137   ]
    3 : [ 0.304464  0.722877  ]
    4 : [ 0.36928   0.988477  ]
    5 : [ 0.306281  0.939162  ]
    6 : [ 0.620259  0.752213  ]
    7 : [ 0.908716  0.935521  ]
    8 : [ 0.118611  0.64981   ]
    9 : [ 0.379123  0.737645  ]




.. GENERATED FROM PYTHON SOURCE LINES 72-73

Draw PDF

.. GENERATED FROM PYTHON SOURCE LINES 73-81

.. code-block:: Python

    graph = jointDist.drawPDF()
    contour = graph.getDrawable(0).getImplementation()
    contour.setIsFilled(True)
    contour.buildDefaultLevels(50)
    graph.setDrawable(0, contour)
    graph.setTitle("PDF of the Maximum Entropy Order Statistics Distribution")
    view = otv.View(graph)




.. image-sg:: /auto_probabilistic_modeling/order_statistics/images/sphx_glr_plot_max_entropy_order_statistics_distribution_001.png
   :alt: PDF of the Maximum Entropy Order Statistics Distribution
   :srcset: /auto_probabilistic_modeling/order_statistics/images/sphx_glr_plot_max_entropy_order_statistics_distribution_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-83

Display all figures

.. GENERATED FROM PYTHON SOURCE LINES 83-84

.. code-block:: Python

    otv.View.ShowAll()








.. _sphx_glr_download_auto_probabilistic_modeling_order_statistics_plot_max_entropy_order_statistics_distribution.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_max_entropy_order_statistics_distribution.ipynb <plot_max_entropy_order_statistics_distribution.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_max_entropy_order_statistics_distribution.py <plot_max_entropy_order_statistics_distribution.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_max_entropy_order_statistics_distribution.zip <plot_max_entropy_order_statistics_distribution.zip>`
