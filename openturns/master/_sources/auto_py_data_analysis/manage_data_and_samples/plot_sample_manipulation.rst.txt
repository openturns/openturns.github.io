.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_py_data_analysis_manage_data_and_samples_plot_sample_manipulation.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_py_data_analysis_manage_data_and_samples_plot_sample_manipulation.py:


Sample manipulation
===================

This example will describe the main statistical functionalities on data through the Sample object.


.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    ot.Log.Show(ot.Log.NONE)








Generate a sample of dimension 3


.. code-block:: default

    sample = ot.Normal(3).getSample(500)
    sample[:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>X0</TH><TH>X1</TH><TH>X2</TH></TR>
    <TR><TH>0</TH><TD>0.2848851</TD><TD>-1.513006</TD><TD>-0.5750952</TD></TR>
    <TR><TH>1</TH><TD>0.3165664</TD><TD>-2.171768</TD><TD>0.5864573</TD></TR>
    <TR><TH>2</TH><TD>0.2646171</TD><TD>1.183059</TD><TD>0.1865599</TD></TR>
    <TR><TH>3</TH><TD>-1.6747</TD><TD>0.9319077</TD><TD>-0.1620935</TD></TR>
    <TR><TH>4</TH><TD>-1.131884</TD><TD>0.3408018</TD><TD>-0.5165591</TD></TR>
    </TABLE>
    <br />
    <br />

Get min and max per component


.. code-block:: default

    sample.getMin(), sample.getMax()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (class=Point name=Unnamed dimension=3 values=[-3.07535,-2.48862,-3.39855], class=Point name=Unnamed dimension=3 values=[3.41961,2.71854,2.90425])



Get the range per component (xmax-xmin)


.. code-block:: default

    sample.computeRange()






.. raw:: html

    <p>[6.49496,5.20716,6.3028]</p>
    <br />
    <br />

Get the mean per component


.. code-block:: default

    sample.computeMean()






.. raw:: html

    <p>[0.0305341,0.0696977,-0.00293365]</p>
    <br />
    <br />

Get the standard deviation per component


.. code-block:: default

    sample.computeStandardDeviationPerComponent()






.. raw:: html

    <p>[1.01333,0.986418,0.973284]</p>
    <br />
    <br />

Get the Variance per component


.. code-block:: default

    sample.computeVariance()






.. raw:: html

    <p>[1.02683,0.973021,0.947281]</p>
    <br />
    <br />

Get the Skewness per component


.. code-block:: default

    sample.computeSkewness()






.. raw:: html

    <p>[-0.100365,0.0330154,-0.166036]</p>
    <br />
    <br />

Get the Kurtosis per component


.. code-block:: default

    sample.computeKurtosis()






.. raw:: html

    <p>[3.0447,2.71131,2.97627]</p>
    <br />
    <br />

Get the median per component


.. code-block:: default

    sample.computeMedian()






.. raw:: html

    <p>[0.055302,0.0701777,0.00513757]</p>
    <br />
    <br />

Get the empirical 0.95 quantile per component


.. code-block:: default

    sample.computeQuantilePerComponent(0.95)






.. raw:: html

    <p>[1.6064,1.75258,1.43879]</p>
    <br />
    <br />

Get the sample covariance


.. code-block:: default

    sample.computeCovariance()






.. raw:: html

    <p>[[  1.02683    0.0030062  0.0202557 ]<br>
     [  0.0030062  0.973021  -0.0611211 ]<br>
     [  0.0202557 -0.0611211  0.947281  ]]</p>
    <br />
    <br />

Get the sample standard deviation


.. code-block:: default

    sample.computeStandardDeviation()






.. raw:: html

    <p>[[  1.01333     0           0          ]<br>
     [  0.00296666  0.986414    0          ]<br>
     [  0.0199893  -0.0620231   0.9711     ]]</p>
    <br />
    <br />

Get the sample Pearson correlation matrix


.. code-block:: default

    sample.computePearsonCorrelation()






.. raw:: html

    <p>[[  1           0.00300751  0.020538   ]<br>
     [  0.00300751  1          -0.0636635  ]<br>
     [  0.020538   -0.0636635   1          ]]</p>
    <br />
    <br />

Get  the sample Kendall correlation matrix


.. code-block:: default

    sample.computeKendallTau()






.. raw:: html

    <p>[[  1          -0.00482565  0.0141403  ]<br>
     [ -0.00482565  1          -0.0409459  ]<br>
     [  0.0141403  -0.0409459   1          ]]</p>
    <br />
    <br />

Get  the sample Spearman  correlation matrix


.. code-block:: default

    sample.computeSpearmanCorrelation()






.. raw:: html

    <p>[[  1          -0.00786714  0.0200047  ]<br>
     [ -0.00786714  1          -0.0623547  ]<br>
     [  0.0200047  -0.0623547   1          ]]</p>
    <br />
    <br />

Get the value of the empirical CDF at a point


.. code-block:: default

    point = [1.1, 2.2, 3.3]
    sample.computeEmpiricalCDF(point)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    0.842




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.005 seconds)


.. _sphx_glr_download_auto_py_data_analysis_manage_data_and_samples_plot_sample_manipulation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_sample_manipulation.py <plot_sample_manipulation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_sample_manipulation.ipynb <plot_sample_manipulation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
