.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_py_data_analysis_distribution_fitting_plot_estimate_non_parametric_distribution.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_py_data_analysis_distribution_fitting_plot_estimate_non_parametric_distribution.py:


Non parametric distribution fitting
===================================

In this example we are going to estimate a non parametric distribution using the kernel smoothing method.


.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)








Create data


.. code-block:: default

    ot.RandomGenerator.SetSeed(0)
    distribution = ot.Gamma(6.0, 1.0)
    sample = distribution.getSample(800)








Estimate the Spearman correlation


.. code-block:: default

    kernel = ot.KernelSmoothing()
    estimated = kernel.build(sample)








Plot original distribution vs kernel smoothing


.. code-block:: default

    graph = ot.Graph()
    graph.setTitle('Kernel smoothing vs original')
    graph.add(distribution.drawPDF())
    kernel_plot = estimated.drawPDF().getDrawable(0)
    kernel_plot.setColor('blue')
    graph.add(kernel_plot)
    graph.setLegends(['original', 'KS'])
    graph.setLegendPosition('topright')
    view = viewer.View(graph)




.. image:: /auto_py_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_non_parametric_distribution_001.png
    :alt: Kernel smoothing vs original
    :class: sphx-glr-single-img





access the bandwidth


.. code-block:: default

    kernel.getBandwidth()






.. raw:: html

    <p>[0.529581]</p>
    <br />
    <br />

Compute bandwitdh with the Silverman rule


.. code-block:: default

    bandwidth = kernel.computeSilvermanBandwidth(sample)
    bandwidth






.. raw:: html

    <p>[0.639633]</p>
    <br />
    <br />

Regenerate with another bandwidth rule


.. code-block:: default

    estimated = kernel.build(sample, bandwidth)








Plot original distribution vs kernel smoothing


.. code-block:: default

    graph = ot.Graph()
    graph.setTitle('Kernel smoothing vs original')
    graph.add(distribution.drawPDF())
    kernel_plot = estimated.drawPDF().getDrawable(0)
    kernel_plot.setColor('blue')
    graph.add(kernel_plot)
    graph.setLegends(['original', 'KS'])
    graph.setLegendPosition('topright')
    view = viewer.View(graph)
    plt.show()



.. image:: /auto_py_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_non_parametric_distribution_002.png
    :alt: Kernel smoothing vs original
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.144 seconds)


.. _sphx_glr_download_auto_py_data_analysis_distribution_fitting_plot_estimate_non_parametric_distribution.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_estimate_non_parametric_distribution.py <plot_estimate_non_parametric_distribution.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_estimate_non_parametric_distribution.ipynb <plot_estimate_non_parametric_distribution.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
