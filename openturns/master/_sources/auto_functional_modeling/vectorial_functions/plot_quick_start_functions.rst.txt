
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_functional_modeling/vectorial_functions/plot_quick_start_functions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_functional_modeling_vectorial_functions_plot_quick_start_functions.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_functional_modeling_vectorial_functions_plot_quick_start_functions.py:


Defining Python and symbolic functions: a quick start introduction to functions
===============================================================================

.. GENERATED FROM PYTHON SOURCE LINES 6-11

Abstract
--------

In this example, we show how to define Python and symbolic functions.
Such functions can be evaluated by the library and used, for example, to propagate uncertainties. We focus on functions which have a vector input and a vector output.

.. GENERATED FROM PYTHON SOURCE LINES 13-45

Introduction
------------

We consider the following example:

* three input variables,
* two outputs.

Moreover, we assume that the input distribution has independent Gaussian marginals.

The function is defined by the equations:

.. math::
   Y_1 = X_1 + X_2 + X_3

and

.. math::
   Y_2 = X_1 - X_2 X_3


for any :math:`X_1,X_2,X_3 \in \mathbb{R}`.

The exact expectation and standard deviation of the output random variable are presented in the following table.

=============     ===========  ==================
Variable          Expectation  Standard deviation
=============     ===========  ==================
 :math:`Y_1`       0            1.732
 :math:`Y_2`       0            1.415
=============     ===========  ==================


.. GENERATED FROM PYTHON SOURCE LINES 47-52

.. code-block:: Python

    import numpy as np
    import openturns as ot

    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We first define the input random vector of the function.

.. GENERATED FROM PYTHON SOURCE LINES 56-63

.. code-block:: Python

    X0 = ot.Normal(0.0, 1.0)
    X1 = ot.Normal(0.0, 1.0)
    X2 = ot.Normal(0.0, 1.0)
    inputDistribution = ot.JointDistribution((X0, X1, X2))
    inputRandomVector = ot.RandomVector(inputDistribution)









.. GENERATED FROM PYTHON SOURCE LINES 64-83

The Python function
-------------------

Based on a Python function defined with the `def` keyword, the `PythonFunction` class creates a function.

The simplest constructor of the `PythonFunction` class is:

`PythonFunction ( nbInputs , nbOutputs , myPythonFunc )`

where

* `nbInputs`: the number of inputs,
* `nbOutputs`: the number of outputs,
* `myPythonFunc`: a Python function.

The goal of the `PythonFunction` class are:

* to easily create a function in Python,
* use all the power of the Python libraries in order to evaluate the function.

.. GENERATED FROM PYTHON SOURCE LINES 85-89

The function `mySimulator` has the calling sequence `y=mySimulator(x)` where:

* `x`: the input of the function, a vector with `nbInputs` dimensions,
* `y`: the output of the function, a vector with `nbOutputs` dimensions.

.. GENERATED FROM PYTHON SOURCE LINES 92-99

.. code-block:: Python

    def mySimulator(x):
        y0 = x[0] + x[1] + x[2]
        y1 = x[0] - x[1] * x[2]
        y = [y0, y1]
        return y









.. GENERATED FROM PYTHON SOURCE LINES 100-101

We now define the `PythonFunction` object.

.. GENERATED FROM PYTHON SOURCE LINES 103-105

.. code-block:: Python

    myfunction = ot.PythonFunction(3, 2, mySimulator)








.. GENERATED FROM PYTHON SOURCE LINES 106-107

This function can be evaluated using parentheses. It produces the same outputs as the `mySimulator` function.

.. GENERATED FROM PYTHON SOURCE LINES 109-111

.. code-block:: Python

    myfunction([1.0, 2.0, 3.0])






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=2 values=[6,-5]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 112-114

However, the newly created `myfunction` has services that the basic Python function did not have.
For example, we can create a `CompositeRandomVector` on top of it, by associating it to the input random vector.

.. GENERATED FROM PYTHON SOURCE LINES 116-118

.. code-block:: Python

    outputVect = ot.CompositeRandomVector(myfunction, inputRandomVector)








.. GENERATED FROM PYTHON SOURCE LINES 119-120

In the following example, we estimate the output mean based on a simple Monte-Carlo experiment using 10000 function evaluations.

.. GENERATED FROM PYTHON SOURCE LINES 122-125

.. code-block:: Python

    montecarlosize = 10000
    outputSample = outputVect.getSample(montecarlosize)








.. GENERATED FROM PYTHON SOURCE LINES 126-131

.. code-block:: Python

    empiricalMean = outputSample.computeMean()
    print(empiricalMean)
    empiricalSd = outputSample.computeStandardDeviation()
    print(empiricalSd)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [-0.00468055,-0.0116172]
    [1.73572,1.42372]




.. GENERATED FROM PYTHON SOURCE LINES 132-148

What types for x and for y ?
----------------------------

Not all types are possible for the inputs and outputs of the `mySimulator` function.
The following table present some of the available types.
All in all, any type which can be converted to or from a "vector" can be managed by the `PythonFunction` class.

 ====================  =======  ========
 Type                  Input X  Output Y
 ====================  =======  ========
 `list` (Python)       NO       YES
 `tuple` (Python)      NO       YES
 `array` (NumPy)       NO       YES
 `Point` (OpenTURNS)   YES      YES
 ====================  =======  ========


.. GENERATED FROM PYTHON SOURCE LINES 150-158

The vectorized Python function
------------------------------

The `PythonFunction` class has a `func_sample` option which vectorizes the
computation so that all the output values in the sample are computed from a
single function call, without any `for` loop.
To make this possible, the input and output is then a `Sample` instead of a `Point`.
This often boosts performance (but not always).

.. GENERATED FROM PYTHON SOURCE LINES 160-175

The calling sequence of a vectorized Python function is:

def mySimulator (x):
    [...]
    return y

myfunction = PythonFunction(nbInputs, nbOutputs, func_sample = mySimulator)

where

* x: the input of the function, a `Sample` with size `nbExperiments` (`getSize`) and dimension `nbInputs` (`getDimension`),
* y: the output of the function

  * a numpy `array` with `nbExperiments` rows and `nbOutputs` columns
  * or a `Sample` with size `nbExperiments` and dimension `nbOutputs`

.. GENERATED FROM PYTHON SOURCE LINES 177-178

In the following, we present an vectorization example based on the `numpy` module.

.. GENERATED FROM PYTHON SOURCE LINES 183-197

.. code-block:: Python

    def mySimulatorVect(x):
        # Convert NumericalSample > Array Numpy
        x = np.array(x)
        x0 = x[:, 0]  # Extract column 0
        x1 = x[:, 1]
        x2 = x[:, 2]
        y0 = x0 + x1 + x2
        y1 = x0 - x1 * x2
        # Stack the two rows
        y = np.vstack((y0, y1))
        y = y.transpose()
        return y









.. GENERATED FROM PYTHON SOURCE LINES 198-200

.. code-block:: Python

    myfunctionVect = ot.PythonFunction(3, 2, func_sample=mySimulatorVect)








.. GENERATED FROM PYTHON SOURCE LINES 201-203

.. code-block:: Python

    outputVect = ot.CompositeRandomVector(myfunctionVect, inputRandomVector)








.. GENERATED FROM PYTHON SOURCE LINES 204-212

.. code-block:: Python

    montecarlosize = 10000
    outputSample = outputVect.getSample(montecarlosize)

    empiricalMean = outputSample.computeMean()
    print(empiricalMean)
    empiricalSd = outputSample.computeStandardDeviation()
    print(empiricalSd)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.00208238,0.00883176]
    [1.72549,1.39691]




.. GENERATED FROM PYTHON SOURCE LINES 213-227

How to manage the history
-------------------------

The `MemoizeFunction` class defines a history system to store the calls to the function.

 ====================   ===============================================
 Methods                Description
 ====================   ===============================================
 `enableHistory()`      enables the history (it is enabled by default)
 `disableHistory()`     disables the history
 `clearHistory()`       deletes the content of the history
 `getHistoryInput()`    a `Sample`, the history of inputs X
 `getHistoryOutput()`   a `Sample`, the history of outputs Y
 ====================   ===============================================

.. GENERATED FROM PYTHON SOURCE LINES 229-232

.. code-block:: Python

    myfunction = ot.PythonFunction(3, 2, mySimulator)
    myfunction = ot.MemoizeFunction(myfunction)








.. GENERATED FROM PYTHON SOURCE LINES 233-237

.. code-block:: Python

    outputVariableOfInterest = ot.CompositeRandomVector(myfunction, inputRandomVector)
    montecarlosize = 10
    outputSample = outputVariableOfInterest.getSample(montecarlosize)








.. GENERATED FROM PYTHON SOURCE LINES 238-239

Get the history of input points.

.. GENERATED FROM PYTHON SOURCE LINES 241-244

.. code-block:: Python

    inputs = myfunction.getInputHistory()
    inputs






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>v0</th><th>v1</th><th>v2</th></tr>
      <tr><th>0</th><td>0.06477752</td><td>-0.08727845</td><td>-1.908677</td></tr>
      <tr><th>1</th><td>-1.335987</td><td>-0.7565817</td><td>-0.7114729</td></tr>
      <tr><th>2</th><td>-0.1125383</td><td>1.368883</td><td>-1.210296</td></tr>
      <tr><th>3</th><td>-0.6073594</td><td>-0.4291727</td><td>-1.025229</td></tr>
      <tr><th>4</th><td>-0.9695173</td><td>-0.1635621</td><td>0.756707</td></tr>
      <tr><th>5</th><td>-0.8338873</td><td>-0.03183697</td><td>-1.266235</td></tr>
      <tr><th>6</th><td>0.9896475</td><td>0.5416678</td><td>0.000445616</td></tr>
      <tr><th>7</th><td>-1.637888</td><td>0.8671775</td><td>0.1443702</td></tr>
      <tr><th>8</th><td>0.8077058</td><td>-0.7878547</td><td>-0.3247022</td></tr>
      <tr><th>9</th><td>-0.6923468</td><td>-0.468089</td><td>0.7654792</td></tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 245-256

Symbolic functions
------------------

The `SymbolicFunction` class can create symbolic functions whenever the function is simple enough to be expressed as a string.

This has at least two significant advantages.

* It generally improves the performance.
* This allows one to automatically evaluate the exact gradient and Hessian matrix.

In practice, some functions cannot be expressed as a symbolic function: in this case, the Python function cannot be avoided.

.. GENERATED FROM PYTHON SOURCE LINES 258-268

The calling sequence is the following:

`
myfunction = SymbolicFunction( list_of_inputs, list_of_formulas)
`

where

* list_of_inputs: a `list` of `nbInputs` strings, the names of the input variables,
* list_of_formulas: a `list` of `nbOutputs` strings, the equations.

.. GENERATED FROM PYTHON SOURCE LINES 270-272

.. code-block:: Python

    myfunction = ot.SymbolicFunction(("x0", "x1", "x2"), ("x0 + x1 + x2", "x0 - x1 * x2"))








.. GENERATED FROM PYTHON SOURCE LINES 273-274

A `SymbolicFunction`, like any other function, can also have a history.

.. GENERATED FROM PYTHON SOURCE LINES 276-278

.. code-block:: Python

    myfunction = ot.MemoizeFunction(myfunction)








.. GENERATED FROM PYTHON SOURCE LINES 279-281

.. code-block:: Python

    outputVect = ot.CompositeRandomVector(myfunction, inputRandomVector)








.. GENERATED FROM PYTHON SOURCE LINES 282-287

.. code-block:: Python

    montecarlosize = 10000
    outputSample = outputVect.getSample(montecarlosize)
    empiricalMean = outputSample.computeMean()
    print(empiricalMean)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [-0.0178533,-0.0193733]




.. GENERATED FROM PYTHON SOURCE LINES 288-289

Since the history is enabled, we can get the history of outputs of the function.

.. GENERATED FROM PYTHON SOURCE LINES 291-293

.. code-block:: Python

    outputs = myfunction.getOutputHistory()
    outputs[1:10, :]





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr><td></td><th>v0</th><th>v1</th></tr>
      <tr><th>0</th><td>-0.6324183</td><td>0.1405837</td></tr>
      <tr><th>1</th><td>-0.2587912</td><td>-0.6817536</td></tr>
      <tr><th>2</th><td>-1.993519</td><td>0.005118254</td></tr>
      <tr><th>3</th><td>-1.681409</td><td>-1.999228</td></tr>
      <tr><th>4</th><td>1.028815</td><td>-1.039651</td></tr>
      <tr><th>5</th><td>2.098945</td><td>1.631081</td></tr>
      <tr><th>6</th><td>1.249495</td><td>-0.2711042</td></tr>
      <tr><th>7</th><td>-3.453566</td><td>-2.169193</td></tr>
      <tr><th>8</th><td>-2.523052</td><td>-1.30991</td></tr>
    </table>
    </div>
    <br />
    <br />


.. _sphx_glr_download_auto_functional_modeling_vectorial_functions_plot_quick_start_functions.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_quick_start_functions.ipynb <plot_quick_start_functions.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_quick_start_functions.py <plot_quick_start_functions.py>`
