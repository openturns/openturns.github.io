
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_calibration/least_squares_and_gaussian_calibration/plot_calibration_flooding.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_flooding.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_flooding.py:


Calibration of the flooding model
=================================

.. GENERATED FROM PYTHON SOURCE LINES 6-73

In this example we are interested in the calibration of the :ref:`flooding model <use-case-flood-model>`.

Parameters to calibrate
-----------------------

The vector of parameters to calibrate is: 

.. math::
   \theta = (K_s,Z_v,Z_m).


The variables to calibrate are :math:`(K_s,Z_v,Z_m)` and are set to the following values:

.. math::
   K_s = 30, \qquad Z_v = 50, \qquad Z_m = 55.


Observations
------------

In this section, we describe the statistical model associated with the :math:`n` observations.
The errors of the water heights are associated with a normal distribution with a zero mean and a standard variation equal to:

.. math::
   \sigma=0.1.


Therefore, the observed water heights are:

.. math::
   H_i = G(Q_i,K_s,Z_v,Z_m) + \epsilon_i


for :math:`i=1,...,n` where

.. math::
   \epsilon \sim \mathcal{N}(0,\sigma^2)


and we make the hypothesis that the observation errors are independent.
We consider a sample size equal to:

.. math::
   n=100.


The observations are the couples :math:`\{(Q_i,H_i)\}_{i=1,...,n}`, i.e. each observation is a couple made of the flowrate and the corresponding river height.

Analysis
--------

First, the slope :math:`\alpha` only depends on the difference :math:`Z_m - Z_v`. 
This is why :math:`Z_v` and :math:`Z_m` cannot be identified at the same time. 
In algebraic terms, there is an infinite number of couples :math:`(Z_v, Z_m)` which 
generate the same difference :math:`Z_m - Z_v`. 

Second, the denominator of the expression of :math:`H` involves the product 
:math:`K_s B \sqrt{\alpha}`. 
In algebraic terms, there is an infinite number of couples :math:`(K_s, \alpha)` which 
generate the same product :math:`K_s \sqrt{\alpha}`. 
This is why either :math:`K_s` or :math:`\alpha` can be identified separately, 
but not at the same time. 
This shows that only one parameter can be identified. 

Hence, calibrating this model requires some regularization.
We return to this topic when analyzing the singular values of 
the Jacobian matrix.

.. GENERATED FROM PYTHON SOURCE LINES 75-77

Generate the observations
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 79-86

.. code-block:: default

    import numpy as np
    import openturns as ot
    ot.ResourceMap.SetAsUnsignedInteger('Normal-SmallDimension', 1)
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 87-88

We load the flooding use case :

.. GENERATED FROM PYTHON SOURCE LINES 88-91

.. code-block:: default

    from openturns.usecases import flood_model as flood_model
    fm = flood_model.FloodModel()








.. GENERATED FROM PYTHON SOURCE LINES 92-100

We define the model :math:`g` which has 4 inputs and one output H.

The nonlinear least squares does not take into account for bounds in the parameters. Therefore, we ensure that the output is computed whatever the inputs. The model fails into two situations:

* if :math:`K_s<0`,
* if :math:`Z_v-Z_m<0`.

In these cases, we return an infinite number, so that the optimization algorithm does not get trapped.

.. GENERATED FROM PYTHON SOURCE LINES 102-114

.. code-block:: default

    def functionFlooding(X) :
        L = 5.0e3
        B = 300.0
        Q, K_s, Z_v, Z_m = X
        alpha = (Z_m - Z_v)/L
        if alpha < 0.0 or K_s <= 0.0:
            H = np.inf
        else:
            H = (Q/(K_s*B*np.sqrt(alpha)))**(3.0/5.0)
        return [H]









.. GENERATED FROM PYTHON SOURCE LINES 115-119

.. code-block:: default

    g = ot.PythonFunction(4, 1, functionFlooding) 
    g = ot.MemoizeFunction(g)
    g.setOutputDescription(["H (m)"])








.. GENERATED FROM PYTHON SOURCE LINES 120-121

We load the input distribution for :math:`Q` :

.. GENERATED FROM PYTHON SOURCE LINES 123-126

.. code-block:: default

    Q = fm.Q
    print(Q)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    TruncatedDistribution(Gumbel(beta = 558, gamma = 1013), bounds = [0, (19000.8) +inf[)




.. GENERATED FROM PYTHON SOURCE LINES 127-128

Set the parameters to be calibrated.

.. GENERATED FROM PYTHON SOURCE LINES 130-137

.. code-block:: default

    K_s = ot.Dirac(30.0)
    Z_v = ot.Dirac(50.0)
    Z_m = ot.Dirac(55.0)
    K_s.setDescription(["Ks (m^(1/3)/s)"])
    Z_v.setDescription(["Zv (m)"])
    Z_m.setDescription(["Zm (m)"])








.. GENERATED FROM PYTHON SOURCE LINES 138-139

Create the joint input distribution.

.. GENERATED FROM PYTHON SOURCE LINES 141-143

.. code-block:: default

    inputRandomVector = ot.ComposedDistribution([Q, K_s, Z_v, Z_m])








.. GENERATED FROM PYTHON SOURCE LINES 144-145

Create a Monte-Carlo sample of the output H.

.. GENERATED FROM PYTHON SOURCE LINES 147-151

.. code-block:: default

    nbobs = 100
    inputSample = inputRandomVector.getSample(nbobs)
    outputH = g(inputSample)








.. GENERATED FROM PYTHON SOURCE LINES 152-153

Observe the distribution of the output H.

.. GENERATED FROM PYTHON SOURCE LINES 155-158

.. code-block:: default

    graph = ot.HistogramFactory().build(outputH).drawPDF()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_001.png
   :alt: H (m) PDF
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-160

Generate the observation noise and add it to the output of the model.

.. GENERATED FROM PYTHON SOURCE LINES 162-167

.. code-block:: default

    sigmaObservationNoiseH = 0.1 # (m)
    noiseH = ot.Normal(0.,sigmaObservationNoiseH)
    sampleNoiseH = noiseH.getSample(nbobs)
    Hobs = outputH + sampleNoiseH








.. GENERATED FROM PYTHON SOURCE LINES 168-169

Plot the Y observations versus the X observations.

.. GENERATED FROM PYTHON SOURCE LINES 171-173

.. code-block:: default

    Qobs = inputSample[:,0]








.. GENERATED FROM PYTHON SOURCE LINES 174-179

.. code-block:: default

    graph = ot.Graph("Observations","Q (m3/s)","H (m)",True)
    cloud = ot.Cloud(Qobs,Hobs)
    graph.add(cloud)
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_002.png
   :alt: Observations
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 180-182

Setting the calibration parameters
----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-185

Define the value of the reference values of the :math:`\theta` parameter. In the bayesian framework, this is called the mean of the *prior* normal distribution. In the data assimilation framework, this is called the *background*.

.. GENERATED FROM PYTHON SOURCE LINES 187-192

.. code-block:: default

    KsInitial = 20.
    ZvInitial = 49.
    ZmInitial = 51.
    thetaPrior = [KsInitial, ZvInitial, ZmInitial]








.. GENERATED FROM PYTHON SOURCE LINES 193-194

The following statement create the calibrated function from the model. The calibrated parameters :math:`K_s`, :math:`Z_v`, :math:`Z_m` are at indices 1, 2, 3 in the inputs arguments of the model.

.. GENERATED FROM PYTHON SOURCE LINES 196-199

.. code-block:: default

    calibratedIndices = [1,2,3]
    mycf = ot.ParametricFunction(g, calibratedIndices, thetaPrior)








.. GENERATED FROM PYTHON SOURCE LINES 200-202

Calibration with linear least squares
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 204-205

The `LinearLeastSquaresCalibration` class performs the linear least squares calibration by linearizing the model in the neighbourhood of the reference point.

.. GENERATED FROM PYTHON SOURCE LINES 207-209

.. code-block:: default

    algo = ot.LinearLeastSquaresCalibration(mycf, Qobs, Hobs, thetaPrior, "SVD")








.. GENERATED FROM PYTHON SOURCE LINES 210-211

The `run` method computes the solution of the problem.

.. GENERATED FROM PYTHON SOURCE LINES 213-215

.. code-block:: default

    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 216-218

.. code-block:: default

    calibrationResult = algo.getResult()








.. GENERATED FROM PYTHON SOURCE LINES 219-220

The `getParameterMAP` method returns the maximum of the posterior distribution of :math:`\theta`.

.. GENERATED FROM PYTHON SOURCE LINES 222-225

.. code-block:: default

    thetaStar = calibrationResult.getParameterMAP()
    print(thetaStar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1.37279e+08,-7.77559e+22,-7.77559e+22]




.. GENERATED FROM PYTHON SOURCE LINES 226-227

In this case, we see that there seems to be a great distance from the reference value of :math:`\theta` to the optimum: the values seem too large in magnitude. The value of the optimum :math:`K_s` is nonpositive. In fact, there is an identification problem because the Jacobian matrix is rank-degenerate.

.. GENERATED FROM PYTHON SOURCE LINES 229-231

Diagnostic of the identification issue
--------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 233-236

In this section, we show how to diagnose the identification problem.

The `getParameterPosterior` method returns the posterior normal distribution of :math:`\theta`.

.. GENERATED FROM PYTHON SOURCE LINES 238-241

.. code-block:: default

    distributionPosterior = calibrationResult.getParameterPosterior()
    print(distributionPosterior)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Normal(mu = [1.37279e+08,-7.77559e+22,-7.77559e+22], sigma = [2.51675e+25,1.97855e+31,1.97855e+31], R = [[  1            2.12961e-25 -2.12961e-25 ]
     [  2.12961e-25  1            1           ]
     [ -2.12961e-25  1            1           ]])




.. GENERATED FROM PYTHON SOURCE LINES 242-245

We see that there is a large covariance matrix diagonal. 

Let us compute a 95% confidence interval for the solution :math:`\theta^\star`.

.. GENERATED FROM PYTHON SOURCE LINES 247-249

.. code-block:: default

    print(distributionPosterior.computeBilateralConfidenceIntervalWithMarginalProbability(0.95)[0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-5.62952e+25, 5.62952e+25]
    [-4.42566e+31, 4.42566e+31]
    [-4.42566e+31, 4.42566e+31]




.. GENERATED FROM PYTHON SOURCE LINES 250-251

The confidence interval is *very* large. In order to clarify the situation, we compute the Jacobian matrix of the model at the candidate point. 

.. GENERATED FROM PYTHON SOURCE LINES 253-260

.. code-block:: default

    mycf.setParameter(thetaPrior)
    thetaDim = len(thetaPrior)
    jacobianMatrix = ot.Matrix(nbobs,thetaDim)
    for i in range(nbobs):
        jacobianMatrix[i,:] = mycf.parameterGradient(Qobs[i]).transpose()
    print(jacobianMatrix[0:5,:])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    5x3
    [[ -0.149807   0.749035  -0.749035  ]
     [ -0.12538    0.626898  -0.626898  ]
     [ -0.0768935  0.384467  -0.384467  ]
     [ -0.141537   0.707687  -0.707687  ]
     [ -0.171616   0.85808   -0.85808   ]]




.. GENERATED FROM PYTHON SOURCE LINES 261-262

The rank of the problem can be seen from the singular values of the Jacobian matrix. 

.. GENERATED FROM PYTHON SOURCE LINES 264-266

.. code-block:: default

    print(jacobianMatrix.computeSingularValues())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [9.2622,1.59118e-10,1.87025e-25]




.. GENERATED FROM PYTHON SOURCE LINES 267-283

We can see that there are two singular values which are relatively close to zero. 

This explains why the Jacobian matrix is close to being rank-degenerate.

Moreover, this allows to compute the actual dimensionality of the problem. 
The algorithm we use computes the singular values in descending order. 
Moreover, by definition, the singular values are nonnegative. 
We see that the first singular value is close to :math:`10`
and the others are very close to :math:`0` in comparison. 
This implies that the (numerical) rank of the Jacobian matrix is 1, 
even if there are 3 parameters. 

Hence, only one parameter can be identified, be it :math:`K_s`, :math:`Z_v` or :math:`Z_m`. 
The choice of the particular parameter to identify is free. 
However, in hydraulic studies, the parameter :math:`K_s` is classically
calibrated while :math:`Z_v` and :math:`Z_m` are left constant. 

.. GENERATED FROM PYTHON SOURCE LINES 285-287

Conclusion of the linear least squares calibration
--------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 289-293

There are several methods to solve the problem.

* Given that the problem is not identifiable, we can use some regularization method. Two methods are provided in the library: the Gaussian linear least squares `GaussianLinearCalibration` and the Gaussian non linear least squares `GaussianNonlinearCalibration`.
* We can change the problem, replacing it with a problem which is identifiable. In the flooding model, we can view :math:`Z_v` and :math:`Z_m` as constants and calibrate :math:`K_s` only.

.. GENERATED FROM PYTHON SOURCE LINES 295-297

Calibration with non linear least squares
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 299-300

The `NonLinearLeastSquaresCalibration` class performs the non linear least squares calibration by minimizing the squared euclidian norm between the predictions and the observations.

.. GENERATED FROM PYTHON SOURCE LINES 302-304

.. code-block:: default

    algo = ot.NonLinearLeastSquaresCalibration(mycf, Qobs, Hobs, thetaPrior)








.. GENERATED FROM PYTHON SOURCE LINES 305-306

The `run` method computes the solution of the problem.

.. GENERATED FROM PYTHON SOURCE LINES 308-310

.. code-block:: default

    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 311-313

.. code-block:: default

    calibrationResult = algo.getResult()








.. GENERATED FROM PYTHON SOURCE LINES 314-316

Analysis of the results
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 318-319

The `getParameterMAP` method returns the maximum of the posterior distribution of :math:`\theta`.

.. GENERATED FROM PYTHON SOURCE LINES 321-324

.. code-block:: default

    thetaMAP = calibrationResult.getParameterMAP()
    print(thetaMAP)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [27.7047,47.0472,52.9528]




.. GENERATED FROM PYTHON SOURCE LINES 325-328

We can compute a 95% confidence interval of the parameter :math:`\theta^\star`. 

This confidence interval is based on bootstrap, based on a sample size equal to 100 (as long as the value of the `ResourceMap` key "NonLinearLeastSquaresCalibration-BootstrapSize" is unchanged). This confidence interval reflects the sensitivity of the optimum to the variability in the observations.

.. GENERATED FROM PYTHON SOURCE LINES 330-333

.. code-block:: default

    thetaPosterior = calibrationResult.getParameterPosterior()
    print(thetaPosterior.computeBilateralConfidenceIntervalWithMarginalProbability(0.95)[0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [27.5691, 27.8304]
    [46.9936, 47.105]
    [52.895, 53.0064]




.. GENERATED FROM PYTHON SOURCE LINES 334-335

In this case, the value of the parameter :math:`K_s` is quite accurately computed, but there is a relatively large uncertainty on the values of :math:`Z_v` and :math:`Z_m`.

.. GENERATED FROM PYTHON SOURCE LINES 337-341

.. code-block:: default

    graph = calibrationResult.drawObservationsVsInputs()
    graph.setLegendPosition("topleft")
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_003.png
   :alt: plot calibration flooding
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 342-343

We see that there is a good fit after calibration, since the predictions after calibration (i.e. the green crosses) are close to the observations (i.e. the blue crosses).

.. GENERATED FROM PYTHON SOURCE LINES 345-348

.. code-block:: default

    graph = calibrationResult.drawObservationsVsPredictions()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_004.png
   :alt: plot calibration flooding
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 349-350

We see that there is a much better fit after calibration, since the predictions are close to the diagonal of the graphics.

.. GENERATED FROM PYTHON SOURCE LINES 352-355

.. code-block:: default

    observationError = calibrationResult.getObservationsError()
    print(observationError)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Normal(mu = -0.00204035, sigma = 0.10277)




.. GENERATED FROM PYTHON SOURCE LINES 356-357

We can see that the observation error is close to have a zero mean and a standard deviation equal to 0.1.

.. GENERATED FROM PYTHON SOURCE LINES 359-363

.. code-block:: default

    graph = calibrationResult.drawResiduals()
    graph.setLegendPosition("topleft")
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_005.png
   :alt: , Residual analysis
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 364-367

The analysis of the residuals shows that the distribution is centered on zero and symmetric. This indicates that the calibration performed well. 

Moreover, the distribution of the residuals is close to being Gaussian.

.. GENERATED FROM PYTHON SOURCE LINES 369-372

.. code-block:: default

    graph = calibrationResult.drawParameterDistributions()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_006.png
   :alt: plot calibration flooding
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 373-375

Gaussian linear calibration
---------------------------

.. GENERATED FROM PYTHON SOURCE LINES 377-378

The standard deviation of the observations.

.. GENERATED FROM PYTHON SOURCE LINES 380-382

.. code-block:: default

    sigmaH = 0.5 # (m^2)








.. GENERATED FROM PYTHON SOURCE LINES 383-384

Define the covariance matrix of the output Y of the model.

.. GENERATED FROM PYTHON SOURCE LINES 386-389

.. code-block:: default

    errorCovariance = ot.CovarianceMatrix(1)
    errorCovariance[0,0] = sigmaH**2








.. GENERATED FROM PYTHON SOURCE LINES 390-391

Define the covariance matrix of the parameters :math:`\theta` to calibrate.

.. GENERATED FROM PYTHON SOURCE LINES 393-397

.. code-block:: default

    sigmaKs = 5.
    sigmaZv = 1.
    sigmaZm = 1.








.. GENERATED FROM PYTHON SOURCE LINES 398-404

.. code-block:: default

    sigma = ot.CovarianceMatrix(3)
    sigma[0,0] = sigmaKs**2
    sigma[1,1] = sigmaZv**2
    sigma[2,2] = sigmaZm**2
    print(sigma)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 25  0  0 ]
     [  0  1  0 ]
     [  0  0  1 ]]




.. GENERATED FROM PYTHON SOURCE LINES 405-406

The `GaussianLinearCalibration` class performs Gaussian linear calibration by linearizing the model in the neighbourhood of the prior.

.. GENERATED FROM PYTHON SOURCE LINES 408-410

.. code-block:: default

    algo = ot.GaussianLinearCalibration(mycf, Qobs, Hobs, thetaPrior, sigma, errorCovariance,"SVD")








.. GENERATED FROM PYTHON SOURCE LINES 411-412

The `run` method computes the solution of the problem.

.. GENERATED FROM PYTHON SOURCE LINES 414-416

.. code-block:: default

    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 417-419

.. code-block:: default

    calibrationResult = algo.getResult()








.. GENERATED FROM PYTHON SOURCE LINES 420-422

Analysis of the results
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 424-425

The `getParameterMAP` method returns the maximum of the posterior distribution of :math:`\theta`.

.. GENERATED FROM PYTHON SOURCE LINES 427-430

.. code-block:: default

    thetaStar = calibrationResult.getParameterMAP()
    print(thetaStar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [24.4988,48.1002,51.8998]




.. GENERATED FROM PYTHON SOURCE LINES 431-435

.. code-block:: default

    graph = calibrationResult.drawObservationsVsInputs()
    graph.setLegendPosition("topleft")
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_007.png
   :alt: plot calibration flooding
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 436-437

We see that the output of the model after calibration is closer to the observations. However, there is still a distance from the outputs of the model to the observations. This indicates that the calibration cannot be performed with this method.

.. GENERATED FROM PYTHON SOURCE LINES 439-442

.. code-block:: default

    graph = calibrationResult.drawObservationsVsPredictions()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_008.png
   :alt: plot calibration flooding
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 443-444

In this case, the fit is better after calibration, but not perfect. Indeed, the cloud of points after calibration is not centered on the diagonal. 

.. GENERATED FROM PYTHON SOURCE LINES 446-450

.. code-block:: default

    graph = calibrationResult.drawResiduals()
    graph.setLegendPosition("topleft")
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_009.png
   :alt: , Residual analysis
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 451-452

We see that the distribution of the residual is not centered on zero: the mean residual is approximately :math:`-0.5`, which implies that the predictions are, on average, smaller than the observations. This is a proof that the calibration cannot be performed with this method in this particular case.

.. GENERATED FROM PYTHON SOURCE LINES 454-455

The `getParameterPosterior` method returns the posterior normal distribution of :math:`\theta`.

.. GENERATED FROM PYTHON SOURCE LINES 457-460

.. code-block:: default

    distributionPosterior = calibrationResult.getParameterPosterior()
    print(distributionPosterior)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Normal(mu = [24.4988,48.1002,51.8998], sigma = [4.0845,0.8169,0.8169], R = [[  1         0.498518 -0.498518 ]
     [  0.498518  1         0.498518 ]
     [ -0.498518  0.498518  1        ]])




.. GENERATED FROM PYTHON SOURCE LINES 461-462

We can compute a 95% confidence interval of the parameter :math:`\theta^\star`.

.. GENERATED FROM PYTHON SOURCE LINES 464-466

.. code-block:: default

    print(distributionPosterior.computeBilateralConfidenceIntervalWithMarginalProbability(0.95)[0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [14.9293, 34.0682]
    [46.1864, 50.0141]
    [49.9859, 53.8136]




.. GENERATED FROM PYTHON SOURCE LINES 467-468

We see that there is a large uncertainty on the value of the parameter :math:`K_s` which can be as small as :math:`14` and as large as :math:`34`. 

.. GENERATED FROM PYTHON SOURCE LINES 470-471

We can compare the prior and posterior distributions of the marginals of :math:`\theta`. 

.. GENERATED FROM PYTHON SOURCE LINES 473-476

.. code-block:: default

    graph = calibrationResult.drawParameterDistributions()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_010.png
   :alt: plot calibration flooding
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 477-478

The two distributions are different, which shows that the calibration is sensible to the observations (if the observations were not sensible, the two distributions were superimposed). Moreover, the two distributions are quite close, which implies that the prior distribution has played a roled in the calibration (otherwise the two distributions would be completely different, indicating that only the observations were taken into account). 

.. GENERATED FROM PYTHON SOURCE LINES 480-482

Gaussian nonlinear calibration
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 484-485

The `GaussianNonLinearCalibration` class performs Gaussian nonlinear calibration.

.. GENERATED FROM PYTHON SOURCE LINES 487-489

.. code-block:: default

    algo = ot.GaussianNonLinearCalibration(mycf, Qobs, Hobs, thetaPrior, sigma, errorCovariance)








.. GENERATED FROM PYTHON SOURCE LINES 490-491

The `run` method computes the solution of the problem.

.. GENERATED FROM PYTHON SOURCE LINES 493-495

.. code-block:: default

    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 496-498

.. code-block:: default

    calibrationResult = algo.getResult()








.. GENERATED FROM PYTHON SOURCE LINES 499-501

Analysis of the results
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 503-504

The `getParameterMAP` method returns the maximum of the posterior distribution of :math:`\theta`.

.. GENERATED FROM PYTHON SOURCE LINES 506-509

.. code-block:: default

    thetaStar = calibrationResult.getParameterMAP()
    print(thetaStar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [30.5315,47.6329,52.3671]




.. GENERATED FROM PYTHON SOURCE LINES 510-514

.. code-block:: default

    graph = calibrationResult.drawObservationsVsInputs()
    graph.setLegendPosition("topleft")
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_011.png
   :alt: plot calibration flooding
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 515-516

We see that the output of the model after calibration is in the middle of the observations: the calibration seems correct.

.. GENERATED FROM PYTHON SOURCE LINES 518-521

.. code-block:: default

    graph = calibrationResult.drawObservationsVsPredictions()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_012.png
   :alt: plot calibration flooding
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 522-523

The fit is excellent after calibration. Indeed, the cloud of points after calibration is on the diagonal. 

.. GENERATED FROM PYTHON SOURCE LINES 525-528

.. code-block:: default

    graph = calibrationResult.drawResiduals()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_013.png
   :alt: , Residual analysis
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_013.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 529-530

We see that the histogram of the residual is centered on zero. This is a proof that the calibration did perform correctly.

.. GENERATED FROM PYTHON SOURCE LINES 532-533

The `getParameterPosterior` method returns the posterior normal distribution of :math:`\theta`.

.. GENERATED FROM PYTHON SOURCE LINES 535-537

.. code-block:: default

    distributionPosterior = calibrationResult.getParameterPosterior()








.. GENERATED FROM PYTHON SOURCE LINES 538-539

We can compute a 95% confidence interval of the parameter :math:`\theta^\star`.

.. GENERATED FROM PYTHON SOURCE LINES 541-543

.. code-block:: default

    print(distributionPosterior.computeBilateralConfidenceIntervalWithMarginalProbability(0.95)[0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [30.5048, 31.0264]
    [47.5696, 47.6362]
    [52.3638, 52.4304]




.. GENERATED FROM PYTHON SOURCE LINES 544-545

We see that there is a small uncertainty on the value of all parameters.

.. GENERATED FROM PYTHON SOURCE LINES 547-548

We can compare the prior and posterior distributions of the marginals of :math:`\theta`. 

.. GENERATED FROM PYTHON SOURCE LINES 550-553

.. code-block:: default

    graph = calibrationResult.drawParameterDistributions()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_014.png
   :alt: plot calibration flooding
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_flooding_014.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 554-555

The two distributions are very different, with a spiky posterior distribution. This shows that the calibration is very sensible to the observations. 

.. GENERATED FROM PYTHON SOURCE LINES 557-566

Tuning the posterior distribution estimation
--------------------------------------------

The "GaussianNonLinearCalibration-BootstrapSize" key controls the posterior distribution estimation.

* If "GaussianNonLinearCalibration-BootstrapSize" > 0 (by default it is equal to 100), then a bootstrap resample algorithm is used to see the dispersion of the MAP estimator. This allows to see the variability of the estimator with respect to the finite observation sample.
* If "GaussianNonLinearCalibration-BootstrapSize" is zero, then the Gaussian linear calibration estimator is used (i.e. the `GaussianLinearCalibration` class) at the optimum. This is called the Laplace approximation. 

We must configure the key before creating the object (otherwise changing the parameter does not change the result). 

.. GENERATED FROM PYTHON SOURCE LINES 568-570

.. code-block:: default

    ot.ResourceMap_SetAsUnsignedInteger("GaussianNonLinearCalibration-BootstrapSize",0) 








.. GENERATED FROM PYTHON SOURCE LINES 571-573

.. code-block:: default

    algo = ot.GaussianNonLinearCalibration(mycf, Qobs, Hobs, thetaPrior, sigma, errorCovariance)








.. GENERATED FROM PYTHON SOURCE LINES 574-576

.. code-block:: default

    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 577-579

.. code-block:: default

    calibrationResult = algo.getResult()








.. GENERATED FROM PYTHON SOURCE LINES 580-583

.. code-block:: default

    graph = calibrationResult.drawParameterDistributions()

    plt.show()







.. GENERATED FROM PYTHON SOURCE LINES 584-585

As we can see, this does not change much the posterior distribution, which remains spiky. 


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.231 seconds)


.. _sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_flooding.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_calibration_flooding.py <plot_calibration_flooding.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_calibration_flooding.ipynb <plot_calibration_flooding.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
