.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py:


Calibration of the deflection of a tube
=======================================

Description
-----------

We consider the deflection of a tube under a vertical stress.

<img src="_static/simply_supported_beam.png" width="300" />

The parameters of the model are:

* F : the strength,
* L : the length of the tube,
* a : position of the force,
* D : external diameter of the tube,
* d : internal diameter of the tube,
* E : Young modulus.

The following figure presents the internal and external diameter of the tube:

<img src="_static/tube-diameters.png" width="200" />

The area moment of inertia of the cross section about the neutral axis of a round tube (i.e. perpendicular to the section) with external and internal diameters :math:`D` and :math:`d` are:

.. math::

   I = \frac{\pi (D^4-d^4)}{32}.


The vertical deflection at point :math:`x=a` is:

.. math::
   g_1(X) = - F \frac{a^2 (L-a)^2}{3 E L I},


where :math:`X=(F,L,a,D,d,E)`. 
The angle of the tube at the left end is:

.. math::
   g_2(X) = 
   - F \frac{b (L^2-b^2)}{6 E L I},


and the angle of the tube at the right end is:

.. math::
   g_3(X) = 
   F \frac{a (L^2-a^2)}{6 E L I}.


The following table presents the distributions of the random variables. These variables are assumed to be independent.

======== ==========================
Variable Distribution
======== ==========================
F        Normal(1,0.1)
L        Normal(1.5,0.01)
a        Uniform(0.7,1.2)
D        Triangular(0.75,0.8,0.85)
d        Triangular(0.09,0.1,0.11)
E        Normal(200000,2000)
======== ==========================


References
----------

* Deflection of beams by Russ Elliott. http://www.clag.org.uk/beam.html
* https://upload.wikimedia.org/wikipedia/commons/f/ff/Simple_beam_with_offset_load.svg
* https://en.wikipedia.org/wiki/Deflection_(engineering)
* https://mechanicalc.com/reference/beam-deflection-tables
* https://en.wikipedia.org/wiki/Second_moment_of_area
* Shigley's Mechanical Engineering Design (9th Edition), Richard G. Budynas, J. Keith Nisbettn, McGraw Hill (2011)
* Mechanics of Materials (7th Edition), James M. Gere, Barry J. Goodno, Cengage Learning (2009)
* Statics and Mechanics of Materials (5th Edition), Ferdinand Beer, E. Russell Johnston, Jr., John DeWolf, David Mazurek. Mc Graw Hill (2011) Chapter 15: deflection of beams.

Create a calibration problem
----------------------------


.. code-block:: default

    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)








We use the variable names `De` for the external diameter and `di` for the internal diameter because the symbolic function engine is not case sensitive, hence the variable names `D` and `d` would not be distiguished.


.. code-block:: default

    inputsvars=["F","L","a","De","di","E"]
    formula = "var I:=pi_*(De^4-di^4)/32; var b:=L-a; g1:=-F*a^2*(L-a)^2/(3*E*L*I); g2:=-F*b*(L^2-b^2)/(6*E*L*I); g3:=F*a*(L^2-a^2)/(6*E*L*I)"
    g = ot.SymbolicFunction(inputsvars,["g1","g2","g3"],formula)
    g.setOutputDescription(["Deflection","Left angle","Right angle"])









.. code-block:: default

    XF=ot.Normal(1,0.1)
    XE=ot.Normal(200000,2000)
    XF.setDescription(["Force"])
    XE.setDescription(["Young Modulus"])









.. code-block:: default

    XL = ot.Dirac(1.5)
    Xa = ot.Dirac(1.0)
    XD = ot.Dirac(0.8)
    Xd = ot.Dirac(0.1)
    XL.setDescription(["Longueur"])
    Xa.setDescription(["Location"])
    XD.setDescription(["External diameter"])
    Xd.setDescription(["Internal diameter"])









.. code-block:: default

    inputDistribution = ot.ComposedDistribution([XF,XL,Xa,XD,Xd,XE])









.. code-block:: default

    sampleSize = 100
    inputSample = inputDistribution.getSample(sampleSize)
    inputSample[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Force</TH><TH>Longueur</TH><TH>Location</TH><TH>External diameter</TH><TH>Internal diameter</TH><TH>Young Modulus</TH></TR>
    <TR><TH>0</TH><TD>1.064552</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>200203.5</TD></TR>
    <TR><TH>1</TH><TD>1.0443</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>197415.5</TD></TR>
    <TR><TH>2</TH><TD>1.123688</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>203916.9</TD></TR>
    <TR><TH>3</TH><TD>0.9826647</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>198070.2</TD></TR>
    <TR><TH>4</TH><TD>0.9217701</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>198857.2</TD></TR>
    </TABLE>
    <br />
    <br />


.. code-block:: default

    outputDeflection = g(inputSample)
    outputDeflection[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-7.347998e-06</TD><TD>-1.4696e-05</TD><TD>1.837e-05</TD></TR>
    <TR><TH>1</TH><TD>-7.310009e-06</TD><TD>-1.462002e-05</TD><TD>1.827502e-05</TD></TR>
    <TR><TH>2</TH><TD>-7.614934e-06</TD><TD>-1.522987e-05</TD><TD>1.903733e-05</TD></TR>
    <TR><TH>3</TH><TD>-6.855827e-06</TD><TD>-1.371165e-05</TD><TD>1.713957e-05</TD></TR>
    <TR><TH>4</TH><TD>-6.405529e-06</TD><TD>-1.281106e-05</TD><TD>1.601382e-05</TD></TR>
    </TABLE>
    <br />
    <br />


.. code-block:: default

    observationNoiseSigma = [0.1e-6,0.05e-5,0.05e-5]
    observationNoiseCovariance = ot.CovarianceMatrix(3)
    for i in range(3):
        observationNoiseCovariance[i,i] = observationNoiseSigma[i]**2









.. code-block:: default

    noiseSigma = ot.Normal([0.,0.,0.],observationNoiseCovariance)
    sampleObservationNoise = noiseSigma.getSample(sampleSize)
    observedOutput = outputDeflection + sampleObservationNoise
    observedOutput[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-7.413478e-06</TD><TD>-1.576261e-05</TD><TD>1.810219e-05</TD></TR>
    <TR><TH>1</TH><TD>-7.385527e-06</TD><TD>-1.501412e-05</TD><TD>1.867476e-05</TD></TR>
    <TR><TH>2</TH><TD>-7.532924e-06</TD><TD>-1.582186e-05</TD><TD>1.841229e-05</TD></TR>
    <TR><TH>3</TH><TD>-6.804852e-06</TD><TD>-1.407256e-05</TD><TD>1.765737e-05</TD></TR>
    <TR><TH>4</TH><TD>-6.444243e-06</TD><TD>-1.295816e-05</TD><TD>1.599811e-05</TD></TR>
    </TABLE>
    <br />
    <br />


.. code-block:: default

    observedInput = ot.Sample(sampleSize,2)
    observedInput[:,0] = inputSample[:,0] # F
    observedInput[:,1] = inputSample[:,5] # E
    observedInput.setDescription(["Force","Young Modulus"])
    observedInput[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Force</TH><TH>Young Modulus</TH></TR>
    <TR><TH>0</TH><TD>1.064552</TD><TD>200203.5</TD></TR>
    <TR><TH>1</TH><TD>1.0443</TD><TD>197415.5</TD></TR>
    <TR><TH>2</TH><TD>1.123688</TD><TD>203916.9</TD></TR>
    <TR><TH>3</TH><TD>0.9826647</TD><TD>198070.2</TD></TR>
    <TR><TH>4</TH><TD>0.9217701</TD><TD>198857.2</TD></TR>
    </TABLE>
    <br />
    <br />


.. code-block:: default

    fullSample = ot.Sample(sampleSize,5)
    fullSample[:,0:2] = observedInput
    fullSample[:,2:5] = observedOutput
    fullSample.setDescription(["Force","Young","Deflection","Left Angle","Right Angle"])
    fullSample[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Force</TH><TH>Young</TH><TH>Deflection</TH><TH>Left Angle</TH><TH>Right Angle</TH></TR>
    <TR><TH>0</TH><TD>1.064552</TD><TD>200203.5</TD><TD>-7.413478e-06</TD><TD>-1.576261e-05</TD><TD>1.810219e-05</TD></TR>
    <TR><TH>1</TH><TD>1.0443</TD><TD>197415.5</TD><TD>-7.385527e-06</TD><TD>-1.501412e-05</TD><TD>1.867476e-05</TD></TR>
    <TR><TH>2</TH><TD>1.123688</TD><TD>203916.9</TD><TD>-7.532924e-06</TD><TD>-1.582186e-05</TD><TD>1.841229e-05</TD></TR>
    <TR><TH>3</TH><TD>0.9826647</TD><TD>198070.2</TD><TD>-6.804852e-06</TD><TD>-1.407256e-05</TD><TD>1.765737e-05</TD></TR>
    <TR><TH>4</TH><TD>0.9217701</TD><TD>198857.2</TD><TD>-6.444243e-06</TD><TD>-1.295816e-05</TD><TD>1.599811e-05</TD></TR>
    </TABLE>
    <br />
    <br />


.. code-block:: default

    graph = ot.VisualTest.DrawPairs(fullSample)
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_001.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img





Setting up the calibration
--------------------------


.. code-block:: default

    XL = 1.4 # Exact : 1.5
    Xa = 1.2 # Exact : 1.0
    XD = 0.7 # Exact : 0.8
    Xd = 0.2 # Exact : 0.1
    thetaPrior = ot.Point([XL,Xa,XD,Xd])










.. code-block:: default

    sigmaXL = 0.1 * XL
    sigmaXa = 0.1 * Xa
    sigmaXD = 0.1 * XD
    sigmaXd = 0.1 * Xd
    parameterCovariance = ot.CovarianceMatrix(4)
    parameterCovariance[0,0] = sigmaXL**2
    parameterCovariance[1,1] = sigmaXa**2
    parameterCovariance[2,2] = sigmaXD**2
    parameterCovariance[3,3] = sigmaXd**2
    parameterCovariance






.. raw:: html

    <p>[[ 0.0196 0      0      0      ]<br>
     [ 0      0.0144 0      0      ]<br>
     [ 0      0      0.0049 0      ]<br>
     [ 0      0      0      0.0004 ]]</p>
    <br />
    <br />


.. code-block:: default

    calibratedIndices = [1,2,3,4]
    calibrationFunction = ot.ParametricFunction(g, calibratedIndices, thetaPrior)









.. code-block:: default

    sigmaObservation = [0.2e-6,0.03e-5,0.03e-5] # Exact : 0.1e-6









.. code-block:: default

    errorCovariance = ot.CovarianceMatrix(3)
    errorCovariance[0,0] = sigmaObservation[0]**2
    errorCovariance[1,1] = sigmaObservation[1]**2
    errorCovariance[2,2] = sigmaObservation[2]**2









.. code-block:: default

    calibrationFunction.setParameter(thetaPrior)
    predictedOutput = calibrationFunction(observedInput)
    predictedOutput[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-3.114442e-06</TD><TD>-1.038147e-05</TD><TD>1.68699e-05</TD></TR>
    <TR><TH>1</TH><TD>-3.09834e-06</TD><TD>-1.03278e-05</TD><TD>1.678268e-05</TD></TR>
    <TR><TH>2</TH><TD>-3.227582e-06</TD><TD>-1.075861e-05</TD><TD>1.748274e-05</TD></TR>
    <TR><TH>3</TH><TD>-2.905836e-06</TD><TD>-9.68612e-06</TD><TD>1.573994e-05</TD></TR>
    <TR><TH>4</TH><TD>-2.714977e-06</TD><TD>-9.049924e-06</TD><TD>1.470613e-05</TD></TR>
    </TABLE>
    <br />
    <br />

Calibration with gaussian non linear least squares
--------------------------------------------------


.. code-block:: default

    algo = ot.GaussianNonLinearCalibration(calibrationFunction, observedInput, observedOutput, thetaPrior, parameterCovariance, errorCovariance)









.. code-block:: default

    algo.run()









.. code-block:: default

    calibrationResult = algo.getResult()








Analysis of the results
-----------------------


.. code-block:: default

    thetaMAP = calibrationResult.getParameterMAP()
    thetaMAP






.. raw:: html

    <p>[1.48718,0.985779,0.79819,0.199886]</p>
    <br />
    <br />

Compute a 95% confidence interval for each marginal.


.. code-block:: default

    thetaPosterior = calibrationResult.getParameterPosterior()
    alpha = 0.95
    dim = thetaPosterior.getDimension()
    for i in range(dim):
        print(thetaPosterior.getMarginal(i).computeBilateralConfidenceInterval(alpha))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1.46732, 1.50759]
    [0.9622, 1.01035]
    [0.793836, 0.802522]
    [0.199886, 0.199911]





.. code-block:: default

    graph = calibrationResult.drawObservationsVsInputs()
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_002.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img






.. code-block:: default

    graph = calibrationResult.drawObservationsVsPredictions()
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_003.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img






.. code-block:: default

    graph = calibrationResult.drawResiduals()
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_004.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img






.. code-block:: default

    graph = calibrationResult.drawParameterDistributions()
    view = viewer.View(graph)

    plt.show()



.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_005.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.976 seconds)


.. _sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_calibration_deflection_tube.py <plot_calibration_deflection_tube.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_calibration_deflection_tube.ipynb <plot_calibration_deflection_tube.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
