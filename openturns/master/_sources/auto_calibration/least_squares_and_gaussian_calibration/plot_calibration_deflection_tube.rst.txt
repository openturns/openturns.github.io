
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_calibration/least_squares_and_gaussian_calibration/plot_calibration_deflection_tube.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py:


Calibration of the deflection of a tube
=======================================

.. GENERATED FROM PYTHON SOURCE LINES 6-9

We calibrate the deflection of a tube as described :ref:`here <use-case-deflection-tube>`.
More precisely, we calibrate the mechanical parameters of a model which computes the vertical deflection of a tube and two deflection angles. This example shows how to calibrate a computer code which has several outputs.


.. GENERATED FROM PYTHON SOURCE LINES 11-19

.. code-block:: default

    from openturns.usecases import deflection_tube
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt

    ot.Log.Show(ot.Log.NONE)









.. GENERATED FROM PYTHON SOURCE LINES 20-22

Create a calibration problem
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 24-25

We load the model from the use case module :

.. GENERATED FROM PYTHON SOURCE LINES 25-27

.. code-block:: default

    dt = deflection_tube.DeflectionTube()








.. GENERATED FROM PYTHON SOURCE LINES 28-29

We create a sample out of our input distribution :

.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: default

    sampleSize = 100
    inputSample = dt.inputDistribution.getSample(sampleSize)
    inputSample[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Force</TH><TH>Length</TH><TH>Location</TH><TH>External diameter</TH><TH>Internal diameter</TH><TH>Young Modulus</TH></TR>
    <TR><TH>0</TH><TD>0.9886198</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>198813.2</TD></TR>
    <TR><TH>1</TH><TD>0.9659264</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>197055.1</TD></TR>
    <TR><TH>2</TH><TD>1.097242</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>199363.4</TD></TR>
    <TR><TH>3</TH><TD>1.00796</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>199045.5</TD></TR>
    <TR><TH>4</TH><TD>0.9531129</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>198060.4</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 34-35

We take the image of our input sample by the model :

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    outputDeflection = dt.model(inputSample)
    outputDeflection[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-6.8716e-06</TD><TD>-1.37432e-05</TD><TD>1.7179e-05</TD></TR>
    <TR><TH>1</TH><TD>-6.773763e-06</TD><TD>-1.354753e-05</TD><TD>1.693441e-05</TD></TR>
    <TR><TH>2</TH><TD>-7.605552e-06</TD><TD>-1.52111e-05</TD><TD>1.901388e-05</TD></TR>
    <TR><TH>3</TH><TD>-6.99785e-06</TD><TD>-1.39957e-05</TD><TD>1.749462e-05</TD></TR>
    <TR><TH>4</TH><TD>-6.64998e-06</TD><TD>-1.329996e-05</TD><TD>1.662495e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 39-44

.. code-block:: default

    observationNoiseSigma = [0.1e-6, 0.05e-5, 0.05e-5]
    observationNoiseCovariance = ot.CovarianceMatrix(3)
    for i in range(3):
        observationNoiseCovariance[i, i] = observationNoiseSigma[i] ** 2








.. GENERATED FROM PYTHON SOURCE LINES 45-50

.. code-block:: default

    noiseSigma = ot.Normal([0.0, 0.0, 0.0], observationNoiseCovariance)
    sampleObservationNoise = noiseSigma.getSample(sampleSize)
    observedOutput = outputDeflection + sampleObservationNoise
    observedOutput[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-6.770587e-06</TD><TD>-1.346099e-05</TD><TD>1.738157e-05</TD></TR>
    <TR><TH>1</TH><TD>-6.710988e-06</TD><TD>-1.336128e-05</TD><TD>1.663024e-05</TD></TR>
    <TR><TH>2</TH><TD>-7.714272e-06</TD><TD>-1.408485e-05</TD><TD>1.894873e-05</TD></TR>
    <TR><TH>3</TH><TD>-6.932516e-06</TD><TD>-1.332838e-05</TD><TD>1.861578e-05</TD></TR>
    <TR><TH>4</TH><TD>-6.626314e-06</TD><TD>-1.203596e-05</TD><TD>1.667933e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 51-57

.. code-block:: default

    observedInput = ot.Sample(sampleSize, 2)
    observedInput[:, 0] = inputSample[:, 0]  # F
    observedInput[:, 1] = inputSample[:, 5]  # E
    observedInput.setDescription(["Force", "Young Modulus"])
    observedInput[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Force</TH><TH>Young Modulus</TH></TR>
    <TR><TH>0</TH><TD>0.9886198</TD><TD>198813.2</TD></TR>
    <TR><TH>1</TH><TD>0.9659264</TD><TD>197055.1</TD></TR>
    <TR><TH>2</TH><TD>1.097242</TD><TD>199363.4</TD></TR>
    <TR><TH>3</TH><TD>1.00796</TD><TD>199045.5</TD></TR>
    <TR><TH>4</TH><TD>0.9531129</TD><TD>198060.4</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 58-64

.. code-block:: default

    fullSample = ot.Sample(sampleSize, 5)
    fullSample[:, 0:2] = observedInput
    fullSample[:, 2:5] = observedOutput
    fullSample.setDescription(["Force", "Young", "Deflection", "Left Angle", "Right Angle"])
    fullSample[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Force</TH><TH>Young</TH><TH>Deflection</TH><TH>Left Angle</TH><TH>Right Angle</TH></TR>
    <TR><TH>0</TH><TD>0.9886198</TD><TD>198813.2</TD><TD>-6.770587e-06</TD><TD>-1.346099e-05</TD><TD>1.738157e-05</TD></TR>
    <TR><TH>1</TH><TD>0.9659264</TD><TD>197055.1</TD><TD>-6.710988e-06</TD><TD>-1.336128e-05</TD><TD>1.663024e-05</TD></TR>
    <TR><TH>2</TH><TD>1.097242</TD><TD>199363.4</TD><TD>-7.714272e-06</TD><TD>-1.408485e-05</TD><TD>1.894873e-05</TD></TR>
    <TR><TH>3</TH><TD>1.00796</TD><TD>199045.5</TD><TD>-6.932516e-06</TD><TD>-1.332838e-05</TD><TD>1.861578e-05</TD></TR>
    <TR><TH>4</TH><TD>0.9531129</TD><TD>198060.4</TD><TD>-6.626314e-06</TD><TD>-1.203596e-05</TD><TD>1.667933e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default

    graph = ot.VisualTest.DrawPairs(fullSample)
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_001.png
   :alt: plot calibration deflection tube
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-71

Setting up the calibration
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 73-80

.. code-block:: default

    XL = 1.4  # Exact : 1.5
    Xa = 1.2  # Exact : 1.0
    XD = 0.7  # Exact : 0.8
    Xd = 0.2  # Exact : 0.1
    thetaPrior = [XL, Xa, XD, Xd]









.. GENERATED FROM PYTHON SOURCE LINES 81-92

.. code-block:: default

    sigmaXL = 0.1 * XL
    sigmaXa = 0.1 * Xa
    sigmaXD = 0.1 * XD
    sigmaXd = 0.1 * Xd
    parameterCovariance = ot.CovarianceMatrix(4)
    parameterCovariance[0, 0] = sigmaXL**2
    parameterCovariance[1, 1] = sigmaXa**2
    parameterCovariance[2, 2] = sigmaXD**2
    parameterCovariance[3, 3] = sigmaXd**2
    parameterCovariance






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ 0.0196 0      0      0      ]<br>
     [ 0      0.0144 0      0      ]<br>
     [ 0      0      0.0049 0      ]<br>
     [ 0      0      0      0.0004 ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 93-96

.. code-block:: default

    calibratedIndices = [1, 2, 3, 4]
    calibrationFunction = ot.ParametricFunction(dt.model, calibratedIndices, thetaPrior)








.. GENERATED FROM PYTHON SOURCE LINES 97-99

.. code-block:: default

    sigmaObservation = [0.2e-6, 0.03e-5, 0.03e-5]  # Exact : 0.1e-6








.. GENERATED FROM PYTHON SOURCE LINES 100-105

.. code-block:: default

    errorCovariance = ot.CovarianceMatrix(3)
    errorCovariance[0, 0] = sigmaObservation[0] ** 2
    errorCovariance[1, 1] = sigmaObservation[1] ** 2
    errorCovariance[2, 2] = sigmaObservation[2] ** 2








.. GENERATED FROM PYTHON SOURCE LINES 106-110

.. code-block:: default

    calibrationFunction.setParameter(thetaPrior)
    predictedOutput = calibrationFunction(observedInput)
    predictedOutput[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-2.912521e-06</TD><TD>-9.708404e-06</TD><TD>1.577616e-05</TD></TR>
    <TR><TH>1</TH><TD>-2.871053e-06</TD><TD>-9.570177e-06</TD><TD>1.555154e-05</TD></TR>
    <TR><TH>2</TH><TD>-3.223606e-06</TD><TD>-1.074535e-05</TD><TD>1.74612e-05</TD></TR>
    <TR><TH>3</TH><TD>-2.966032e-06</TD><TD>-9.886773e-06</TD><TD>1.606601e-05</TD></TR>
    <TR><TH>4</TH><TD>-2.818588e-06</TD><TD>-9.395293e-06</TD><TD>1.526735e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 111-113

Calibration with gaussian non linear least squares
--------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 115-124

.. code-block:: default

    algo = ot.GaussianNonLinearCalibration(
        calibrationFunction,
        observedInput,
        observedOutput,
        thetaPrior,
        parameterCovariance,
        errorCovariance,
    )








.. GENERATED FROM PYTHON SOURCE LINES 125-127

.. code-block:: default

    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 128-130

.. code-block:: default

    calibrationResult = algo.getResult()








.. GENERATED FROM PYTHON SOURCE LINES 131-133

Analysis of the results
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default

    thetaMAP = calibrationResult.getParameterMAP()
    thetaMAP






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[1.50983,1.01157,0.802627,0.199874]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 139-140

Compute a 95% confidence interval for each marginal.

.. GENERATED FROM PYTHON SOURCE LINES 142-148

.. code-block:: default

    thetaPosterior = calibrationResult.getParameterPosterior()
    alpha = 0.95
    dim = thetaPosterior.getDimension()
    for i in range(dim):
        print(thetaPosterior.getMarginal(i).computeBilateralConfidenceInterval(alpha))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1.49259, 1.52791]
    [0.989514, 1.03367]
    [0.799097, 0.806439]
    [0.199867, 0.19988]




.. GENERATED FROM PYTHON SOURCE LINES 149-152

.. code-block:: default

    graph = calibrationResult.drawObservationsVsInputs()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_002.png
   :alt: plot calibration deflection tube
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 153-156

.. code-block:: default

    graph = calibrationResult.drawObservationsVsPredictions()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_003.png
   :alt: plot calibration deflection tube
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 157-160

.. code-block:: default

    graph = calibrationResult.drawResiduals()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_004.png
   :alt: , Residual analysis, Residual analysis, Residual analysis
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 161-165

.. code-block:: default

    graph = calibrationResult.drawParameterDistributions()
    view = viewer.View(graph)

    plt.show()



.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_005.png
   :alt: plot calibration deflection tube
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.750 seconds)


.. _sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_calibration_deflection_tube.py <plot_calibration_deflection_tube.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_calibration_deflection_tube.ipynb <plot_calibration_deflection_tube.ipynb>`
