.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py:


Calibration of the deflection of a tube
=======================================

We consider a calibration of the deflection of a tube as described :ref:`here <use-case-deflection-tube>`.



.. code-block:: default

    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)









Create a calibration problem
----------------------------

We load the model from the use case module :


.. code-block:: default

    from openturns.usecases import deflection_tube as deflection_tube
    dt = deflection_tube.DeflectionTube()








We create a sample out of our input distribution :


.. code-block:: default

    sampleSize = 100
    inputSample = dt.inputDistribution.getSample(sampleSize)
    inputSample[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Force</TH><TH>Length</TH><TH>Location</TH><TH>External diameter</TH><TH>Internal diameter</TH><TH>Young Modulus</TH></TR>
    <TR><TH>0</TH><TD>0.8890136</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>199323.1</TD></TR>
    <TR><TH>1</TH><TD>1.056105</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>198446.3</TD></TR>
    <TR><TH>2</TH><TD>1.052138</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>202572.1</TD></TR>
    <TR><TH>3</TH><TD>1.058734</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>199465</TD></TR>
    <TR><TH>4</TH><TD>0.9325915</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>199179.1</TD></TR>
    </TABLE>
    <br />
    <br />

We take the image of our input sample by the model :


.. code-block:: default

    outputDeflection = dt.model(inputSample)
    outputDeflection[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-6.163458e-06</TD><TD>-1.232692e-05</TD><TD>1.540864e-05</TD></TR>
    <TR><TH>1</TH><TD>-7.354243e-06</TD><TD>-1.470849e-05</TD><TD>1.838561e-05</TD></TR>
    <TR><TH>2</TH><TD>-7.177393e-06</TD><TD>-1.435479e-05</TD><TD>1.794348e-05</TD></TR>
    <TR><TH>3</TH><TD>-7.334891e-06</TD><TD>-1.466978e-05</TD><TD>1.833723e-05</TD></TR>
    <TR><TH>4</TH><TD>-6.470256e-06</TD><TD>-1.294051e-05</TD><TD>1.617564e-05</TD></TR>
    </TABLE>
    <br />
    <br />


.. code-block:: default

    observationNoiseSigma = [0.1e-6,0.05e-5,0.05e-5]
    observationNoiseCovariance = ot.CovarianceMatrix(3)
    for i in range(3):
        observationNoiseCovariance[i,i] = observationNoiseSigma[i]**2









.. code-block:: default

    noiseSigma = ot.Normal([0.,0.,0.],observationNoiseCovariance)
    sampleObservationNoise = noiseSigma.getSample(sampleSize)
    observedOutput = outputDeflection + sampleObservationNoise
    observedOutput[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-6.137027e-06</TD><TD>-1.244258e-05</TD><TD>1.518425e-05</TD></TR>
    <TR><TH>1</TH><TD>-7.415107e-06</TD><TD>-1.441052e-05</TD><TD>1.856411e-05</TD></TR>
    <TR><TH>2</TH><TD>-7.305498e-06</TD><TD>-1.315868e-05</TD><TD>1.841629e-05</TD></TR>
    <TR><TH>3</TH><TD>-7.491503e-06</TD><TD>-1.433714e-05</TD><TD>1.829689e-05</TD></TR>
    <TR><TH>4</TH><TD>-6.654401e-06</TD><TD>-1.285798e-05</TD><TD>1.61612e-05</TD></TR>
    </TABLE>
    <br />
    <br />


.. code-block:: default

    observedInput = ot.Sample(sampleSize,2)
    observedInput[:,0] = inputSample[:,0] # F
    observedInput[:,1] = inputSample[:,5] # E
    observedInput.setDescription(["Force","Young Modulus"])
    observedInput[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Force</TH><TH>Young Modulus</TH></TR>
    <TR><TH>0</TH><TD>0.8890136</TD><TD>199323.1</TD></TR>
    <TR><TH>1</TH><TD>1.056105</TD><TD>198446.3</TD></TR>
    <TR><TH>2</TH><TD>1.052138</TD><TD>202572.1</TD></TR>
    <TR><TH>3</TH><TD>1.058734</TD><TD>199465</TD></TR>
    <TR><TH>4</TH><TD>0.9325915</TD><TD>199179.1</TD></TR>
    </TABLE>
    <br />
    <br />


.. code-block:: default

    fullSample = ot.Sample(sampleSize,5)
    fullSample[:,0:2] = observedInput
    fullSample[:,2:5] = observedOutput
    fullSample.setDescription(["Force","Young","Deflection","Left Angle","Right Angle"])
    fullSample[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Force</TH><TH>Young</TH><TH>Deflection</TH><TH>Left Angle</TH><TH>Right Angle</TH></TR>
    <TR><TH>0</TH><TD>0.8890136</TD><TD>199323.1</TD><TD>-6.137027e-06</TD><TD>-1.244258e-05</TD><TD>1.518425e-05</TD></TR>
    <TR><TH>1</TH><TD>1.056105</TD><TD>198446.3</TD><TD>-7.415107e-06</TD><TD>-1.441052e-05</TD><TD>1.856411e-05</TD></TR>
    <TR><TH>2</TH><TD>1.052138</TD><TD>202572.1</TD><TD>-7.305498e-06</TD><TD>-1.315868e-05</TD><TD>1.841629e-05</TD></TR>
    <TR><TH>3</TH><TD>1.058734</TD><TD>199465</TD><TD>-7.491503e-06</TD><TD>-1.433714e-05</TD><TD>1.829689e-05</TD></TR>
    <TR><TH>4</TH><TD>0.9325915</TD><TD>199179.1</TD><TD>-6.654401e-06</TD><TD>-1.285798e-05</TD><TD>1.61612e-05</TD></TR>
    </TABLE>
    <br />
    <br />


.. code-block:: default

    graph = ot.VisualTest.DrawPairs(fullSample)
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_001.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img





Setting up the calibration
--------------------------


.. code-block:: default

    XL = 1.4 # Exact : 1.5
    Xa = 1.2 # Exact : 1.0
    XD = 0.7 # Exact : 0.8
    Xd = 0.2 # Exact : 0.1
    thetaPrior = ot.Point([XL,Xa,XD,Xd])










.. code-block:: default

    sigmaXL = 0.1 * XL
    sigmaXa = 0.1 * Xa
    sigmaXD = 0.1 * XD
    sigmaXd = 0.1 * Xd
    parameterCovariance = ot.CovarianceMatrix(4)
    parameterCovariance[0,0] = sigmaXL**2
    parameterCovariance[1,1] = sigmaXa**2
    parameterCovariance[2,2] = sigmaXD**2
    parameterCovariance[3,3] = sigmaXd**2
    parameterCovariance






.. raw:: html

    <p>[[ 0.0196 0      0      0      ]<br>
     [ 0      0.0144 0      0      ]<br>
     [ 0      0      0.0049 0      ]<br>
     [ 0      0      0      0.0004 ]]</p>
    <br />
    <br />


.. code-block:: default

    calibratedIndices = [1,2,3,4]
    calibrationFunction = ot.ParametricFunction(dt.model, calibratedIndices, thetaPrior)









.. code-block:: default

    sigmaObservation = [0.2e-6,0.03e-5,0.03e-5] # Exact : 0.1e-6









.. code-block:: default

    errorCovariance = ot.CovarianceMatrix(3)
    errorCovariance[0,0] = sigmaObservation[0]**2
    errorCovariance[1,1] = sigmaObservation[1]**2
    errorCovariance[2,2] = sigmaObservation[2]**2









.. code-block:: default

    calibrationFunction.setParameter(thetaPrior)
    predictedOutput = calibrationFunction(observedInput)
    predictedOutput[0:5]






.. raw:: html

    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-2.612376e-06</TD><TD>-8.707919e-06</TD><TD>1.415037e-05</TD></TR>
    <TR><TH>1</TH><TD>-3.117089e-06</TD><TD>-1.03903e-05</TD><TD>1.688423e-05</TD></TR>
    <TR><TH>2</TH><TD>-3.042131e-06</TD><TD>-1.014044e-05</TD><TD>1.647821e-05</TD></TR>
    <TR><TH>3</TH><TD>-3.108887e-06</TD><TD>-1.036296e-05</TD><TD>1.68398e-05</TD></TR>
    <TR><TH>4</TH><TD>-2.742412e-06</TD><TD>-9.141372e-06</TD><TD>1.485473e-05</TD></TR>
    </TABLE>
    <br />
    <br />

Calibration with gaussian non linear least squares
--------------------------------------------------


.. code-block:: default

    algo = ot.GaussianNonLinearCalibration(calibrationFunction, observedInput, observedOutput, thetaPrior, parameterCovariance, errorCovariance)









.. code-block:: default

    algo.run()









.. code-block:: default

    calibrationResult = algo.getResult()








Analysis of the results
-----------------------


.. code-block:: default

    thetaMAP = calibrationResult.getParameterMAP()
    thetaMAP






.. raw:: html

    <p>[1.49677,0.99466,0.800456,0.199881]</p>
    <br />
    <br />

Compute a 95% confidence interval for each marginal.


.. code-block:: default

    thetaPosterior = calibrationResult.getParameterPosterior()
    alpha = 0.95
    dim = thetaPosterior.getDimension()
    for i in range(dim):
        print(thetaPosterior.getMarginal(i).computeBilateralConfidenceInterval(alpha))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1.47886, 1.51642]
    [0.972844, 1.0201]
    [0.796505, 0.803986]
    [0.199879, 0.199926]





.. code-block:: default

    graph = calibrationResult.drawObservationsVsInputs()
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_002.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img






.. code-block:: default

    graph = calibrationResult.drawObservationsVsPredictions()
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_003.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img






.. code-block:: default

    graph = calibrationResult.drawResiduals()
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_004.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img






.. code-block:: default

    graph = calibrationResult.drawParameterDistributions()
    view = viewer.View(graph)

    plt.show()



.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_005.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.963 seconds)


.. _sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_calibration_deflection_tube.py <plot_calibration_deflection_tube.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_calibration_deflection_tube.ipynb <plot_calibration_deflection_tube.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
