
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_calibration/least_squares_and_gaussian_calibration/plot_calibration_deflection_tube.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py:


Calibration of the deflection of a tube
=======================================

.. GENERATED FROM PYTHON SOURCE LINES 6-8

We consider a calibration of the deflection of a tube as described :ref:`here <use-case-deflection-tube>`.


.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: default

    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)









.. GENERATED FROM PYTHON SOURCE LINES 17-19

Create a calibration problem
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 21-22

We load the model from the use case module :

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default

    from openturns.usecases import deflection_tube as deflection_tube
    dt = deflection_tube.DeflectionTube()








.. GENERATED FROM PYTHON SOURCE LINES 26-27

We create a sample out of our input distribution :

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: default

    sampleSize = 100
    inputSample = dt.inputDistribution.getSample(sampleSize)
    inputSample[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Force</TH><TH>Length</TH><TH>Location</TH><TH>External diameter</TH><TH>Internal diameter</TH><TH>Young Modulus</TH></TR>
    <TR><TH>0</TH><TD>1.143208</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>198505.4</TD></TR>
    <TR><TH>1</TH><TD>1.009528</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>198799.3</TD></TR>
    <TR><TH>2</TH><TD>1.033743</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>199008.9</TD></TR>
    <TR><TH>3</TH><TD>0.9859627</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>203712</TD></TR>
    <TR><TH>4</TH><TD>1.093946</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>197420.4</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 32-33

We take the image of our input sample by the model :

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: default

    outputDeflection = dt.model(inputSample)
    outputDeflection[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-7.958417e-06</TD><TD>-1.591683e-05</TD><TD>1.989604e-05</TD></TR>
    <TR><TH>1</TH><TD>-7.017415e-06</TD><TD>-1.403483e-05</TD><TD>1.754354e-05</TD></TR>
    <TR><TH>2</TH><TD>-7.178172e-06</TD><TD>-1.435634e-05</TD><TD>1.794543e-05</TD></TR>
    <TR><TH>3</TH><TD>-6.688329e-06</TD><TD>-1.337666e-05</TD><TD>1.672082e-05</TD></TR>
    <TR><TH>4</TH><TD>-7.657331e-06</TD><TD>-1.531466e-05</TD><TD>1.914333e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 37-42

.. code-block:: default

    observationNoiseSigma = [0.1e-6,0.05e-5,0.05e-5]
    observationNoiseCovariance = ot.CovarianceMatrix(3)
    for i in range(3):
        observationNoiseCovariance[i,i] = observationNoiseSigma[i]**2








.. GENERATED FROM PYTHON SOURCE LINES 43-48

.. code-block:: default

    noiseSigma = ot.Normal([0.,0.,0.],observationNoiseCovariance)
    sampleObservationNoise = noiseSigma.getSample(sampleSize)
    observedOutput = outputDeflection + sampleObservationNoise
    observedOutput[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-7.874646e-06</TD><TD>-1.672263e-05</TD><TD>1.909547e-05</TD></TR>
    <TR><TH>1</TH><TD>-7.133114e-06</TD><TD>-1.424208e-05</TD><TD>1.667126e-05</TD></TR>
    <TR><TH>2</TH><TD>-7.163491e-06</TD><TD>-1.459358e-05</TD><TD>1.767127e-05</TD></TR>
    <TR><TH>3</TH><TD>-6.642948e-06</TD><TD>-1.300683e-05</TD><TD>1.691028e-05</TD></TR>
    <TR><TH>4</TH><TD>-7.730372e-06</TD><TD>-1.572353e-05</TD><TD>1.911801e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 49-55

.. code-block:: default

    observedInput = ot.Sample(sampleSize,2)
    observedInput[:,0] = inputSample[:,0] # F
    observedInput[:,1] = inputSample[:,5] # E
    observedInput.setDescription(["Force","Young Modulus"])
    observedInput[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Force</TH><TH>Young Modulus</TH></TR>
    <TR><TH>0</TH><TD>1.143208</TD><TD>198505.4</TD></TR>
    <TR><TH>1</TH><TD>1.009528</TD><TD>198799.3</TD></TR>
    <TR><TH>2</TH><TD>1.033743</TD><TD>199008.9</TD></TR>
    <TR><TH>3</TH><TD>0.9859627</TD><TD>203712</TD></TR>
    <TR><TH>4</TH><TD>1.093946</TD><TD>197420.4</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 56-62

.. code-block:: default

    fullSample = ot.Sample(sampleSize,5)
    fullSample[:,0:2] = observedInput
    fullSample[:,2:5] = observedOutput
    fullSample.setDescription(["Force","Young","Deflection","Left Angle","Right Angle"])
    fullSample[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Force</TH><TH>Young</TH><TH>Deflection</TH><TH>Left Angle</TH><TH>Right Angle</TH></TR>
    <TR><TH>0</TH><TD>1.143208</TD><TD>198505.4</TD><TD>-7.874646e-06</TD><TD>-1.672263e-05</TD><TD>1.909547e-05</TD></TR>
    <TR><TH>1</TH><TD>1.009528</TD><TD>198799.3</TD><TD>-7.133114e-06</TD><TD>-1.424208e-05</TD><TD>1.667126e-05</TD></TR>
    <TR><TH>2</TH><TD>1.033743</TD><TD>199008.9</TD><TD>-7.163491e-06</TD><TD>-1.459358e-05</TD><TD>1.767127e-05</TD></TR>
    <TR><TH>3</TH><TD>0.9859627</TD><TD>203712</TD><TD>-6.642948e-06</TD><TD>-1.300683e-05</TD><TD>1.691028e-05</TD></TR>
    <TR><TH>4</TH><TD>1.093946</TD><TD>197420.4</TD><TD>-7.730372e-06</TD><TD>-1.572353e-05</TD><TD>1.911801e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: default

    graph = ot.VisualTest.DrawPairs(fullSample)
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_001.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-69

Setting up the calibration
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 71-78

.. code-block:: default

    XL = 1.4 # Exact : 1.5
    Xa = 1.2 # Exact : 1.0
    XD = 0.7 # Exact : 0.8
    Xd = 0.2 # Exact : 0.1
    thetaPrior = [XL, Xa, XD, Xd]









.. GENERATED FROM PYTHON SOURCE LINES 79-90

.. code-block:: default

    sigmaXL = 0.1 * XL
    sigmaXa = 0.1 * Xa
    sigmaXD = 0.1 * XD
    sigmaXd = 0.1 * Xd
    parameterCovariance = ot.CovarianceMatrix(4)
    parameterCovariance[0,0] = sigmaXL**2
    parameterCovariance[1,1] = sigmaXa**2
    parameterCovariance[2,2] = sigmaXD**2
    parameterCovariance[3,3] = sigmaXd**2
    parameterCovariance






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ 0.0196 0      0      0      ]<br>
     [ 0      0.0144 0      0      ]<br>
     [ 0      0      0.0049 0      ]<br>
     [ 0      0      0      0.0004 ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: default

    calibratedIndices = [1,2,3,4]
    calibrationFunction = ot.ParametricFunction(dt.model, calibratedIndices, thetaPrior)








.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: default

    sigmaObservation = [0.2e-6,0.03e-5,0.03e-5] # Exact : 0.1e-6








.. GENERATED FROM PYTHON SOURCE LINES 98-103

.. code-block:: default

    errorCovariance = ot.CovarianceMatrix(3)
    errorCovariance[0,0] = sigmaObservation[0]**2
    errorCovariance[1,1] = sigmaObservation[1]**2
    errorCovariance[2,2] = sigmaObservation[2]**2








.. GENERATED FROM PYTHON SOURCE LINES 104-108

.. code-block:: default

    calibrationFunction.setParameter(thetaPrior)
    predictedOutput = calibrationFunction(observedInput)
    predictedOutput[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-3.373168e-06</TD><TD>-1.124389e-05</TD><TD>1.827132e-05</TD></TR>
    <TR><TH>1</TH><TD>-2.974325e-06</TD><TD>-9.914416e-06</TD><TD>1.611093e-05</TD></TR>
    <TR><TH>2</TH><TD>-3.042462e-06</TD><TD>-1.014154e-05</TD><TD>1.648e-05</TD></TR>
    <TR><TH>3</TH><TD>-2.834842e-06</TD><TD>-9.449474e-06</TD><TD>1.535539e-05</TD></TR>
    <TR><TH>4</TH><TD>-3.245552e-06</TD><TD>-1.081851e-05</TD><TD>1.758008e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 109-111

Calibration with gaussian non linear least squares
--------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 113-115

.. code-block:: default

    algo = ot.GaussianNonLinearCalibration(calibrationFunction, observedInput, observedOutput, thetaPrior, parameterCovariance, errorCovariance)








.. GENERATED FROM PYTHON SOURCE LINES 116-118

.. code-block:: default

    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 119-121

.. code-block:: default

    calibrationResult = algo.getResult()








.. GENERATED FROM PYTHON SOURCE LINES 122-124

Analysis of the results
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 126-129

.. code-block:: default

    thetaMAP = calibrationResult.getParameterMAP()
    thetaMAP






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[1.48964,0.986348,0.799484,0.199885]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 130-131

Compute a 95% confidence interval for each marginal.

.. GENERATED FROM PYTHON SOURCE LINES 133-139

.. code-block:: default

    thetaPosterior = calibrationResult.getParameterPosterior()
    alpha = 0.95
    dim = thetaPosterior.getDimension()
    for i in range(dim):
        print(thetaPosterior.getMarginal(i).computeBilateralConfidenceInterval(alpha))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1.47278, 1.51157]
    [0.965941, 1.01261]
    [0.79591, 0.803509]
    [0.199885, 0.19991]




.. GENERATED FROM PYTHON SOURCE LINES 140-143

.. code-block:: default

    graph = calibrationResult.drawObservationsVsInputs()
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_002.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 144-147

.. code-block:: default

    graph = calibrationResult.drawObservationsVsPredictions()
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_003.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 148-151

.. code-block:: default

    graph = calibrationResult.drawResiduals()
    view = viewer.View(graph)




.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_004.png
    :alt: , Residual analysis, Residual analysis, Residual analysis
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 152-156

.. code-block:: default

    graph = calibrationResult.drawParameterDistributions()
    view = viewer.View(graph)

    plt.show()



.. image:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_005.png
    :alt: plot calibration deflection tube
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.176 seconds)


.. _sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_calibration_deflection_tube.py <plot_calibration_deflection_tube.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_calibration_deflection_tube.ipynb <plot_calibration_deflection_tube.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
