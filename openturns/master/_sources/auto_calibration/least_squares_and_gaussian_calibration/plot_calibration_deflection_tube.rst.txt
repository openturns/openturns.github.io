
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_calibration/least_squares_and_gaussian_calibration/plot_calibration_deflection_tube.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py:


Calibration of the deflection of a tube
=======================================

.. GENERATED FROM PYTHON SOURCE LINES 6-9

We calibrate the deflection of a tube as described :ref:`here <use-case-deflection-tube>`.
More precisely, we calibrate the mechanical parameters of a model which computes the vertical deflection of a tube and two deflection angles. This example shows how to calibrate a computer code which has several outputs.


.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: default

    from openturns.usecases import deflection_tube as deflection_tube
    import openturns as ot
    import openturns.viewer as viewer
    from matplotlib import pylab as plt
    ot.Log.Show(ot.Log.NONE)









.. GENERATED FROM PYTHON SOURCE LINES 19-21

Create a calibration problem
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 23-24

We load the model from the use case module :

.. GENERATED FROM PYTHON SOURCE LINES 24-26

.. code-block:: default

    dt = deflection_tube.DeflectionTube()








.. GENERATED FROM PYTHON SOURCE LINES 27-28

We create a sample out of our input distribution :

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default

    sampleSize = 100
    inputSample = dt.inputDistribution.getSample(sampleSize)
    inputSample[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Force</TH><TH>Length</TH><TH>Location</TH><TH>External diameter</TH><TH>Internal diameter</TH><TH>Young Modulus</TH></TR>
    <TR><TH>0</TH><TD>1.10266</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>202335.2</TD></TR>
    <TR><TH>1</TH><TD>0.9143531</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>200632.6</TD></TR>
    <TR><TH>2</TH><TD>0.8361474</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>200339.3</TD></TR>
    <TR><TH>3</TH><TD>1.045459</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>199457.4</TD></TR>
    <TR><TH>4</TH><TD>1.033261</TD><TD>1.5</TD><TD>1</TD><TD>0.8</TD><TD>0.1</TD><TD>197321.3</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 33-34

We take the image of our input sample by the model :

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default

    outputDeflection = dt.model(inputSample)
    outputDeflection[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-7.530849e-06</TD><TD>-1.50617e-05</TD><TD>1.882712e-05</TD></TR>
    <TR><TH>1</TH><TD>-6.297759e-06</TD><TD>-1.259552e-05</TD><TD>1.57444e-05</TD></TR>
    <TR><TH>2</TH><TD>-5.767536e-06</TD><TD>-1.153507e-05</TD><TD>1.441884e-05</TD></TR>
    <TR><TH>3</TH><TD>-7.243199e-06</TD><TD>-1.44864e-05</TD><TD>1.8108e-05</TD></TR>
    <TR><TH>4</TH><TD>-7.23619e-06</TD><TD>-1.447238e-05</TD><TD>1.809047e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 38-43

.. code-block:: default

    observationNoiseSigma = [0.1e-6, 0.05e-5, 0.05e-5]
    observationNoiseCovariance = ot.CovarianceMatrix(3)
    for i in range(3):
        observationNoiseCovariance[i, i] = observationNoiseSigma[i]**2








.. GENERATED FROM PYTHON SOURCE LINES 44-49

.. code-block:: default

    noiseSigma = ot.Normal([0., 0., 0.], observationNoiseCovariance)
    sampleObservationNoise = noiseSigma.getSample(sampleSize)
    observedOutput = outputDeflection + sampleObservationNoise
    observedOutput[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-7.469112e-06</TD><TD>-1.62731e-05</TD><TD>1.891786e-05</TD></TR>
    <TR><TH>1</TH><TD>-6.327604e-06</TD><TD>-1.345598e-05</TD><TD>1.63929e-05</TD></TR>
    <TR><TH>2</TH><TD>-5.685728e-06</TD><TD>-1.141955e-05</TD><TD>1.465065e-05</TD></TR>
    <TR><TH>3</TH><TD>-7.169634e-06</TD><TD>-1.389388e-05</TD><TD>1.77643e-05</TD></TR>
    <TR><TH>4</TH><TD>-7.335801e-06</TD><TD>-1.399372e-05</TD><TD>1.780856e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 50-56

.. code-block:: default

    observedInput = ot.Sample(sampleSize, 2)
    observedInput[:, 0] = inputSample[:, 0]  # F
    observedInput[:, 1] = inputSample[:, 5]  # E
    observedInput.setDescription(["Force", "Young Modulus"])
    observedInput[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Force</TH><TH>Young Modulus</TH></TR>
    <TR><TH>0</TH><TD>1.10266</TD><TD>202335.2</TD></TR>
    <TR><TH>1</TH><TD>0.9143531</TD><TD>200632.6</TD></TR>
    <TR><TH>2</TH><TD>0.8361474</TD><TD>200339.3</TD></TR>
    <TR><TH>3</TH><TD>1.045459</TD><TD>199457.4</TD></TR>
    <TR><TH>4</TH><TD>1.033261</TD><TD>197321.3</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 57-64

.. code-block:: default

    fullSample = ot.Sample(sampleSize, 5)
    fullSample[:, 0:2] = observedInput
    fullSample[:, 2:5] = observedOutput
    fullSample.setDescription(
        ["Force", "Young", "Deflection", "Left Angle", "Right Angle"])
    fullSample[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Force</TH><TH>Young</TH><TH>Deflection</TH><TH>Left Angle</TH><TH>Right Angle</TH></TR>
    <TR><TH>0</TH><TD>1.10266</TD><TD>202335.2</TD><TD>-7.469112e-06</TD><TD>-1.62731e-05</TD><TD>1.891786e-05</TD></TR>
    <TR><TH>1</TH><TD>0.9143531</TD><TD>200632.6</TD><TD>-6.327604e-06</TD><TD>-1.345598e-05</TD><TD>1.63929e-05</TD></TR>
    <TR><TH>2</TH><TD>0.8361474</TD><TD>200339.3</TD><TD>-5.685728e-06</TD><TD>-1.141955e-05</TD><TD>1.465065e-05</TD></TR>
    <TR><TH>3</TH><TD>1.045459</TD><TD>199457.4</TD><TD>-7.169634e-06</TD><TD>-1.389388e-05</TD><TD>1.77643e-05</TD></TR>
    <TR><TH>4</TH><TD>1.033261</TD><TD>197321.3</TD><TD>-7.335801e-06</TD><TD>-1.399372e-05</TD><TD>1.780856e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default

    graph = ot.VisualTest.DrawPairs(fullSample)
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_001.png
   :alt: plot calibration deflection tube
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-71

Setting up the calibration
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 73-80

.. code-block:: default

    XL = 1.4  # Exact : 1.5
    Xa = 1.2  # Exact : 1.0
    XD = 0.7  # Exact : 0.8
    Xd = 0.2  # Exact : 0.1
    thetaPrior = [XL, Xa, XD, Xd]









.. GENERATED FROM PYTHON SOURCE LINES 81-92

.. code-block:: default

    sigmaXL = 0.1 * XL
    sigmaXa = 0.1 * Xa
    sigmaXD = 0.1 * XD
    sigmaXd = 0.1 * Xd
    parameterCovariance = ot.CovarianceMatrix(4)
    parameterCovariance[0, 0] = sigmaXL**2
    parameterCovariance[1, 1] = sigmaXa**2
    parameterCovariance[2, 2] = sigmaXD**2
    parameterCovariance[3, 3] = sigmaXd**2
    parameterCovariance






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[[ 0.0196 0      0      0      ]<br>
     [ 0      0.0144 0      0      ]<br>
     [ 0      0      0.0049 0      ]<br>
     [ 0      0      0      0.0004 ]]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 93-97

.. code-block:: default

    calibratedIndices = [1, 2, 3, 4]
    calibrationFunction = ot.ParametricFunction(
        dt.model, calibratedIndices, thetaPrior)








.. GENERATED FROM PYTHON SOURCE LINES 98-100

.. code-block:: default

    sigmaObservation = [0.2e-6, 0.03e-5, 0.03e-5]  # Exact : 0.1e-6








.. GENERATED FROM PYTHON SOURCE LINES 101-106

.. code-block:: default

    errorCovariance = ot.CovarianceMatrix(3)
    errorCovariance[0, 0] = sigmaObservation[0]**2
    errorCovariance[1, 1] = sigmaObservation[1]**2
    errorCovariance[2, 2] = sigmaObservation[2]**2








.. GENERATED FROM PYTHON SOURCE LINES 107-111

.. code-block:: default

    calibrationFunction.setParameter(thetaPrior)
    predictedOutput = calibrationFunction(observedInput)
    predictedOutput[0:5]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <TABLE><TR><TD></TD><TH>Deflection</TH><TH>Left angle</TH><TH>Right angle</TH></TR>
    <TR><TH>0</TH><TD>-3.191943e-06</TD><TD>-1.063981e-05</TD><TD>1.728969e-05</TD></TR>
    <TR><TH>1</TH><TD>-2.669299e-06</TD><TD>-8.897664e-06</TD><TD>1.44587e-05</TD></TR>
    <TR><TH>2</TH><TD>-2.444565e-06</TD><TD>-8.148549e-06</TD><TD>1.324139e-05</TD></TR>
    <TR><TH>3</TH><TD>-3.070023e-06</TD><TD>-1.023341e-05</TD><TD>1.662929e-05</TD></TR>
    <TR><TH>4</TH><TD>-3.067052e-06</TD><TD>-1.022351e-05</TD><TD>1.66132e-05</TD></TR>
    </TABLE>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 112-114

Calibration with gaussian non linear least squares
--------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 116-119

.. code-block:: default

    algo = ot.GaussianNonLinearCalibration(
        calibrationFunction, observedInput, observedOutput, thetaPrior, parameterCovariance, errorCovariance)








.. GENERATED FROM PYTHON SOURCE LINES 120-122

.. code-block:: default

    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 123-125

.. code-block:: default

    calibrationResult = algo.getResult()








.. GENERATED FROM PYTHON SOURCE LINES 126-128

Analysis of the results
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 130-133

.. code-block:: default

    thetaMAP = calibrationResult.getParameterMAP()
    thetaMAP






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[1.47907,0.97359,0.79731,0.199891]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 134-135

Compute a 95% confidence interval for each marginal.

.. GENERATED FROM PYTHON SOURCE LINES 137-143

.. code-block:: default

    thetaPosterior = calibrationResult.getParameterPosterior()
    alpha = 0.95
    dim = thetaPosterior.getDimension()
    for i in range(dim):
        print(thetaPosterior.getMarginal(i).computeBilateralConfidenceInterval(alpha))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1.45718, 1.49881]
    [0.94752, 0.99671]
    [0.792526, 0.801531]
    [0.199894, 0.19992]




.. GENERATED FROM PYTHON SOURCE LINES 144-147

.. code-block:: default

    graph = calibrationResult.drawObservationsVsInputs()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_002.png
   :alt: plot calibration deflection tube
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 148-151

.. code-block:: default

    graph = calibrationResult.drawObservationsVsPredictions()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_003.png
   :alt: plot calibration deflection tube
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 152-155

.. code-block:: default

    graph = calibrationResult.drawResiduals()
    view = viewer.View(graph)




.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_004.png
   :alt: , Residual analysis, Residual analysis, Residual analysis
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 156-160

.. code-block:: default

    graph = calibrationResult.drawParameterDistributions()
    view = viewer.View(graph)

    plt.show()



.. image-sg:: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_005.png
   :alt: plot calibration deflection tube
   :srcset: /auto_calibration/least_squares_and_gaussian_calibration/images/sphx_glr_plot_calibration_deflection_tube_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.109 seconds)


.. _sphx_glr_download_auto_calibration_least_squares_and_gaussian_calibration_plot_calibration_deflection_tube.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_calibration_deflection_tube.py <plot_calibration_deflection_tube.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_calibration_deflection_tube.ipynb <plot_calibration_deflection_tube.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
