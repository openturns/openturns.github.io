
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_meta_modeling/kriging_metamodel/plot_kriging_multioutput_firesatellite.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_meta_modeling_kriging_metamodel_plot_kriging_multioutput_firesatellite.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_meta_modeling_kriging_metamodel_plot_kriging_multioutput_firesatellite.py:


Example of multi output Kriging on the fire satellite model
===========================================================

.. GENERATED FROM PYTHON SOURCE LINES 6-7

This example aims to illustrate Kriging metamodel with several outputs on the fire satellite model.

.. GENERATED FROM PYTHON SOURCE LINES 10-14

Loading of the model
--------------------
This model involves 9 input variables and 3 output variables.
We load the :ref:`Fire satellite use case<use-case-firesatellite>`.

.. GENERATED FROM PYTHON SOURCE LINES 16-24

.. code-block:: default

    import openturns as ot
    from openturns.usecases.fireSatellite_function import FireSatelliteModel
    from openturns.viewer import View

    ot.Log.Show(ot.Log.NONE)

    m = FireSatelliteModel()








.. GENERATED FROM PYTHON SOURCE LINES 25-26

We define the function that evaluates the outputs depending on the inputs.

.. GENERATED FROM PYTHON SOURCE LINES 28-30

.. code-block:: default

    model = m.model








.. GENERATED FROM PYTHON SOURCE LINES 31-32

We also define the distribution of input variables to build the training and test sets.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default

    inputDistribution = m.distributionX









.. GENERATED FROM PYTHON SOURCE LINES 38-41

Generation of data
------------------
We now generate the input and output training sets as 10 times the dimension of the input vector.

.. GENERATED FROM PYTHON SOURCE LINES 43-51

.. code-block:: default

    ot.RandomGenerator.SetSeed(0)
    experiment = ot.LHSExperiment(inputDistribution, 10 * m.dim)
    inputTrainingSet = experiment.generate()
    outputTrainingSet = model(inputTrainingSet)

    print("Lower and upper bounds of inputTrainingSet:")
    print(inputTrainingSet.getMin(), inputTrainingSet.getMax())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lower and upper bounds of inputTrainingSet:
    [1.48998e+07,884.904,1346.42,12.3163,0.967437,-1.85029,2.54609,0.93158,0.253772] [2.04726e+07,1126.11,1446.96,17.5554,3.48743,3.09689,7.43877,3.0465,1.71498]




.. GENERATED FROM PYTHON SOURCE LINES 52-55

Creation of metamodel
---------------------
We choose to use a constant trend.

.. GENERATED FROM PYTHON SOURCE LINES 57-65

.. code-block:: default

    linear_basis = ot.LinearBasisFactory(m.dim).build()
    basis = ot.Basis(
        [
            ot.AggregatedFunction([linear_basis.build(k)] * 3)
            for k in range(linear_basis.getSize())
        ]
    )








.. GENERATED FROM PYTHON SOURCE LINES 66-69

We would like to have separate covariance models for the three outputs.
To do so, we use the `TensorizedCovarianceModel`.
For the purpose of illustration, we consider `MaternModel` for the first and third outputs, and `SquaredExponential` for the second output.

.. GENERATED FROM PYTHON SOURCE LINES 71-77

.. code-block:: default

    myCov1 = ot.MaternModel([1.0] * m.dim, 2.5)
    myCov2 = ot.SquaredExponential([1.0] * m.dim)
    myCov3 = ot.MaternModel([1.0] * m.dim, 2.5)

    covarianceModel = ot.TensorizedCovarianceModel([myCov1, myCov2, myCov3])








.. GENERATED FROM PYTHON SOURCE LINES 78-83

The scaling of the data is really important when dealing with Kriging,
especially considering the domain definition of the input variables (the
altitude varies in order of 1e7 whereas the drag coefficient is around 1).
We thus define appropriate bounds for the training algorithm based on the
domain definition of each variable.

.. GENERATED FROM PYTHON SOURCE LINES 85-90

.. code-block:: default

    scaleOptimizationBounds = ot.Interval(
        [1.0, 1.0, 0.1, 0.01, 0.1, 0.1, 0.01, 0.01, 0.001, 0.01, 0.01, 0.01],
        [1.0e7, 2.0e3, 2.0e3, 1e2, 10.0, 10.0, 10.0, 10.0, 10.0, 1e8, 1e4, 1e3],
    )








.. GENERATED FROM PYTHON SOURCE LINES 91-92

We can now define the scaled version of Kriging model.

.. GENERATED FROM PYTHON SOURCE LINES 92-109

.. code-block:: default

    optimal_scale = [
        1e07,
        1126.11,
        1446.96,
        17.5554,
        3.48743,
        3.09689,
        7.43877,
        3.0465,
        1.71498,
    ]
    covarianceModel.setScale(optimal_scale)
    covarianceModel.setAmplitude([0.542174, 1.0, 1.0])

    algo = ot.KrigingAlgorithm(inputTrainingSet, outputTrainingSet, covarianceModel, basis)
    algo.setOptimizationBounds(scaleOptimizationBounds)
    algo.setOptimizeParameters(False)







.. GENERATED FROM PYTHON SOURCE LINES 110-111

We run the algorithm and get the metamodel.

.. GENERATED FROM PYTHON SOURCE LINES 111-115

.. code-block:: default

    algo.run()
    result = algo.getResult()
    krigingMetamodel = result.getMetaModel()








.. GENERATED FROM PYTHON SOURCE LINES 116-119

Validation of metamodel
-----------------------
To validate the metamodel, we create a validation set of size equal to 50 times the input vector dimension to evaluate the functions.

.. GENERATED FROM PYTHON SOURCE LINES 121-127

.. code-block:: default

    ot.RandomGenerator.SetSeed(1)
    experimentTest = ot.LHSExperiment(inputDistribution, 50 * m.dim)
    inputTestSet = experimentTest.generate()
    outputTestSet = model(inputTestSet)
    outputKriging = krigingMetamodel(inputTestSet)








.. GENERATED FROM PYTHON SOURCE LINES 128-129

Then, we use the `MetaModelValidation` class to validate the metamodel.

.. GENERATED FROM PYTHON SOURCE LINES 129-144

.. code-block:: default

    val = ot.MetaModelValidation(inputTestSet, outputTestSet, krigingMetamodel)

    Q2 = val.computePredictivityFactor()

    label = ["Total torque", "Total power", "Solar array area"]

    for i in range(3):
        graph = val.drawValidation().getGraph(0, i)
        graph.setLegends([""])
        graph.setLegends(["Q2 = %.2f%%" % (100 * Q2[i]), ""])
        graph.setLegendPosition("upper left")
        graph.setXTitle("Exact function")
        graph.setYTitle("Metamodel prediction")
        graph.setTitle(label[i])
        View(graph)



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_multioutput_firesatellite_001.png
         :alt: Total torque
         :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_multioutput_firesatellite_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_multioutput_firesatellite_002.png
         :alt: Total power
         :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_multioutput_firesatellite_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_multioutput_firesatellite_003.png
         :alt: Solar array area
         :srcset: /auto_meta_modeling/kriging_metamodel/images/sphx_glr_plot_kriging_multioutput_firesatellite_003.png
         :class: sphx-glr-multi-img






.. _sphx_glr_download_auto_meta_modeling_kriging_metamodel_plot_kriging_multioutput_firesatellite.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_kriging_multioutput_firesatellite.py <plot_kriging_multioutput_firesatellite.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_kriging_multioutput_firesatellite.ipynb <plot_kriging_multioutput_firesatellite.ipynb>`
