
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_meta_modeling/general_purpose_metamodels/plot_gaussian_process_fitter.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_meta_modeling_general_purpose_metamodels_plot_gaussian_process_fitter.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_meta_modeling_general_purpose_metamodels_plot_gaussian_process_fitter.py:


Create a general linear model metamodel
=======================================

.. GENERATED FROM PYTHON SOURCE LINES 7-9

In this example we create a global approximation of a model response using a general linear model.
We show how to use the :class:`~openturns.experimental.GaussianProcessFitter` class, which estimates the parameters of the model.

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python

    import openturns as ot
    import openturns.experimental as otexp
    import openturns.viewer as viewer









.. GENERATED FROM PYTHON SOURCE LINES 17-18

We create a model and a sample from this model.

.. GENERATED FROM PYTHON SOURCE LINES 20-28

.. code-block:: Python

    dimension = 2
    input_names = ["x1", "x2"]
    formulas = ["cos(0.1 * x1 + 0.2 * x2)"]
    model = ot.SymbolicFunction(input_names, formulas)
    distribution = ot.Normal(dimension)
    x = distribution.getSample(100)
    y = model(x)








.. GENERATED FROM PYTHON SOURCE LINES 29-31

We create a :class:`~openturns.experimental.GaussianProcessFitter` based on a quadratic basis.
The `run` method estimates the coefficients of the trend and the hyperparameters of the covariance model.

.. GENERATED FROM PYTHON SOURCE LINES 33-39

.. code-block:: Python

    basis = ot.QuadraticBasisFactory(dimension).build()
    covarianceModel = ot.SquaredExponential([1] * dimension, [1.0])
    algo = otexp.GaussianProcessFitter(x, y, covarianceModel, basis)
    algo.run()
    result = algo.getResult()








.. GENERATED FROM PYTHON SOURCE LINES 40-41

We see that the trend coefficients have been estimated.

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: Python

    result.getTrendCoefficients()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    class=Point name=Unnamed dimension=6 values=[0.9893,-9.10261e-05,-7.8651e-05,-0.00443002,-0.0177721,-0.0178076]
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 46-47

The parameters of the covariance models also have been estimated.

.. GENERATED FROM PYTHON SOURCE LINES 49-51

.. code-block:: Python

    result.getCovarianceModel()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>SquaredExponential(scale=[3.42943,1.84012], amplitude=[0.00434356])</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 52-53

The `getMetaModel` method returns the metamodel where the parameters have been estimated.

.. GENERATED FROM PYTHON SOURCE LINES 55-57

.. code-block:: Python

    responseSurface = result.getMetaModel()








.. GENERATED FROM PYTHON SOURCE LINES 58-59

Plot the output of our model depending on :math:`x_2` with :math:`x_1=0.5`.

.. GENERATED FROM PYTHON SOURCE LINES 61-71

.. code-block:: Python

    xmin = -5.0
    xmax = 5.0
    x1value = 0.5
    parametricModelGraph = ot.ParametricFunction(model, [0], [x1value]).draw(xmin, xmax)
    graphMetamodel = ot.ParametricFunction(responseSurface, [0], [x1value]).draw(xmin, xmax)
    parametricModelGraph.add(graphMetamodel)
    parametricModelGraph.setLegends(["Model", "Meta-Model"])
    parametricModelGraph.setLegendPosition("upper right")
    view = viewer.View(parametricModelGraph)




.. image-sg:: /auto_meta_modeling/general_purpose_metamodels/images/sphx_glr_plot_gaussian_process_fitter_001.svg
   :alt: y0 as a function of x2
   :srcset: /auto_meta_modeling/general_purpose_metamodels/images/sphx_glr_plot_gaussian_process_fitter_001.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-73

.. code-block:: Python

    view.ShowAll()








.. _sphx_glr_download_auto_meta_modeling_general_purpose_metamodels_plot_gaussian_process_fitter.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_gaussian_process_fitter.ipynb <plot_gaussian_process_fitter.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_gaussian_process_fitter.py <plot_gaussian_process_fitter.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_gaussian_process_fitter.zip <plot_gaussian_process_fitter.zip>`
