
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_data_analysis/distribution_fitting/plot_estimate_gev_venice.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_data_analysis_distribution_fitting_plot_estimate_gev_venice.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_data_analysis_distribution_fitting_plot_estimate_gev_venice.py:


Estimate a GEV on the Venice sea levels data
============================================

.. GENERATED FROM PYTHON SOURCE LINES 6-13

In this example we are going to estimate the parameters of a generalized extreme value distribution
on the Venice sea levels data from [coles2001]_ with different methods:

- the maximum likelihood estimation
- the profile likelihood estimation
- the estimation of return level from both maximum likelihood and profile likelihood
- the R maxima estimator (see [coles2001]_ paragraph 3.5.3)

.. GENERATED FROM PYTHON SOURCE LINES 15-16

Load the Venice dataset of 10 highest sea levels per year

.. GENERATED FROM PYTHON SOURCE LINES 16-24

.. code-block:: default

    import openturns as ot
    import openturns.viewer as otv
    import openturns.experimental as otexp
    from openturns.usecases import coles

    data = coles.Coles().venice
    print(data[:5])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        [ Year r1   r2   r3   r4   r5   r6   r7   r8   r9   r10  ]
    0 : [ 1931  103   99   98   96   94   89   86   85   84   79 ]
    1 : [ 1932   78   78   74   73   73   72   71   70   70   69 ]
    2 : [ 1933  121  113  106  105  102   89   89   88   86   85 ]
    3 : [ 1934  116  113   91   91   91   89   88   88   86   81 ]
    4 : [ 1936  147  106   93   90   87   87   87   84   82   81 ]




.. GENERATED FROM PYTHON SOURCE LINES 25-26

Plot the 10 largest sea levels per year

.. GENERATED FROM PYTHON SOURCE LINES 26-33

.. code-block:: default

    graph = ot.Graph("Venice sea level", "year", "Sea level (cm)", True, "")
    for r in range(10):
        cloud = ot.Cloud(data[:, [0, 1 + r]])
        graph.add(cloud)
    graph.setIntegerXTick(True)
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_venice_001.png
   :alt: Venice sea level
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_venice_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 34-35

First work on the first column after the year column to retain only one max value per year

.. GENERATED FROM PYTHON SOURCE LINES 35-37

.. code-block:: default

    sample = data[:, 1]








.. GENERATED FROM PYTHON SOURCE LINES 38-40

Estimate the parameters of the GEV by maximizing the log-likehood
and compute the parameter distribution

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    factory = ot.GeneralizedExtremeValueFactory()
    result1 = factory.buildMethodOfLikelihoodMaximizationEstimator(sample)








.. GENERATED FROM PYTHON SOURCE LINES 44-45

Print the estimated parameter values

.. GENERATED FROM PYTHON SOURCE LINES 45-50

.. code-block:: default

    estimate = result1.getDistribution()
    desc = estimate.getParameterDescription()
    p = estimate.getParameter()
    print(", ".join([f"{param}: {value:.3f}" for param, value in zip(desc, p)]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    mu: 111.088, sigma: 17.338, xi: -0.077




.. GENERATED FROM PYTHON SOURCE LINES 51-52

Inspect the estimated Gaussian parameter distribution

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default

    parameterEstimate = result1.getParameterDistribution()
    print(parameterEstimate)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Normal(mu = [111.088,17.3382,-0.0769988], sigma = [2.90896,1.79594,0.0793248], R = [[  1         0.450296 -0.488199 ]
     [  0.450296  1        -0.438803 ]
     [ -0.488199 -0.438803  1        ]])




.. GENERATED FROM PYTHON SOURCE LINES 56-57

Inspect the covariance matrix

.. GENERATED FROM PYTHON SOURCE LINES 57-60

.. code-block:: default

    V = parameterEstimate.getCovariance()
    print(V)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[  8.46207     2.35249    -0.112653   ]
     [  2.35249     3.22539    -0.0625129  ]
     [ -0.112653   -0.0625129   0.00629243 ]]




.. GENERATED FROM PYTHON SOURCE LINES 61-62

Inspect the standard deviation

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default

    stddev = parameterEstimate.getStandardDeviation()
    print(stddev)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [2.90896,1.79594,0.0793248]




.. GENERATED FROM PYTHON SOURCE LINES 66-67

Extract parameters confidence intervals

.. GENERATED FROM PYTHON SOURCE LINES 67-71

.. code-block:: default

    for i in range(3):
        ci = parameterEstimate.getMarginal(i).computeBilateralConfidenceInterval(0.95)
        print(desc[i] + ":", ci)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    mu: [105.387, 116.789]
    sigma: [13.8182, 20.8582]
    xi: [-0.232473, 0.078475]




.. GENERATED FROM PYTHON SOURCE LINES 72-73

Validate the inference result thanks to some diagnostic plots

.. GENERATED FROM PYTHON SOURCE LINES 73-77

.. code-block:: default

    validation = otexp.GeneralizedExtremeValueValidation(result1, sample)
    graph = validation.drawDiagnosticPlot()
    view = otv.View(graph)




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_venice_002.png
   :alt: , Sample versus model PP-plot, Sample versus model QQ-plot, Return level, Density
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_venice_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-79

Now estimate the parameters with the profile likelihood

.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: default

    result2 = factory.buildMethodOfProfileLikelihoodMaximizationEstimator(sample)








.. GENERATED FROM PYTHON SOURCE LINES 82-83

We can see the confidence interval of :math:`\xi` is a bit smaller with this method

.. GENERATED FROM PYTHON SOURCE LINES 83-86

.. code-block:: default

    result2.setConfidenceLevel(0.95)
    print(result2.getParameterConfidenceInterval())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [-0.200118, 0.101776]




.. GENERATED FROM PYTHON SOURCE LINES 87-88

We can also plot the profile likelihood and the confidence interval

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    view = otv.View(result2.drawProfileLikelihoodFunction())




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_venice_003.png
   :alt: profile likelihood
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_venice_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 91-92

Estimate the 10 and 100 years return levels from the MLE estimator

.. GENERATED FROM PYTHON SOURCE LINES 92-104

.. code-block:: default

    zm10 = factory.buildReturnLevelEstimator(result1, 10.0)
    return_level10 = zm10.getMean()
    print(f"10 years return level={return_level10}")
    return_level_ci10 = zm10.computeBilateralConfidenceInterval(0.95)
    print(f"CI={return_level_ci10}")

    zm100 = factory.buildReturnLevelEstimator(result1, 100.0)
    return_level100 = zm100.getMean()
    print(f"100 years return level={return_level100}")
    return_level_ci100 = zm100.computeBilateralConfidenceInterval(0.95)
    print(f"CI={return_level_ci100}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    10 years return level=[146.912]
    CI=[137.581, 156.243]
    100 years return level=[178.251]
    CI=[158.175, 198.326]




.. GENERATED FROM PYTHON SOURCE LINES 105-106

Now estimate the 10 years return level with profile likelihood

.. GENERATED FROM PYTHON SOURCE LINES 106-110

.. code-block:: default

    result_rl10_prof = factory.buildReturnLevelProfileLikelihoodEstimator(sample, 10.0)
    zm = result_rl10_prof.getParameter()
    print(f"10 years return level (profile)={zm}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    10 years return level (profile)=147.69168889379483




.. GENERATED FROM PYTHON SOURCE LINES 111-112

We can see the confidence interval of :math:`z_m` is a bit smaller with this method

.. GENERATED FROM PYTHON SOURCE LINES 112-116

.. code-block:: default

    result_rl10_prof.setConfidenceLevel(0.95)
    return_level_ci10 = result_rl10_prof.getParameterConfidenceInterval()
    print(f"CI={return_level_ci10}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    CI=[139.205, 160.937]




.. GENERATED FROM PYTHON SOURCE LINES 117-118

We can also plot the profile likelihood and the confidence interval

.. GENERATED FROM PYTHON SOURCE LINES 118-120

.. code-block:: default

    view = otv.View(result_rl10_prof.drawProfileLikelihoodFunction())




.. image-sg:: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_venice_004.png
   :alt: profile likelihood
   :srcset: /auto_data_analysis/distribution_fitting/images/sphx_glr_plot_estimate_gev_venice_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 121-122

Now drop the year column to keep only the maxima values

.. GENERATED FROM PYTHON SOURCE LINES 122-125

.. code-block:: default

    sample_rmax = data[:, 1:]
    print(sample_rmax[:5])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        [ r1  r2  r3  r4  r5  r6  r7  r8  r9  r10 ]
    0 : [ 103  99  98  96  94  89  86  85  84  79 ]
    1 : [  78  78  74  73  73  72  71  70  70  69 ]
    2 : [ 121 113 106 105 102  89  89  88  86  85 ]
    3 : [ 116 113  91  91  91  89  88  88  86  81 ]
    4 : [ 147 106  93  90  87  87  87  84  82  81 ]




.. GENERATED FROM PYTHON SOURCE LINES 126-128

Estimate the parameters of the GEV from the r largest observations
for different values of r

.. GENERATED FROM PYTHON SOURCE LINES 128-137

.. code-block:: default

    factory = ot.GeneralizedExtremeValueFactory()
    r_candidate = [1, 5, 10]
    for r in r_candidate:
        estimate = factory.buildRMaxima(sample_rmax, r)
        desc = estimate.getParameterDescription()
        p = estimate.getParameter()
        pretty_p = ", ".join([f"{param}: {value:.3f}" for param, value in zip(desc, p)])
        print(f"r={r:2} {pretty_p}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    r= 1 mu: 111.099, sigma: 17.346, xi: -0.077
    r= 5 mu: 118.702, sigma: 13.713, xi: -0.088
    r=10 mu: 120.707, sigma: 12.815, xi: -0.113




.. GENERATED FROM PYTHON SOURCE LINES 138-139

It is possible to retrieve the value of r which maximizes the likelihood

.. GENERATED FROM PYTHON SOURCE LINES 139-142

.. code-block:: default

    best_r, llh = factory.buildBestRMaxima(sample_rmax, r_candidate)
    print(best_r)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1




.. GENERATED FROM PYTHON SOURCE LINES 143-144

We can also get the associated likelihood value

.. GENERATED FROM PYTHON SOURCE LINES 144-147

.. code-block:: default

    for i in range(3):
        print(f"r={r_candidate[i]} likelihood={llh[i]}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    r=1 likelihood=-218.85953117058833
    r=5 likelihood=-717.7749932611638
    r=10 likelihood=-1123.056052590468




.. GENERATED FROM PYTHON SOURCE LINES 148-149

We can also get the associated parameter distribution

.. GENERATED FROM PYTHON SOURCE LINES 149-152

.. code-block:: default

    result5 = factory.buildRMaximaEstimator(sample_rmax, 1)
    print(result5.getParameterDistribution())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Normal(mu = [111.099,17.3458,-0.0771419], sigma = [0.763625,0.769499,0.0384669], R = [[ 1        0.662866 0.143128 ]
     [ 0.662866 1        0.763213 ]
     [ 0.143128 0.763213 1        ]])




.. GENERATED FROM PYTHON SOURCE LINES 153-154

.. code-block:: default

    otv.View.ShowAll()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.007 seconds)


.. _sphx_glr_download_auto_data_analysis_distribution_fitting_plot_estimate_gev_venice.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_estimate_gev_venice.py <plot_estimate_gev_venice.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_estimate_gev_venice.ipynb <plot_estimate_gev_venice.ipynb>`
