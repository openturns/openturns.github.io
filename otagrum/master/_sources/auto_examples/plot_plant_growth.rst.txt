
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_plant_growth.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_plant_growth.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_plant_growth.py:


Plant growth
============

.. GENERATED FROM PYTHON SOURCE LINES 7-33

The study presented in that section focuses on the growth of particular plant (not specified).
The objective is to predict which height will be reached by the plant ...
for example in order to evaluate the risk that the plant might require un greater jag on the balcony ...

The problem is that we have no data on the height usually reached by this kind of plant, which prohibits any use of statistics tools ...
So ... what ? Yet we have the following information:

   - we know the influence of the quality of the light and the influence of the air moisture rate on the plant growth,
   - we can quantify the quality of the light we have at home and also the air moisture rate where the plant lives.

.... so we can model the plant growth thanks to a Bayes net and then have access to the variability of its final height!

Let us imagine (for the example purpose): 

 - Some meteorological data (tropical place?): 

   - the balcony is in plain light 3 times out of 4,
   - in the darkness, the air is moist 8 times out of 10,
   - in plain light, the air is dry 6 times out of 10.

 - Some remembrance of biology trainings:

   - in plain light, if the air is moist, the plant is very happy: it grows 90cm on average with a variation of $\pm$ 10 cm. If the air is too dry, it will not grow more than 30 cm but we reasonnably can expect about a 15 cm growth.
   - in the darkness, if the air is too dry, the plant suffers: it will not grow more than 20 cm and might die as well! If the air is moist, it will  usually grow about 30 cm, at least 15cm but not more than 50 cm.



.. GENERATED FROM PYTHON SOURCE LINES 35-42

.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    import otagrum
    import pyAgrum as gum
    from openturns.viewer import View
    from matplotlib import pylab as plt








.. GENERATED FROM PYTHON SOURCE LINES 43-53

.. code-block:: default

    def showPotential(pot):
        try:
            # fails outside notebook
            import pyAgrum.lib.notebook as gnb
            gnb.showPotential(pot)
        except ImportError:
            pass

    # We have to build the Bayes Net now. There are 3 variables that will be named : $Light$, $Moisture$ and $Height$.








.. GENERATED FROM PYTHON SOURCE LINES 54-55

Create variables

.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: default

    light = gum.LabelizedVariable("Light", "quality of light", 0)
    moisture = gum.LabelizedVariable("Moisture", "quantity of moisture", 0)
    height = gum.DiscretizedVariable("Height", "plant growth")








.. GENERATED FROM PYTHON SOURCE LINES 62-68

Both variables **Light** and **Moisture** are categorical variables whith the following attributes:  

 - **Light** has 2 attributes: **Dim** which refers to the darkness and **Bright** which refers to plain light situations,
 - **Moisture** has 2 attributes: **Dry** which refers to dry air situations and **Wet** which refers to wet air situations.

**Height** is a continuous variable which has to be discretized for the Bayes Net use.

.. GENERATED FROM PYTHON SOURCE LINES 70-71

# Create labels and ticks

.. GENERATED FROM PYTHON SOURCE LINES 73-74

light has 2 attributes : Dim and Bright

.. GENERATED FROM PYTHON SOURCE LINES 76-79

.. code-block:: default

    light.addLabel("Dim")
    light.addLabel("Bright")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (gum::LabelizedVariable@0x55fe276399d0) Light<Dim,Bright>



.. GENERATED FROM PYTHON SOURCE LINES 80-81

moisture has 2 attributes : Dry and Wet

.. GENERATED FROM PYTHON SOURCE LINES 83-86

.. code-block:: default

    moisture.addLabel("Dry")
    moisture.addLabel("Wet")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (gum::LabelizedVariable@0x55fe289c10e0) Moisture<Dry,Wet>



.. GENERATED FROM PYTHON SOURCE LINES 87-88

height is a discretized variable

.. GENERATED FROM PYTHON SOURCE LINES 90-93

.. code-block:: default

    [height.addTick(i) for i in range(0, 150, 10)]
    height.domainSize()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    14



.. GENERATED FROM PYTHON SOURCE LINES 94-95

Furthermore, there are several influence links : **Light** on **Moisture**, **(Light,Moisture)** on **Height**.

.. GENERATED FROM PYTHON SOURCE LINES 97-98

# Create the net

.. GENERATED FROM PYTHON SOURCE LINES 98-100

.. code-block:: default

    bn = gum.BayesNet("Plant Growth")








.. GENERATED FROM PYTHON SOURCE LINES 101-102

Add variables

.. GENERATED FROM PYTHON SOURCE LINES 104-108

.. code-block:: default

    indexLight    = bn.add(light)
    indexMoisture = bn.add(moisture)
    indexHeight   = bn.add(height)








.. GENERATED FROM PYTHON SOURCE LINES 109-110

Add arcs

.. GENERATED FROM PYTHON SOURCE LINES 112-117

.. code-block:: default

    bn.addArc(indexLight, indexMoisture)
    bn.addArc(indexLight, indexHeight)
    bn.addArc(indexMoisture, indexHeight)
    bn





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (gum::BayesNet<double>@0x55fe28415af0) BN{nodes: 3, arcs: 3, domainSize: 56, dim: 62}



.. GENERATED FROM PYTHON SOURCE LINES 118-124

The next step is the quantification of the Bayes net.

The variable $Light$ is quantified as follows:

 - **Light=Dim** with a probability of 0.25,
 - **Light=Bright** with a probability of 0.75.

.. GENERATED FROM PYTHON SOURCE LINES 126-128

Create conditional probability tables
light conditional probability table

.. GENERATED FROM PYTHON SOURCE LINES 130-133

.. code-block:: default

    bn.cpt(indexLight)[:]= [0.25, 0.75]
    showPotential(bn.cpt(indexLight))








.. GENERATED FROM PYTHON SOURCE LINES 134-137

The influence of $Light$ on $Moisture$ is modelized by:
 - when $Light=Dim$ then  $Moisture=Dry$ with a probability of 0.2 and  $Moisture=Wet$ with a probability of 0.8,
 - when $Light=Bright$ then  $Moisture=Dry$ with a probability of 0.6 and  $Moisture=Wet$ with a probability of 0.4.

.. GENERATED FROM PYTHON SOURCE LINES 139-141

moisture conditional probability table
We show the antecedents of moisture with the order in which they were declared

.. GENERATED FROM PYTHON SOURCE LINES 143-147

.. code-block:: default

    bn.cpt(indexMoisture)[{'Light' : 'Dim'}] = [0.2, 0.8]
    bn.cpt(indexMoisture)[{'Light' : 'Bright'}] = [0.6, 0.4]
    showPotential(bn.cpt(indexMoisture))








.. GENERATED FROM PYTHON SOURCE LINES 148-153

The influence of **(Light, Moisture)** on **Height** is modelized by:
 - when **Light=Dim** and **Moisture=Dry** then **Height** follows a **Uniform(min=0, max=20)** distribution,
 - when **Light=Dim** and **Moisture=Wet** then **Height** follows a **Triangular(min=15, mod=30, max=50)** distribution,
 - when **Light=Bright** and $Moisture=Dry$ then $Height$ follows a **Triangular(min=0, mod=15, max=30)** distribution,
 - when **Light=Bright** and $Moisture=Wet$ then $Height$ follows a **Normal(\mu=90, \sigma=10)** distribution.

.. GENERATED FROM PYTHON SOURCE LINES 155-157

height has a conditional probability table
We give here its conditional distributions

.. GENERATED FROM PYTHON SOURCE LINES 159-160

distribution when Dim and Dry

.. GENERATED FROM PYTHON SOURCE LINES 160-168

.. code-block:: default

    heightWhenDimAndDry = ot.Uniform(0.0, 20.0)
    # distribution when Dim and Wet
    heightWhenDimAndWet = ot.Triangular(15.0, 30.0, 50.0)
    # distribution when Bright and Dry
    heightWhenBrightAndDry = ot.Triangular(0.0, 15.0, 30.0)
    # distribution when Bright and Wet
    heightWhenBrightAndWet = ot.Normal(90.0, 10.0)








.. GENERATED FROM PYTHON SOURCE LINES 169-172

We have to enter some OT distributions whithin aGrUM conditional probability tables
We show the antecedents of height with the order in which they were declared
The new class Utils from otagrum is able to marry OT distributions and Agrum conditional probability tables

.. GENERATED FROM PYTHON SOURCE LINES 174-180

.. code-block:: default

    bn.cpt(indexHeight)[{'Light': 'Dim', 'Moisture': 'Dry'}]   = otagrum.Utils.Discretize(heightWhenDimAndDry, height)[:]
    bn.cpt(indexHeight)[{'Light': 'Bright', 'Moisture': 'Dry'}] = otagrum.Utils.Discretize(heightWhenBrightAndDry, height)[:]
    bn.cpt(indexHeight)[{'Light': 'Dim', 'Moisture': 'Wet'}]    = otagrum.Utils.Discretize(heightWhenDimAndWet, height)[:]
    bn.cpt(indexHeight)[{'Light': 'Bright', 'Moisture': 'Wet'}] = otagrum.Utils.Discretize(heightWhenBrightAndWet, height)[:]
    showPotential(bn.cpt(indexHeight))








.. GENERATED FROM PYTHON SOURCE LINES 181-186

We can study the plant growth variability in different situations like:

 - I put my plant on my balcony; in that situation, I set none evidence inside the Bayes net.
 - I put my plant in a  place where it is dark all time (in my cellar?); in that situation, I set one evidence inside the Bayes net: $Light=Dim$.
 - I put my plant in a  place where it is moist all time (in my bathroom?); in that situation, I set one evidence inside the Bayes net: $Moisture=Wet$.

.. GENERATED FROM PYTHON SOURCE LINES 188-189

Variability of the plant growth on my balcony

.. GENERATED FROM PYTHON SOURCE LINES 191-196

.. code-block:: default

    ie = gum.LazyPropagation(bn)
    h_dist = otagrum.Utils.FromMarginal(ie.posterior("Height"))
    print("Probability (height > 40cm) = ", 1.0 - h_dist.computeCDF(40.0))
    View(h_dist.drawPDF())




.. image:: /auto_examples/images/sphx_glr_plot_plant_growth_001.png
    :alt: Height PDF
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Probability (height > 40cm) =  0.32857134257593235

    <openturns.viewer.View object at 0x7f17d4968ee0>



.. GENERATED FROM PYTHON SOURCE LINES 197-198

Variability of the plant growth in my cellar

.. GENERATED FROM PYTHON SOURCE LINES 200-203

.. code-block:: default

    ie = gum.LazyPropagation(bn)
    ie.setEvidence({'Light':'Dim'})








.. GENERATED FROM PYTHON SOURCE LINES 204-210

.. code-block:: default

    h_dist_dim = otagrum.Utils.FromMarginal(ie.posterior("Height"))
    h_dist_dim.setDescription(['Height|Light=Dim'])
    print("Probability (height > 40cm)|Light=Dim = ", 1.0 - h_dist_dim.computeCDF(40.0))
    View(h_dist_dim.drawPDF())





.. image:: /auto_examples/images/sphx_glr_plot_plant_growth_002.png
    :alt: Height|Light=Dim PDF
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Probability (height > 40cm)|Light=Dim =  0.11428571428571421

    <openturns.viewer.View object at 0x7f17d4968a00>



.. GENERATED FROM PYTHON SOURCE LINES 211-212

Variability of the plant growth when the atmosphere is very wet

.. GENERATED FROM PYTHON SOURCE LINES 214-217

.. code-block:: default

    ie = gum.LazyPropagation(bn)
    ie.setEvidence({'Moisture':'Wet'})








.. GENERATED FROM PYTHON SOURCE LINES 218-224

.. code-block:: default

    h_dist_wet = otagrum.Utils.FromMarginal(ie.posterior("Height"))
    h_dist_wet.setDescription(['Height|Moisture=Wet'])
    print("Probability (height > 40cm)|Moisture=Wet = ", 1.0 - h_dist_wet.computeCDF(40.0))
    View(h_dist_wet.drawPDF())





.. image:: /auto_examples/images/sphx_glr_plot_plant_growth_003.png
    :alt: Height|Moisture=Wet PDF
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Probability (height > 40cm)|Moisture=Wet =  0.6571426851518647

    <openturns.viewer.View object at 0x7f17d4968850>



.. GENERATED FROM PYTHON SOURCE LINES 225-226

Get the distribution of the variable "Light"

.. GENERATED FROM PYTHON SOURCE LINES 228-232

.. code-block:: default

    l_dist_wet = otagrum.Utils.FromPotential(ie.posterior("Light"))
    print(l_dist_wet)
    View(l_dist_wet.drawPDF())




.. image:: /auto_examples/images/sphx_glr_plot_plant_growth_004.png
    :alt: Light PDF
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    UserDefined({x = [0], p = 0.4}, {x = [1], p = 0.6})

    <openturns.viewer.View object at 0x7f17d4866340>



.. GENERATED FROM PYTHON SOURCE LINES 233-234

Get the joint distribution [H, M]

.. GENERATED FROM PYTHON SOURCE LINES 234-241

.. code-block:: default

    ie = gum.LazyPropagation(bn)
    ie.addJointTarget({"Height", "Moisture"})
    ie.makeInference()
    h_m_dist = otagrum.Utils.FromPotential(ie.jointPosterior({"Height", "Moisture"}))
    print(h_m_dist.getDescription())
    print(h_m_dist.getMarginal(0))
    plt.show()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [Moisture,Height]
    UserDefined({x = [0], p = 0.5}, {x = [1], p = 0.5})





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.547 seconds)


.. _sphx_glr_download_auto_examples_plot_plant_growth.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_plant_growth.py <plot_plant_growth.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_plant_growth.ipynb <plot_plant_growth.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
