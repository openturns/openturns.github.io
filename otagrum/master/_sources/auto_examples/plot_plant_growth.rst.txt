.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_plant_growth.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_plant_growth.py:


Plant growth
============

The study presented in that section focuses on the growth of particular plant (not specified).
The objective is to predict which height will be reached by the plant ...
for example in order to evaluate the risk that the plant might require un greater jag on the balcony ...

The problem is that we have no data on the height usually reached by this kind of plant, which prohibits any use of statistics tools ...
So ... what ? Yet we have the following information:

   - we know the influence of the quality of the light and the influence of the air moisture rate on the plant growth,
   - we can quantify the quality of the light we have at home and also the air moisture rate where the plant lives.

.... so we can model the plant growth thanks to a Bayes net and then have access to the variability of its final height!

Let us imagine (for the example purpose): 

 - Some meteorological data (tropical place?): 

   - the balcony is in plain light 3 times out of 4,
   - in the darkness, the air is moist 8 times out of 10,
   - in plain light, the air is dry 6 times out of 10.

 - Some remembrance of biology trainings:

   - in plain light, if the air is moist, the plant is very happy: it grows 90cm on average with a variation of $\pm$ 10 cm. If the air is too dry, it will not grow more than 30 cm but we reasonnably can expect about a 15 cm growth.
   - in the darkness, if the air is too dry, the plant suffers: it will not grow more than 20 cm and might die as well! If the air is moist, it will  usually grow about 30 cm, at least 15cm but not more than 50 cm.




.. code-block:: default

    from __future__ import print_function
    import openturns as ot
    import otagrum
    import pyAgrum as gum
    from openturns.viewer import View
    from matplotlib import pylab as plt

    # We have to build the Bayes Net now. There are 3 variables that will be named : $Light$, $Moisture$ and $Height$.








Create variables


.. code-block:: default

    light = gum.LabelizedVariable("Light", "quality of light", 0)
    moisture = gum.LabelizedVariable("Moisture", "quantity of moisture", 0)
    height = gum.DiscretizedVariable("Height", "plant growth")








Both variables **Light** and **Moisture** are categorical variables whith the following attributes:  

 - **Light** has 2 attributes: **Dim** which refers to the darkness and **Bright** which refers to plain light situations,
 - **Moisture** has 2 attributes: **Dry** which refers to dry air situations and **Wet** which refers to wet air situations.

**Height** is a continuous variable which has to be discretized for the Bayes Net use.

# Create labels and ticks

light has 2 attributes : Dim and Bright


.. code-block:: default

    light.addLabel("Dim")
    light.addLabel("Bright")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (gum::LabelizedVariable@0x555a17d6a1e0) Light<Dim,Bright>



moisture has 2 attributes : Dry and Wet


.. code-block:: default

    moisture.addLabel("Dry")
    moisture.addLabel("Wet")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (gum::LabelizedVariable@0x555a17ede490) Moisture<Dry,Wet>



height is a discretized variable


.. code-block:: default

    [height.addTick(i) for i in range(0, 150, 10)]
    height.domainSize()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    14



Furthermore, there are several influence links : **Light** on **Moisture**, **(Light,Moisture)** on **Height**.

# Create the net


.. code-block:: default

    bn = gum.BayesNet("Plant Growth")








Add variables


.. code-block:: default

    indexLight    = bn.add(light)
    indexMoisture = bn.add(moisture)
    indexHeight   = bn.add(height)








Add arcs


.. code-block:: default

    bn.addArc(indexLight, indexMoisture)
    bn.addArc(indexLight, indexHeight)
    bn.addArc(indexMoisture, indexHeight)
    bn





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (gum::BayesNet<double>@0x555a17d2adc0) BN{nodes: 3, arcs: 3, domainSize: 56, dim: 62}



The next step is the quantification of the Bayes net.

The variable $Light$ is quantified as follows:

 - **Light=Dim** with a probability of 0.25,
 - **Light=Bright** with a probability of 0.75.

Create conditional probability tables
light conditional probability table


.. code-block:: default

    bn.cpt(indexLight)[:]= [0.25, 0.75]
    bn.cpt(indexLight)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (gum::Potential<double>@0x555a17a26440) <Light:Dim> :: 0.25 /<Light:Bright> :: 0.75



The influence of $Light$ on $Moisture$ is modelized by:
 - when $Light=Dim$ then  $Moisture=Dry$ with a probability of 0.2 and  $Moisture=Wet$ with a probability of 0.8,
 - when $Light=Bright$ then  $Moisture=Dry$ with a probability of 0.6 and  $Moisture=Wet$ with a probability of 0.4.

moisture conditional probability table
We show the antecedents of moisture with the order in which they were declared


.. code-block:: default

    bn.cpt(indexMoisture)[{'Light' : 'Dim'}] = [0.2, 0.8]
    bn.cpt(indexMoisture)[{'Light' : 'Bright'}] = [0.6, 0.4]
    bn.cpt(indexMoisture)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (gum::Potential<double>@0x555a17c1ceb0) <Moisture:Dry|Light:Dim> :: 0.2 /<Moisture:Wet|Light:Dim> :: 0.8 /<Moisture:Dry|Light:Bright> :: 0.6 /<Moisture:Wet|Light:Bright> :: 0.4



The influence of **(Light, Moisture)** on **Height** is modelized by:
 - when **Light=Dim** and **Moisture=Dry** then **Height** follows a **Uniform(min=0, max=20)** distribution,
 - when **Light=Dim** and **Moisture=Wet** then **Height** follows a **Triangular(min=15, mod=30, max=50)** distribution,
 - when **Light=Bright** and $Moisture=Dry$ then $Height$ follows a **Triangular(min=0, mod=15, max=30)** distribution,
 - when **Light=Bright** and $Moisture=Wet$ then $Height$ follows a **Normal(\mu=90, \sigma=10)** distribution.

height has a conditional probability table
We give here its conditional distributions

distribution when Dim and Dry


.. code-block:: default

    heightWhenDimAndDry = ot.Uniform(0.0, 20.0)
    # distribution when Dim and Wet
    heightWhenDimAndWet = ot.Triangular(15.0, 30.0, 50.0)
    # distribution when Bright and Dry
    heightWhenBrightAndDry = ot.Triangular(0.0, 15.0, 30.0)
    # distribution when Bright and Wet
    heightWhenBrightAndWet = ot.Normal(90.0, 10.0)








We have to enter some OT distributions whithin aGrUM conditional probability tables
We show the antecedents of height with the order in which they were declared
The new class Utils from otagrum is able to marry OT distributions and Agrum conditional probability tables


.. code-block:: default

    bn.cpt(indexHeight)[{'Light': 'Dim', 'Moisture': 'Dry'}]   = otagrum.Utils.Discretize(heightWhenDimAndDry, height)[:]
    bn.cpt(indexHeight)[{'Light': 'Bright', 'Moisture': 'Dry'}] = otagrum.Utils.Discretize(heightWhenBrightAndDry, height)[:]
    bn.cpt(indexHeight)[{'Light': 'Dim', 'Moisture': 'Wet'}]    = otagrum.Utils.Discretize(heightWhenDimAndWet, height)[:]
    bn.cpt(indexHeight)[{'Light': 'Bright', 'Moisture': 'Wet'}] = otagrum.Utils.Discretize(heightWhenBrightAndWet, height)[:]
    bn.cpt(indexHeight)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (gum::Potential<double>@0x555a1739d160) <Height:[0;10[|Light:Dim|Moisture:Dry> :: 0.5 /<Height:[10;20[|Light:Dim|Moisture:Dry> :: 0.5 /<Height:[20;30[|Light:Dim|Moisture:Dry> :: 0 /<Height:[30;40[|Light:Dim|Moisture:Dry> :: 0 /<Height:[40;50[|Light:Dim|Moisture:Dry> :: 0 /<Height:[50;60[|Light:Dim|Moisture:Dry> :: 0 /<Height:[60;70[|Light:Dim|Moisture:Dry> :: 0 /<Height:[70;80[|Light:Dim|Moisture:Dry> :: 0 /<Height:[80;90[|Light:Dim|Moisture:Dry> :: 0 /<Height:[90;100[|Light:Dim|Moisture:Dry> :: 0 /<Height:[100;110[|Light:Dim|Moisture:Dry> :: 0 /<Height:[110;120[|Light:Dim|Moisture:Dry> :: 0 /<Height:[120;130[|Light:Dim|Moisture:Dry> :: 0 /<Height:[130;140]|Light:Dim|Moisture:Dry> :: 0 /<Height:[0;10[|Light:Bright|Moisture:Dry> :: 0.222222 /<Height:[10;20[|Light:Bright|Moisture:Dry> :: 0.555556 /<Height:[20;30[|Light:Bright|Moisture:Dry> :: 0.222222 /<Height:[30;40[|Light:Bright|Moisture:Dry> :: 0 /<Height:[40;50[|Light:Bright|Moisture:Dry> :: 0 /<Height:[50;60[|Light:Bright|Moisture:Dry> :: 0 /<Height:[60;70[|Light:Bright|Moisture:Dry> :: 0 /<Height:[70;80[|Light:Bright|Moisture:Dry> :: 0 /<Height:[80;90[|Light:Bright|Moisture:Dry> :: 0 /<Height:[90;100[|Light:Bright|Moisture:Dry> :: 0 /<Height:[100;110[|Light:Bright|Moisture:Dry> :: 0 /<Height:[110;120[|Light:Bright|Moisture:Dry> :: 0 /<Height:[120;130[|Light:Bright|Moisture:Dry> :: 0 /<Height:[130;140]|Light:Bright|Moisture:Dry> :: 0 /<Height:[0;10[|Light:Dim|Moisture:Wet> :: 0 /<Height:[10;20[|Light:Dim|Moisture:Wet> :: 0.047619 /<Height:[20;30[|Light:Dim|Moisture:Wet> :: 0.380952 /<Height:[30;40[|Light:Dim|Moisture:Wet> :: 0.428571 /<Height:[40;50[|Light:Dim|Moisture:Wet> :: 0.142857 /<Height:[50;60[|Light:Dim|Moisture:Wet> :: 0 /<Height:[60;70[|Light:Dim|Moisture:Wet> :: 0 /<Height:[70;80[|Light:Dim|Moisture:Wet> :: 0 /<Height:[80;90[|Light:Dim|Moisture:Wet> :: 0 /<Height:[90;100[|Light:Dim|Moisture:Wet> :: 0 /<Height:[100;110[|Light:Dim|Moisture:Wet> :: 0 /<Height:[110;120[|Light:Dim|Moisture:Wet> :: 0 /<Height:[120;130[|Light:Dim|Moisture:Wet> :: 0 /<Height:[130;140]|Light:Dim|Moisture:Wet> :: 0 /<Height:[0;10[|Light:Bright|Moisture:Wet> :: 6.21983e-16 /<Height:[10;20[|Light:Bright|Moisture:Wet> :: 1.27919e-12 /<Height:[20;30[|Light:Bright|Moisture:Wet> :: 9.85308e-10 /<Height:[30;40[|Light:Bright|Moisture:Wet> :: 2.85665e-07 /<Height:[40;50[|Light:Bright|Moisture:Wet> :: 3.13846e-05 /<Height:[50;60[|Light:Bright|Moisture:Wet> :: 0.00131823 /<Height:[60;70[|Light:Bright|Moisture:Wet> :: 0.0214002 /<Height:[70;80[|Light:Bright|Moisture:Wet> :: 0.135905 /<Height:[80;90[|Light:Bright|Moisture:Wet> :: 0.341345 /<Height:[90;100[|Light:Bright|Moisture:Wet> :: 0.341345 /<Height:[100;110[|Light:Bright|Moisture:Wet> :: 0.135905 /<Height:[110;120[|Light:Bright|Moisture:Wet> :: 0.0214002 /<Height:[120;130[|Light:Bright|Moisture:Wet> :: 0.00131823 /<Height:[130;140]|Light:Bright|Moisture:Wet> :: 3.13846e-05



We can study the plant growth variability in different situations like:

 - I put my plant on my balcony; in that situation, I set none evidence inside the Bayes net.
 - I put my plant in a  place where it is dark all time (in my cellar?); in that situation, I set one evidence inside the Bayes net: $Light=Dim$.
 - I put my plant in a  place where it is moist all time (in my bathroom?); in that situation, I set one evidence inside the Bayes net: $Moisture=Wet$.

Variability of the plant growth on my balcony


.. code-block:: default

    ie = gum.LazyPropagation(bn)
    h_dist = otagrum.Utils.FromMarginal(ie.posterior("Height"))
    print("Probability (height > 40cm) = ", 1.0 - h_dist.computeCDF(40.0))
    View(h_dist.drawPDF())




.. image:: /auto_examples/images/sphx_glr_plot_plant_growth_001.png
    :alt: Height PDF
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Probability (height > 40cm) =  0.32857134257593235

    <openturns.viewer.View object at 0x7fd3982e3e80>



Variability of the plant growth in my cellar


.. code-block:: default

    ie = gum.LazyPropagation(bn)
    ie.setEvidence({'Light':'Dim'})









.. code-block:: default

    h_dist_dim = otagrum.Utils.FromMarginal(ie.posterior("Height"))
    h_dist_dim.setDescription(['Height|Light=Dim'])
    print("Probability (height > 40cm)|Light=Dim = ", 1.0 - h_dist_dim.computeCDF(40.0))
    View(h_dist_dim.drawPDF())





.. image:: /auto_examples/images/sphx_glr_plot_plant_growth_002.png
    :alt: Height|Light=Dim PDF
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Probability (height > 40cm)|Light=Dim =  0.11428571428571421

    <openturns.viewer.View object at 0x7fd396823e20>



Variability of the plant growth when the atmosphere is very wet


.. code-block:: default

    ie = gum.LazyPropagation(bn)
    ie.setEvidence({'Moisture':'Wet'})









.. code-block:: default

    h_dist_wet = otagrum.Utils.FromMarginal(ie.posterior("Height"))
    h_dist_wet.setDescription(['Height|Moisture=Wet'])
    print("Probability (height > 40cm)|Moisture=Wet = ", 1.0 - h_dist_wet.computeCDF(40.0))
    View(h_dist_wet.drawPDF())





.. image:: /auto_examples/images/sphx_glr_plot_plant_growth_003.png
    :alt: Height|Moisture=Wet PDF
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Probability (height > 40cm)|Moisture=Wet =  0.6571426851518647

    <openturns.viewer.View object at 0x7fd3967f7910>



Get the distribution of the variable "Light"


.. code-block:: default

    l_dist_wet = otagrum.Utils.FromPotential(ie.posterior("Light"))
    print(l_dist_wet)
    View(l_dist_wet.drawPDF())




.. image:: /auto_examples/images/sphx_glr_plot_plant_growth_004.png
    :alt: Light PDF
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    UserDefined({x = [0], p = 0.4}, {x = [1], p = 0.6})

    <openturns.viewer.View object at 0x7fd39677eb80>



Get the joint distribution [H, M]


.. code-block:: default

    ie = gum.LazyPropagation(bn)
    ie.addJointTarget({"Height", "Moisture"})
    ie.makeInference()
    h_m_dist = otagrum.Utils.FromPotential(ie.jointPosterior({"Height", "Moisture"}))
    print(h_m_dist.getDescription())
    print(h_m_dist.getMarginal(0))
    plt.show()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [Moisture,Height]
    UserDefined({x = [0], p = 0.5}, {x = [1], p = 0.5})





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.378 seconds)


.. _sphx_glr_download_auto_examples_plot_plant_growth.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_plant_growth.py <plot_plant_growth.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_plant_growth.ipynb <plot_plant_growth.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
