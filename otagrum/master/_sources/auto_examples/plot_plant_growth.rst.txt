
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_plant_growth.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_plant_growth.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_plant_growth.py:


Plant growth
============

.. GENERATED FROM PYTHON SOURCE LINES 7-44

The study presented in that section focuses on the growth of particular plant
(not specified).
The objective is to predict which height will be reached by the plant ...
for example in order to evaluate the risk that the plant might require a
greater jag on the balcony ...

The problem is that we have no data on the height usually reached by this
kind of plant, which prohibits any use of statistics tools ...
So ... what ? Yet we have the following information:

   - we know the influence of the quality of the light and the influence of
     the air moisture rate on the plant growth,
   - we can quantify the quality of the light we have at home and also the
     air moisture rate where the plant lives.

.... so we can model the plant growth thanks to a Bayes net and then have
access to the variability of its final height!

Let us imagine (for the example purpose):

 - Some meteorological data (tropical place?):

   - the balcony is in plain light 3 times out of 4,
   - in the darkness, the air is moist 8 times out of 10,
   - in plain light, the air is dry 6 times out of 10.

 - Some remembrance of biology trainings:

   - in plain light, if the air is moist, the plant is very happy: it grows
     90cm on average with a variation of :math:`\pm` 10 cm. If the air is too dry,
     it will not grow more than 30 cm but we reasonably can expect about a
     15 cm growth.
   - in the darkness, if the air is too dry, the plant suffers: it will not
     grow more than 20 cm and might die as well! If the air is moist, it
     will  usually grow about 30 cm, at least 15cm but not more than 50 cm.



.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: Python

    import openturns as ot
    import otagrum
    import pyAgrum as gum
    from openturns.viewer import View
    from matplotlib import pylab as plt








.. GENERATED FROM PYTHON SOURCE LINES 53-68

.. code-block:: Python



    def showPotential(pot):
        try:
            # fails outside notebook
            import pyAgrum.lib.notebook as gnb

            gnb.showPotential(pot)
        except ImportError:
            pass


    # We have to build the Bayes Net now. There are 3 variables that will be named:
    # **Light**, **Moisture** and **Height**.








.. GENERATED FROM PYTHON SOURCE LINES 69-70

Create variables

.. GENERATED FROM PYTHON SOURCE LINES 72-76

.. code-block:: Python

    light = gum.LabelizedVariable("Light", "quality of light", 0)
    moisture = gum.LabelizedVariable("Moisture", "quantity of moisture", 0)
    height = gum.DiscretizedVariable("Height", "plant growth")








.. GENERATED FROM PYTHON SOURCE LINES 77-86

Both variables **Light** and **Moisture** are categorical variables with
the following attributes:

 - **Light** has 2 attributes: **Dim** which refers to the darkness and
   **Bright** which refers to plain light situations,
 - **Moisture** has 2 attributes: **Dry** which refers to dry air situations
   and **Wet** which refers to wet air situations.

**Height** is a continuous variable which has to be discretized for the Bayes Net use.

.. GENERATED FROM PYTHON SOURCE LINES 88-89

Create labels and ticks

.. GENERATED FROM PYTHON SOURCE LINES 91-92

light has 2 attributes : Dim and Bright

.. GENERATED FROM PYTHON SOURCE LINES 94-97

.. code-block:: Python

    light.addLabel("Dim")
    light.addLabel("Bright")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (pyAgrum.LabelizedVariable@0x56046c347520) Light:Labelized({Dim|Bright})



.. GENERATED FROM PYTHON SOURCE LINES 98-99

moisture has 2 attributes : Dry and Wet

.. GENERATED FROM PYTHON SOURCE LINES 101-104

.. code-block:: Python

    moisture.addLabel("Dry")
    moisture.addLabel("Wet")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (pyAgrum.LabelizedVariable@0x56046c264e70) Moisture:Labelized({Dry|Wet})



.. GENERATED FROM PYTHON SOURCE LINES 105-106

height is a discretized variable

.. GENERATED FROM PYTHON SOURCE LINES 108-111

.. code-block:: Python

    [height.addTick(i) for i in range(0, 150, 10)]
    height.domainSize()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    14



.. GENERATED FROM PYTHON SOURCE LINES 112-114

Furthermore, there are several influence links:
**Light** on **Moisture**, **(Light,Moisture)** on **Height**.

.. GENERATED FROM PYTHON SOURCE LINES 116-117

Create the net

.. GENERATED FROM PYTHON SOURCE LINES 117-119

.. code-block:: Python

    bn = gum.BayesNet("Plant Growth")








.. GENERATED FROM PYTHON SOURCE LINES 120-121

Add variables

.. GENERATED FROM PYTHON SOURCE LINES 123-127

.. code-block:: Python

    indexLight = bn.add(light)
    indexMoisture = bn.add(moisture)
    indexHeight = bn.add(height)








.. GENERATED FROM PYTHON SOURCE LINES 128-129

Add arcs

.. GENERATED FROM PYTHON SOURCE LINES 131-136

.. code-block:: Python

    bn.addArc(indexLight, indexMoisture)
    bn.addArc(indexLight, indexHeight)
    bn.addArc(indexMoisture, indexHeight)
    bn





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (pyAgrum.BayesNet<double>@0x56046e794520) BN{nodes: 3, arcs: 3, domainSize: 56, dim: 55, mem: 496o}



.. GENERATED FROM PYTHON SOURCE LINES 137-143

The next step is the quantification of the Bayes net.

The variable **Light** is quantified as follows:

 - **Light=Dim** with a probability of 0.25,
 - **Light=Bright** with a probability of 0.75.

.. GENERATED FROM PYTHON SOURCE LINES 145-147

Create conditional probability tables
light conditional probability table

.. GENERATED FROM PYTHON SOURCE LINES 149-152

.. code-block:: Python

    bn.cpt(indexLight)[:] = [0.25, 0.75]
    showPotential(bn.cpt(indexLight))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/lib/python3.11/site-packages/pyAgrum/lib/notebook.py:1713: UserWarning: 
      ** pyAgrum.lib.notebook has to be imported from an IPython's instance (mainly notebook).
  
      warnings.warn("""
    <IPython.core.display.HTML object>




.. GENERATED FROM PYTHON SOURCE LINES 153-158

The influence of **Light** on **Moisture** is modelized by:
 - when **Light=Dim** then **Moisture=Dry** with a probability of 0.2
   and *Moisture=Wet* with a probability of 0.8,
 - when **Light=Bright** then **Moisture=Dry** with a probability of 0.6
   and *Moisture=Wet* with a probability of 0.4.

.. GENERATED FROM PYTHON SOURCE LINES 160-162

moisture conditional probability table
We show the antecedents of moisture with the order in which they were declared

.. GENERATED FROM PYTHON SOURCE LINES 164-168

.. code-block:: Python

    bn.cpt(indexMoisture)[{"Light": "Dim"}] = [0.2, 0.8]
    bn.cpt(indexMoisture)[{"Light": "Bright"}] = [0.6, 0.4]
    showPotential(bn.cpt(indexMoisture))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <IPython.core.display.HTML object>




.. GENERATED FROM PYTHON SOURCE LINES 169-179

The influence of **(Light, Moisture)** on **Height** is modelized by:

 - when **Light=Dim** and **Moisture=Dry** then **Height** follows
   a **Uniform(min=0, max=20)** distribution,
 - when **Light=Dim** and **Moisture=Wet** then **Height** follows
   a **Triangular(min=15, mod=30, max=50)** distribution,
 - when **Light=Bright** and **Moisture=Dry* then **Height** follows
   a **Triangular(min=0, mod=15, max=30)** distribution,
 - when **Light=Bright** and **Moisture=Wet** then **Height** follows
   a **Normal(\mu=90, \sigma=10)** distribution.

.. GENERATED FROM PYTHON SOURCE LINES 181-183

height has a conditional probability table
We give here its conditional distributions

.. GENERATED FROM PYTHON SOURCE LINES 185-186

distribution when Dim and Dry

.. GENERATED FROM PYTHON SOURCE LINES 186-194

.. code-block:: Python

    heightWhenDimAndDry = ot.Uniform(0.0, 20.0)
    # distribution when Dim and Wet
    heightWhenDimAndWet = ot.Triangular(15.0, 30.0, 50.0)
    # distribution when Bright and Dry
    heightWhenBrightAndDry = ot.Triangular(0.0, 15.0, 30.0)
    # distribution when Bright and Wet
    heightWhenBrightAndWet = ot.Normal(90.0, 10.0)








.. GENERATED FROM PYTHON SOURCE LINES 195-199

We have to enter some OT distributions whithin aGrUM conditional probability tables
We show the antecedents of height with the order in which they were declared
The new class Utils from otagrum is able to marry OT distributions and Agrum
conditional probability tables

.. GENERATED FROM PYTHON SOURCE LINES 201-215

.. code-block:: Python

    bn.cpt(indexHeight)[{"Light": "Dim", "Moisture": "Dry"}] = otagrum.Utils.Discretize(
        heightWhenDimAndDry, height
    )[:]
    bn.cpt(indexHeight)[{"Light": "Bright", "Moisture": "Dry"}] = otagrum.Utils.Discretize(
        heightWhenBrightAndDry, height
    )[:]
    bn.cpt(indexHeight)[{"Light": "Dim", "Moisture": "Wet"}] = otagrum.Utils.Discretize(
        heightWhenDimAndWet, height
    )[:]
    bn.cpt(indexHeight)[{"Light": "Bright", "Moisture": "Wet"}] = otagrum.Utils.Discretize(
        heightWhenBrightAndWet, height
    )[:]
    showPotential(bn.cpt(indexHeight))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <IPython.core.display.HTML object>




.. GENERATED FROM PYTHON SOURCE LINES 216-224

We can study the plant growth variability in different situations like:

 - I put my plant on my balcony; in that situation, I set none evidence
   inside the Bayes net.
 - I put my plant in a  place where it is dark all time (in my cellar?);
   in that situation, I set one evidence inside the Bayes net: **Light=Dim**.
 - I put my plant in a  place where it is moist all time (in my bathroom?);
   in that situation, I set one evidence inside the Bayes net: **Moisture=Wet**.

.. GENERATED FROM PYTHON SOURCE LINES 226-227

Variability of the plant growth on my balcony

.. GENERATED FROM PYTHON SOURCE LINES 229-234

.. code-block:: Python

    ie = gum.LazyPropagation(bn)
    h_dist = otagrum.Utils.FromMarginal(ie.posterior("Height"))
    print("Probability (height > 40cm) = ", 1.0 - h_dist.computeCDF(40.0))
    View(h_dist.drawPDF())




.. image-sg:: /auto_examples/images/sphx_glr_plot_plant_growth_001.png
   :alt: Height PDF
   :srcset: /auto_examples/images/sphx_glr_plot_plant_growth_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Probability (height > 40cm) =  0.32857134257593257

    <openturns.viewer.View object at 0x7f69ca6dbdd0>



.. GENERATED FROM PYTHON SOURCE LINES 235-236

Variability of the plant growth in my cellar

.. GENERATED FROM PYTHON SOURCE LINES 238-241

.. code-block:: Python

    ie = gum.LazyPropagation(bn)
    ie.setEvidence({"Light": "Dim"})








.. GENERATED FROM PYTHON SOURCE LINES 242-248

.. code-block:: Python

    h_dist_dim = otagrum.Utils.FromMarginal(ie.posterior("Height"))
    h_dist_dim.setDescription(["Height|Light=Dim"])
    print("Probability (height > 40cm)|Light=Dim = ", 1.0 - h_dist_dim.computeCDF(40.0))
    View(h_dist_dim.drawPDF())





.. image-sg:: /auto_examples/images/sphx_glr_plot_plant_growth_002.png
   :alt: Height|Light=Dim PDF
   :srcset: /auto_examples/images/sphx_glr_plot_plant_growth_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Probability (height > 40cm)|Light=Dim =  0.11428571428571432

    <openturns.viewer.View object at 0x7f69c3399a10>



.. GENERATED FROM PYTHON SOURCE LINES 249-250

Variability of the plant growth when the atmosphere is very wet

.. GENERATED FROM PYTHON SOURCE LINES 252-255

.. code-block:: Python

    ie = gum.LazyPropagation(bn)
    ie.setEvidence({"Moisture": "Wet"})








.. GENERATED FROM PYTHON SOURCE LINES 256-262

.. code-block:: Python

    h_dist_wet = otagrum.Utils.FromMarginal(ie.posterior("Height"))
    h_dist_wet.setDescription(["Height|Moisture=Wet"])
    print("Probability (height > 40cm)|Moisture=Wet = ", 1.0 - h_dist_wet.computeCDF(40.0))
    View(h_dist_wet.drawPDF())





.. image-sg:: /auto_examples/images/sphx_glr_plot_plant_growth_003.png
   :alt: Height|Moisture=Wet PDF
   :srcset: /auto_examples/images/sphx_glr_plot_plant_growth_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Probability (height > 40cm)|Moisture=Wet =  0.6571426851518651

    <openturns.viewer.View object at 0x7f69cc39c050>



.. GENERATED FROM PYTHON SOURCE LINES 263-264

Get the distribution of the variable "Light"

.. GENERATED FROM PYTHON SOURCE LINES 266-270

.. code-block:: Python

    l_dist_wet = otagrum.Utils.FromPotential(ie.posterior("Light"))
    print(l_dist_wet)
    View(l_dist_wet.drawPDF())




.. image-sg:: /auto_examples/images/sphx_glr_plot_plant_growth_004.png
   :alt: Light PDF
   :srcset: /auto_examples/images/sphx_glr_plot_plant_growth_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    UserDefined({x = [0], p = 0.4}, {x = [1], p = 0.6})

    <openturns.viewer.View object at 0x7f69cb9a7ed0>



.. GENERATED FROM PYTHON SOURCE LINES 271-272

Get the joint distribution [H, M]

.. GENERATED FROM PYTHON SOURCE LINES 272-279

.. code-block:: Python

    ie = gum.LazyPropagation(bn)
    ie.addJointTarget({"Height", "Moisture"})
    ie.makeInference()
    h_m_dist = otagrum.Utils.FromPotential(ie.jointPosterior({"Height", "Moisture"}))
    print(h_m_dist.getDescription())
    print(h_m_dist.getMarginal(0))
    plt.show()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [Moisture,Height]
    UserDefined({x = [0], p = 0.5}, {x = [1], p = 0.5})





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.437 seconds)


.. _sphx_glr_download_auto_examples_plot_plant_growth.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plant_growth.ipynb <plot_plant_growth.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plant_growth.py <plot_plant_growth.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
