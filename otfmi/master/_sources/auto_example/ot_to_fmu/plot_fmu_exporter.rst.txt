
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/ot_to_fmu/plot_fmu_exporter.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_example_ot_to_fmu_plot_fmu_exporter.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_ot_to_fmu_plot_fmu_exporter.py:


Export a function as FMU
========================

.. GENERATED FROM PYTHON SOURCE LINES 7-17

``otfmi.FunctionExporter`` enables to export OpenTURNS functions as FMUs. The
main interest of this class is to use OpenTURNS metamodels in a simulation environment.

.. warning::
   **This functionality is experimental**.

Currently, the inclusion of a metamodel in
`OpenModelica GUI <https://openmodelica.org/?id=78:omconnectioneditoromedit&catid=10:main-category>`_
has been performed once (see
`this paper <https://www.researchgate.net/publication/354810878_Analysis_and_reduction_of_models_using_Persalys>`_).

.. GENERATED FROM PYTHON SOURCE LINES 19-27

------------

FMU generation
++++++++++++++

First, we create the OpenTURNS function to export as FMU.
This example being solely a demonstrator, we consider a very simple
exponentiel function.

.. GENERATED FROM PYTHON SOURCE LINES 27-37

.. code-block:: default


    import openturns as ot
    import otfmi
    import tempfile
    from os.path import join

    func = ot.SymbolicFunction("x", "exp(x)")
    inputPoint = ot.Point([2])
    print(func(inputPoint))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [7.38906]




.. GENERATED FROM PYTHON SOURCE LINES 38-39

We create the FMU constructor and the folder in which save the FMU:

.. GENERATED FROM PYTHON SOURCE LINES 39-43

.. code-block:: default

    fmuExporter = otfmi.FunctionExporter(func)
    fmu_path = join(tempfile.mkdtemp(), "myExponential.fmu")
    print(fmu_path)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /tmp/tmpcyg9jyxl/myExponential.fmu




.. GENERATED FROM PYTHON SOURCE LINES 44-46

We export the OpenTURNS function as a Model Exchange FMU. Another export
possiblity is the CoSimulation FMU (embeds a solver).

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default


    fmuExporter.export_fmu(fmu_path, fmuType="me")








.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. note::
  The export requires `CMake <https://cmake.org/>`_, a C compiler, and the OpenModelica compiler
  `OMC <https://www.openmodelica.org/?id=51:open-modelica-compiler-omccecatid=10:main-category>`_.

.. GENERATED FROM PYTHON SOURCE LINES 55-96

Simple as it looks, this function actually does the following :

- write a C-wrapper for the OpenTURNS function,
- write a Modelica model calling the C-wrapper as `External <shorturl.at/fhCU2>`_ function,
- export the Modelica model as FMU using OpenModelica compiler.

.. note::
   To retrieve only the Modelica model, see :doc:`here <plot_model_exporter>`.

.. warning::
   The path to the C-wrapper is hard-coded in the model & in the FMU.

----------------------

FMU validation
++++++++++++++

We import the in OpenModelica GUI. We connect the wrapper to an input sine signal
(*Modelica.Blocks.Sources.Sine*) and to an output block (*Modelica.Blocks.Interfaces.RealOutput*):

.. image:: /_static/TestMyExponentialFMU.png
   :width: 132px
   :height: 126px
   :scale: 100 %
   :alt: alternate text
   :align: center

We simulate the model on 1 second, with 50 time steps. We can verify that `y`
output corresponds to the exponential of the sine signal.

.. image:: /_static/show_output.png
   :width: 132px
   :height: 126px
   :scale: 100 %
   :alt: alternate text
   :align: center

.. warning::
   Compared to native Modelica functions, the included OpenTURNS function is
   slow. Using the FMU, 11 seconds of simulation were required for 50 time
   steps (i.e. 50 function calls).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.130 seconds)


.. _sphx_glr_download_auto_example_ot_to_fmu_plot_fmu_exporter.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_fmu_exporter.py <plot_fmu_exporter.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_fmu_exporter.ipynb <plot_fmu_exporter.ipynb>`
