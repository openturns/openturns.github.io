
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/dynamic/plot_dyn_basics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_example_dynamic_plot_dyn_basics.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_dynamic_plot_dyn_basics.py:


FMUPointToFieldFunction basics
==============================

.. GENERATED FROM PYTHON SOURCE LINES 7-12

``otfmi.FMUPointToFieldFunction`` wraps the FMU into an
:py:class:`openturns.PointToFieldFunction` object.
This kind of function accepts :py:class:`openturns.Point` or
:py:class:`openturns.Sample` as inputs, and outputs a
:py:class:`openturns.Sample` or a set of :py:class:`openturns.Field`.

.. GENERATED FROM PYTHON SOURCE LINES 14-15

------------

.. GENERATED FROM PYTHON SOURCE LINES 17-20

First, retrieve the path to *epid.fmu*.
Recall the deviation model is dynamic, i.e. its output evolves over
time.

.. GENERATED FROM PYTHON SOURCE LINES 20-28

.. code-block:: Python

    import openturns as ot
    import otfmi.example.utility
    import matplotlib.pyplot as plt
    import openturns.viewer as viewer


    path_fmu = otfmi.example.utility.get_path_fmu("epid")








.. GENERATED FROM PYTHON SOURCE LINES 29-31

Define the time grid for the FMU's output. The last value of the time grid,
here 10., will define the FMU stop time for simulation.

.. GENERATED FROM PYTHON SOURCE LINES 31-36

.. code-block:: Python


    mesh = ot.RegularGrid(0.0, 0.1, 2000)
    meshSample = mesh.getVertices()
    print(meshSample)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

           [ t     ]
       0 : [   0   ]
       1 : [   0.1 ]
       2 : [   0.2 ]
    ...
    1997 : [ 199.7 ]
    1998 : [ 199.8 ]
    1999 : [ 199.9 ]




.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. note::
   The FMU solver uses its own time grid for simulation.
   The FMU output is then interpolated on the user-provided time grid.

.. GENERATED FROM PYTHON SOURCE LINES 42-43

Wrap the FMU in an :py:class:`openturns.PointToFieldFunction` object:

.. GENERATED FROM PYTHON SOURCE LINES 43-54

.. code-block:: Python


    function = otfmi.FMUPointToFieldFunction(
        mesh,
        path_fmu,
        inputs_fmu=["infection_rate"],
        outputs_fmu=["infected"],
        start_time=0.0,
        final_time=200.0,
    )
    print(type(function))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'openturns.func.PointToFieldFunction'>




.. GENERATED FROM PYTHON SOURCE LINES 55-59

.. note::
   The start and final times must define an interval comprising the mesh.
   Setting manually the start and final times is recommended to avoid
   uncontrolled simulation duration.

.. GENERATED FROM PYTHON SOURCE LINES 61-63

Simulate the function on an input :py:class:`openturns.Point` yields an output
:py:class:`openturns.Sample`, corresponding to the output evolution over time:

.. GENERATED FROM PYTHON SOURCE LINES 63-72

.. code-block:: Python


    inputPoint = ot.Point([2.0])
    outputSample = function(inputPoint)

    plt.xlabel("FMU simulation time (s)")
    plt.ylabel("Number of Infected")
    plt.plot(meshSample, outputSample)
    plt.show()




.. image-sg:: /auto_example/dynamic/images/sphx_glr_plot_dyn_basics_001.png
   :alt: plot dyn basics
   :srcset: /auto_example/dynamic/images/sphx_glr_plot_dyn_basics_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-75

Simulate the function on a input :py:class:`openturns.Sample` yields a set of
fields called :py:class:`openturns.ProcessSample`:

.. GENERATED FROM PYTHON SOURCE LINES 75-80

.. code-block:: Python


    inputSample = ot.Sample([[2.0], [2.25], [2.5]])
    outputProcessSample = function(inputSample)
    print(outputProcessSample)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [field 0:
           [ t             infected      ]
       0 : [   0             1           ]
       1 : [   0.1           1.14974     ]
       2 : [   0.2           1.29948     ]
    ...
    1997 : [ 199.7           1.46173e-42 ]
    1998 : [ 199.8           1.38833e-42 ]
    1999 : [ 199.9           1.31492e-42 ]
    field 1:
           [ t             infected      ]
       0 : [   0             1           ]
       1 : [   0.1           1.17471     ]
       2 : [   0.2           1.34941     ]
    ...
    1997 : [ 199.7           7.73327e-44 ]
    1998 : [ 199.8           7.33573e-44 ]
    1999 : [ 199.9           6.9382e-44  ]
    field 2:
           [ t             infected      ]
       0 : [   0             1           ]
       1 : [   0.1           1.19967     ]
       2 : [   0.2           1.39934     ]
    ...
    1997 : [ 199.7           1.38086e-44 ]
    1998 : [ 199.8           1.30896e-44 ]
    1999 : [ 199.9           1.23707e-44 ]]




.. GENERATED FROM PYTHON SOURCE LINES 81-83

Visualize the time evolution of the ``infected`` over time, depending on the
`Ã¬nfection_rate`` value:

.. GENERATED FROM PYTHON SOURCE LINES 83-91

.. code-block:: Python

    gridLayout = outputProcessSample.draw()
    graph = gridLayout.getGraph(0, 0)
    graph.setTitle("")
    graph.setXTitle("FMU simulation time (s)")
    graph.setYTitle("Number of infected")
    graph.setLegends([str(line[0]) for line in inputSample])
    view = viewer.View(graph, legend_kw={"title": "infection rate"})
    view.ShowAll()



.. image-sg:: /auto_example/dynamic/images/sphx_glr_plot_dyn_basics_002.png
   :alt: plot dyn basics
   :srcset: /auto_example/dynamic/images/sphx_glr_plot_dyn_basics_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.244 seconds)


.. _sphx_glr_download_auto_example_dynamic_plot_dyn_basics.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_dyn_basics.ipynb <plot_dyn_basics.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_dyn_basics.py <plot_dyn_basics.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_dyn_basics.zip <plot_dyn_basics.zip>`
