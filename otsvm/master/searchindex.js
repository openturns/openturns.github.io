Search.setIndex({"docnames": ["developer_guide/architecture/architecture", "developer_guide/developer_guide", "developer_guide/validation/validation", "examples/examples", "index", "user_manual/_generated/otsvm.ExponentialRBF", "user_manual/_generated/otsvm.LibSVMClassification", "user_manual/_generated/otsvm.LibSVMRegression", "user_manual/_generated/otsvm.LinearKernel", "user_manual/_generated/otsvm.NormalRBF", "user_manual/_generated/otsvm.PolynomialKernel", "user_manual/_generated/otsvm.RationalKernel", "user_manual/_generated/otsvm.SigmoidKernel", "user_manual/user_manual"], "filenames": ["developer_guide/architecture/architecture.rst", "developer_guide/developer_guide.rst", "developer_guide/validation/validation.rst", "examples/examples.rst", "index.rst", "user_manual/_generated/otsvm.ExponentialRBF.rst", "user_manual/_generated/otsvm.LibSVMClassification.rst", "user_manual/_generated/otsvm.LibSVMRegression.rst", "user_manual/_generated/otsvm.LinearKernel.rst", "user_manual/_generated/otsvm.NormalRBF.rst", "user_manual/_generated/otsvm.PolynomialKernel.rst", "user_manual/_generated/otsvm.RationalKernel.rst", "user_manual/_generated/otsvm.SigmoidKernel.rst", "user_manual/user_manual.rst"], "titles": ["Architecture considerations", "Developer guide", "Validation", "Examples", "OTSVM documentation", "ExponentialRBF", "LibSVMClassification", "LibSVMRegression", "LinearKernel", "NormalRBF", "PolynomialKernel", "RationalKernel", "SigmoidKernel", "User manual"], "terms": {"sever": 0, "ar": [0, 6, 13], "need": 0, "order": [0, 3], "build": [0, 3, 13], "modul": [0, 4], "openturn": [0, 3], "sphinx": 0, "doc": 0, "option": 0, "thi": [0, 1, 2, 3, 13], "cd": 0, "otsvm": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12], "mkdir": 0, "p": [0, 3, 13], "cmake": 0, "dcmake_install_prefix": 0, "pwd": 0, "instal": 0, "dopenturns_dir": 0, "lib": 0, "here": [0, 3], "i": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13], "global": 0, "class": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13], "diagram": 0, "each": [0, 6, 13], "layer": 0, "The": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13], "goal": 1, "part": 1, "expos": 1, "design": [1, 13], "principl": 1, "govern": 1, "platform": 1, "architectur": 1, "consider": 1, "depend": [1, 13], "compil": 1, "sourc": 1, "code": 1, "structur": 1, "valid": [1, 13], "test": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13], "case": [1, 3, 13], "1": [1, 3, 13], "xxxxxx": 1, "purpos": 2, "exampl": [2, 4, 13], "estim": 2, "risk": 2, "stochast": 2, "variabl": [2, 13], "name": [2, 5, 6, 7, 8, 9, 10, 11, 12], "descript": [2, 3], "distribut": [2, 3], "q": [2, 13], "a1": 2, "normal": [2, 13], "10200": 2, "100": [2, 3], "e": [2, 13], "a2": 2, "3000": 2, "15": [2, 3], "c": [2, 3, 13], "c1": 2, "4000": 2, "60": 2, "independ": 2, "valu": [2, 3, 6, 13], "t": [2, 3, 13], "loss": [2, 13], "rate": 2, "0": [2, 3, 13], "05": 2, "nelec": 2, "refer": 2, "effici": [2, 13], "54": 2, "nth": 2, "8": 2, "primari": [2, 3], "energi": 2, "save": 2, "e_p": 2, "frac": [2, 13], "f": [2, 13], "u": 2, "l": [2, 13], "m": 2, "min": [2, 13], "max": [2, 13], "step": 2, "10033": 2, "10364": 2, "6": 2, "2975": 2, "3024": 2, "99": 2, "3901": 2, "33": 2, "4097": 2, "74": 2, "ep": 2, "10030": 2, "3900": 2, "06035": 2, "10365": 2, "2995": 2, "4100": 2, "05456": 2, "object": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13], "us": [3, 13], "creat": 3, "svm": [3, 4], "algorithm": [3, 13], "metamodel": 3, "enabl": 3, "set": [3, 6, 13], "list": [3, 6], "tradeoff": 3, "factor": 3, "kernel": [3, 4], "paramet": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13], "method": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13], "settradeofffactor": [3, 6, 7], "setkernelparamet": [3, 6, 7], "select": [3, 13], "type": 3, "linear": [3, 4], "polynomi": [3, 13], "sigmoid": 3, "rbf": 3, "comput": [3, 13], "an": [3, 13], "input": [3, 6, 13], "output": 3, "sampl": 3, "experi": 3, "plane": 3, "function": [3, 13], "isoprobabilist": 3, "we": [3, 13], "recommend": 3, "user": 3, "gaussian": [3, 13], "moreov": 3, "import": 3, "understand": 3, "If": [3, 13], "you": 3, "don": 3, "know": 3, "what": 3, "take": [3, 13], "must": 3, "wide": 3, "rang": 3, "10": 3, "5": 3, "3": 3, "13": 3, "usual": 3, "alwai": 3, "converg": 3, "can": [3, 13], "long": 3, "while": [3, 13], "mostli": 3, "have": [3, 13], "lot": 3, "ot": 3, "sobol": 3, "dimens": [3, 6], "meanth": 3, "point": [3, 6, 13], "inputvari": 3, "outputvari": 3, "y": [3, 13], "formula": 3, "covth": 3, "2": [3, 6, 13], "xi": [3, 13], "str": [3, 5, 6, 7, 8, 9, 10, 11, 12], "ab": 3, "4": 3, "model": [3, 13], "randomgener": 3, "setse": 3, "margin": [3, 4], "distributioncollect": 3, "uniform": 3, "composeddistribut": 3, "01": 3, "1000": 3, "001": 3, "first": 3, "problem": [3, 13], "datain": 3, "getsampl": 3, "250": 3, "dataout": 3, "second": 3, "our": 3, "third": 3, "enumer": 3, "normalrbf": 3, "algo": 3, "svmregress": 3, "libsvm": [3, 13], "perform": 3, "run": [3, 6, 7], "stream": 3, "out": 3, "result": 3, "getresult": [3, 7], "get": [3, 13], "residu": 3, "error": [3, 13], "getresidu": 3, "rel": 3, "relativeerror": 3, "getrelativeerror": 3, "myexperi": 3, "montecarloexperi": 3, "algo2": 3, "algo3": 3, "finish": 3, "fourth": 3, "present": [3, 13], "svmresourcemap": 3, "fix": [3, 13], "other": [3, 13], "like": [3, 13], "degre": [3, 13], "constant": 3, "caches": 3, "number": [3, 6, 13], "fold": 3, "epsilon": 3, "default": [3, 5, 6, 7, 8, 9, 10, 11, 12], "hi": 3, "want": [3, 13], "resourcemap": 3, "degreepolynomialkernel": 3, "now": [3, 13], "separ": [3, 13], "data": [3, 13], "o": 3, "csv": 3, "file": 3, "retriev": 3, "from": [3, 13], "path": 3, "abspath": 3, "dirnam": 3, "__file__": 3, "datainout": 3, "importfromcsvfil": 3, "861": 3, "becaus": [3, 13], "b": [3, 13], "int": [3, 5, 6, 7, 8, 9, 10, 11, 12], "cp": 3, "000001": 3, "00001": 3, "0001": 3, "gamma": [3, 13], "libsvmclassif": 3, "setkerneltyp": [3, 6], "print": 3, "accuraci": [3, 13], "getaccuraci": [3, 6], "manual": 4, "introduct": 4, "support": 4, "vector": [4, 6], "machin": 4, "primal": 4, "form": 4, "dual": 4, "soft": 4, "nonlinear": 4, "classif": [4, 6], "regress": 4, "choos": 4, "index": [4, 6], "search": [4, 13], "page": 4, "arg": [5, 6, 7, 8, 9, 10, 11, 12], "getparamet": [5, 8, 9, 10, 11, 12], "getsigma": [5, 9], "partialgradi": [5, 8, 9, 10, 11, 12], "partialhessian": [5, 8, 9, 10, 11, 12], "setparamet": [5, 8, 9, 10, 11, 12], "setsigma": [5, 9], "__init__": [5, 6, 7, 8, 9, 10, 11, 12], "getclassnam": [5, 6, 7, 8, 9, 10, 11, 12], "accessor": [5, 6, 7, 8, 9, 10, 11, 12], "": [5, 6, 7, 8, 9, 10, 11, 12, 13], "return": [5, 6, 7, 8, 9, 10, 11, 12], "class_nam": [5, 6, 7, 8, 9, 10, 11, 12], "__class__": [5, 6, 7, 8, 9, 10, 11, 12], "__name__": [5, 6, 7, 8, 9, 10, 11, 12], "getid": [5, 6, 7, 8, 9, 10, 11, 12], "id": [5, 6, 7, 8, 9, 10, 11, 12], "intern": [5, 6, 7, 8, 9, 10, 11, 12], "uniqu": [5, 6, 7, 8, 9, 10, 11, 12], "identifi": [5, 6, 7, 8, 9, 10, 11, 12], "getnam": [5, 6, 7, 8, 9, 10, 11, 12], "getshadowedid": [5, 6, 7, 8, 9, 10, 11, 12], "shadow": [5, 6, 7, 8, 9, 10, 11, 12], "getvis": [5, 6, 7, 8, 9, 10, 11, 12], "visibl": [5, 6, 7, 8, 9, 10, 11, 12], "state": [5, 6, 7, 8, 9, 10, 11, 12, 13], "bool": [5, 6, 7, 8, 9, 10, 11, 12], "flag": [5, 6, 7, 8, 9, 10, 11, 12], "hasnam": [5, 6, 7, 8, 9, 10, 11, 12], "true": [5, 6, 7, 8, 9, 10, 11, 12], "empti": [5, 6, 7, 8, 9, 10, 11, 12], "hasvisiblenam": [5, 6, 7, 8, 9, 10, 11, 12], "ha": [5, 6, 7, 8, 9, 10, 11, 12, 13], "distinguish": [5, 6, 7, 8, 9, 10, 11, 12], "one": [5, 6, 7, 8, 9, 10, 11, 12, 13], "setnam": [5, 6, 7, 8, 9, 10, 11, 12], "setshadowedid": [5, 6, 7, 8, 9, 10, 11, 12], "setvis": [5, 6, 7, 8, 9, 10, 11, 12], "predict": [6, 13], "runkmean": 6, "setweight": 6, "classifi": [6, 13], "accord": 6, "sequenc": [6, 13], "float": 6, "d": [6, 13], "A": [6, 13], "cl": 6, "indic": [6, 13], "getdimens": 6, "dim": 6, "getnumberofclass": 6, "n_class": 6, "getverbos": 6, "verbos": 6, "verb": 6, "logic": 6, "tell": 6, "mode": 6, "been": 6, "activ": 6, "grade": 6, "inp": 6, "outc": 6, "inputpoint": 6, "k": [6, 13], "respect": 6, "isparallel": 6, "parallel": [6, 13], "setparallel": 6, "done": [6, 13], "setverbos": 6, "getinputsampl": 7, "getkernelparamet": 7, "getoutputsampl": 7, "gettradeofffactor": 7, "getconst": [10, 11, 12], "getdegre": 10, "getlinear": [10, 12], "setconst": [10, 11, 12], "setdegre": 10, "setlinear": [10, 12], "librari": 13, "provid": 13, "produc": 13, "concept": 13, "statist": 13, "scienc": 13, "relat": 13, "supervis": 13, "learn": 13, "analyz": 13, "recogn": 13, "pattern": 13, "analysi": 13, "standard": 13, "given": 13, "which": 13, "two": 13, "possibl": 13, "train": 13, "mark": 13, "belong": 13, "categori": 13, "assign": 13, "new": 13, "more": 13, "formal": 13, "construct": 13, "hyperplan": 13, "high": 13, "infinit": 13, "dimension": 13, "space": 13, "good": 13, "achiev": 13, "largest": 13, "distanc": 13, "nearest": 13, "ani": 13, "wherea": 13, "origin": 13, "mai": 13, "finit": 13, "often": 13, "happen": 13, "discrimin": 13, "linearli": 13, "For": 13, "reason": 13, "wa": 13, "propos": 13, "map": 13, "much": 13, "higher": 13, "presum": 13, "make": 13, "easier": 13, "To": 13, "keep": 13, "load": 13, "scheme": 13, "ensur": 13, "dot": 13, "product": 13, "easili": 13, "term": 13, "defin": 13, "them": 13, "x": 13, "suit": 13, "some": 13, "n": 13, "x_": 13, "y_": 13, "mathbb": 13, "r": 13, "_": 13, "where": 13, "y_i": 13, "either": 13, "x_i": 13, "real": 13, "find": 13, "maximum": 13, "divid": 13, "those": 13, "written": 13, "satisfi": 13, "w": 13, "cdot": 13, "denot": 13, "maxim": 13, "between": 13, "far": 13, "apart": 13, "still": 13, "These": 13, "describ": 13, "equat": 13, "so": 13, "minim": 13, "As": 13, "also": 13, "prevent": 13, "fall": 13, "add": 13, "follow": 13, "constraint": 13, "geq": 13, "quad": 13, "all": 13, "leq": 13, "optim": 13, "subject": 13, "preced": 13, "section": 13, "difficult": 13, "solv": 13, "involv": 13, "squar": 13, "root": 13, "It": 13, "alter": 13, "substitu": 13, "without": 13, "chang": 13, "solut": 13, "quadrat": 13, "program": 13, "By": 13, "introduc": 13, "lagrang": 13, "multipli": 13, "alpha": 13, "previou": 13, "constrain": 13, "express": 13, "underset": 13, "text": 13, "sum_": 13, "alpha_": 13, "techniqu": 13, "stationari": 13, "karush": 13, "kuhn": 13, "tucker": 13, "condit": 13, "impli": 13, "combin": 13, "alpha_i": 13, "onli": 13, "few": 13, "greater": 13, "than": 13, "zero": 13, "correspond": 13, "exactli": 13, "lie": 13, "fact": 13, "show": 13, "reduc": 13, "j": 13, "alpha_j": 13, "y_j": 13, "x_j": 13, "thank": 13, "sum_i": 13, "exist": 13, "split": 13, "ye": 13, "cleanli": 13, "slack": 13, "xi_i": 13, "measur": 13, "misclassif": 13, "increas": 13, "penal": 13, "non": 13, "becom": 13, "trade": 13, "off": 13, "larg": 13, "small": 13, "penalti": 13, "constaint": 13, "abov": 13, "One": 13, "beta": 13, "beta_i": 13, "similar": 13, "except": 13, "everi": 13, "replac": 13, "allow": 13, "fit": 13, "transform": 13, "featur": 13, "thu": 13, "though": 13, "common": 13, "includ": 13, "radial": 13, "basi": 13, "exp": 13, "hyperbol": 13, "tangent": 13, "tanh": 13, "varphi": 13, "effect": 13, "choic": 13, "singl": 13, "best": 13, "grid": 13, "exponenti": 13, "grow": 13, "check": 13, "cross": 13, "pick": 13, "final": 13, "whole": 13, "svc": 13, "min_": 13, "tq": 13, "ones": 13, "upper": 13, "bound": 13, "posit": 13, "semidefinit": 13, "matrix": 13, "q_": 13, "ij": 13, "y_iy_jk": 13, "decis": 13, "sign": 13, "alpha_ik": 13, "differ": 13, "unbalanc": 13, "formul": 13, "c_": 13, "weight": 13, "up": 13, "too": 13, "varepsilon": 13, "insensit": 13, "precis": 13, "min_w": 13, "l_i": 13, "wx_i": 13, "control": 13, "time": 13}, "objects": {"otsvm": [[5, 0, 1, "", "ExponentialRBF"], [6, 0, 1, "", "LibSVMClassification"], [7, 0, 1, "", "LibSVMRegression"], [8, 0, 1, "", "LinearKernel"], [9, 0, 1, "", "NormalRBF"], [10, 0, 1, "", "PolynomialKernel"], [11, 0, 1, "", "RationalKernel"], [12, 0, 1, "", "SigmoidKernel"]], "otsvm.ExponentialRBF": [[5, 1, 1, "", "__init__"], [5, 1, 1, "", "getClassName"], [5, 1, 1, "", "getId"], [5, 1, 1, "", "getName"], [5, 1, 1, "", "getShadowedId"], [5, 1, 1, "", "getVisibility"], [5, 1, 1, "", "hasName"], [5, 1, 1, "", "hasVisibleName"], [5, 1, 1, "", "setName"], [5, 1, 1, "", "setShadowedId"], [5, 1, 1, "", "setVisibility"]], "otsvm.LibSVMClassification": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "classify"], [6, 1, 1, "", "getClassName"], [6, 1, 1, "", "getDimension"], [6, 1, 1, "", "getId"], [6, 1, 1, "", "getName"], [6, 1, 1, "", "getNumberOfClasses"], [6, 1, 1, "", "getShadowedId"], [6, 1, 1, "", "getVerbose"], [6, 1, 1, "", "getVisibility"], [6, 1, 1, "", "grade"], [6, 1, 1, "", "hasName"], [6, 1, 1, "", "hasVisibleName"], [6, 1, 1, "", "isParallel"], [6, 1, 1, "", "setName"], [6, 1, 1, "", "setParallel"], [6, 1, 1, "", "setShadowedId"], [6, 1, 1, "", "setVerbose"], [6, 1, 1, "", "setVisibility"]], "otsvm.LibSVMRegression": [[7, 1, 1, "", "__init__"], [7, 1, 1, "", "getClassName"], [7, 1, 1, "", "getId"], [7, 1, 1, "", "getName"], [7, 1, 1, "", "getShadowedId"], [7, 1, 1, "", "getVisibility"], [7, 1, 1, "", "hasName"], [7, 1, 1, "", "hasVisibleName"], [7, 1, 1, "", "setName"], [7, 1, 1, "", "setShadowedId"], [7, 1, 1, "", "setVisibility"]], "otsvm.LinearKernel": [[8, 1, 1, "", "__init__"], [8, 1, 1, "", "getClassName"], [8, 1, 1, "", "getId"], [8, 1, 1, "", "getName"], [8, 1, 1, "", "getShadowedId"], [8, 1, 1, "", "getVisibility"], [8, 1, 1, "", "hasName"], [8, 1, 1, "", "hasVisibleName"], [8, 1, 1, "", "setName"], [8, 1, 1, "", "setShadowedId"], [8, 1, 1, "", "setVisibility"]], "otsvm.NormalRBF": [[9, 1, 1, "", "__init__"], [9, 1, 1, "", "getClassName"], [9, 1, 1, "", "getId"], [9, 1, 1, "", "getName"], [9, 1, 1, "", "getShadowedId"], [9, 1, 1, "", "getVisibility"], [9, 1, 1, "", "hasName"], [9, 1, 1, "", "hasVisibleName"], [9, 1, 1, "", "setName"], [9, 1, 1, "", "setShadowedId"], [9, 1, 1, "", "setVisibility"]], "otsvm.PolynomialKernel": [[10, 1, 1, "", "__init__"], [10, 1, 1, "", "getClassName"], [10, 1, 1, "", "getId"], [10, 1, 1, "", "getName"], [10, 1, 1, "", "getShadowedId"], [10, 1, 1, "", "getVisibility"], [10, 1, 1, "", "hasName"], [10, 1, 1, "", "hasVisibleName"], [10, 1, 1, "", "setName"], [10, 1, 1, "", "setShadowedId"], [10, 1, 1, "", "setVisibility"]], "otsvm.RationalKernel": [[11, 1, 1, "", "__init__"], [11, 1, 1, "", "getClassName"], [11, 1, 1, "", "getId"], [11, 1, 1, "", "getName"], [11, 1, 1, "", "getShadowedId"], [11, 1, 1, "", "getVisibility"], [11, 1, 1, "", "hasName"], [11, 1, 1, "", "hasVisibleName"], [11, 1, 1, "", "setName"], [11, 1, 1, "", "setShadowedId"], [11, 1, 1, "", "setVisibility"]], "otsvm.SigmoidKernel": [[12, 1, 1, "", "__init__"], [12, 1, 1, "", "getClassName"], [12, 1, 1, "", "getId"], [12, 1, 1, "", "getName"], [12, 1, 1, "", "getShadowedId"], [12, 1, 1, "", "getVisibility"], [12, 1, 1, "", "hasName"], [12, 1, 1, "", "hasVisibleName"], [12, 1, 1, "", "setName"], [12, 1, 1, "", "setShadowedId"], [12, 1, 1, "", "setVisibility"]]}, "objtypes": {"0": "py:class", "1": "py:method"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"]}, "titleterms": {"architectur": 0, "consider": 0, "depend": 0, "compil": 0, "sourc": 0, "code": 0, "structur": 0, "develop": [1, 4], "guid": [1, 4], "valid": 2, "test": 2, "case": 2, "1": 2, "xxxxxx": 2, "problem": 2, "statement": 2, "input": 2, "b": 2, "output": 2, "2": 2, "determinist": 2, "parametr": 2, "analysi": 2, "result": 2, "exampl": 3, "regress": [3, 13], "classif": [3, 13], "otsvm": 4, "document": 4, "user": [4, 13], "indic": 4, "tabl": 4, "exponentialrbf": 5, "libsvmclassif": 6, "libsvmregress": 7, "linearkernel": 8, "normalrbf": 9, "polynomialkernel": 10, "rationalkernel": 11, "sigmoidkernel": 12, "manual": 13, "introduct": 13, "support": 13, "vector": 13, "machin": 13, "linear": 13, "svm": 13, "primal": 13, "form": 13, "dual": 13, "soft": 13, "margin": 13, "nonlinear": 13, "choos": 13, "kernel": 13}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Developer guide": [[1, "developer-guide"], [4, "developer-guide"]], "Architecture considerations": [[0, "architecture-considerations"]], "Dependencies": [[0, "dependencies"]], "Compilation": [[0, "compilation"]], "Source code structure": [[0, "source-code-structure"]], "Validation": [[2, "validation"]], "Test case 1: XXXXXX": [[2, "test-case-1-xxxxxx"]], "1- Problem statement": [[2, "problem-statement"]], "a- Inputs": [[2, "a-inputs"], [2, "id1"]], "b- Output": [[2, "b-output"]], "2- Deterministic parametric analysis": [[2, "deterministic-parametric-analysis"]], "b- Results": [[2, "b-results"]], "Examples": [[3, "examples"]], "Regression": [[3, "regression"], [13, "regression"], [13, "id2"]], "Classification": [[3, "classification"], [13, "classification"], [13, "id1"]], "ExponentialRBF": [[5, "exponentialrbf"]], "OTSVM documentation": [[4, "otsvm-documentation"]], "User documentation": [[4, "user-documentation"]], "Indices and tables": [[4, "indices-and-tables"]], "SigmoidKernel": [[12, "sigmoidkernel"]], "User manual": [[13, "user-manual"]], "Introduction to support vector machine": [[13, "introduction-to-support-vector-machine"]], "Linear SVM": [[13, "linear-svm"]], "Primal form": [[13, "primal-form"]], "Dual form": [[13, "dual-form"]], "Soft margin": [[13, "soft-margin"]], "Nonlinear SVM": [[13, "nonlinear-svm"]], "Choose a kernel": [[13, "choose-a-kernel"]], "LibSVMRegression": [[7, "libsvmregression"]], "LibSVMClassification": [[6, "libsvmclassification"]], "LinearKernel": [[8, "linearkernel"]], "NormalRBF": [[9, "normalrbf"]], "RationalKernel": [[11, "rationalkernel"]], "PolynomialKernel": [[10, "polynomialkernel"]]}, "indexentries": {"exponentialrbf (class in otsvm)": [[5, "otsvm.ExponentialRBF"]], "__init__() (otsvm.exponentialrbf method)": [[5, "otsvm.ExponentialRBF.__init__"]], "getclassname() (otsvm.exponentialrbf method)": [[5, "otsvm.ExponentialRBF.getClassName"]], "getid() (otsvm.exponentialrbf method)": [[5, "otsvm.ExponentialRBF.getId"]], "getname() (otsvm.exponentialrbf method)": [[5, "otsvm.ExponentialRBF.getName"]], "getshadowedid() (otsvm.exponentialrbf method)": [[5, "otsvm.ExponentialRBF.getShadowedId"]], "getvisibility() (otsvm.exponentialrbf method)": [[5, "otsvm.ExponentialRBF.getVisibility"]], "hasname() (otsvm.exponentialrbf method)": [[5, "otsvm.ExponentialRBF.hasName"]], "hasvisiblename() (otsvm.exponentialrbf method)": [[5, "otsvm.ExponentialRBF.hasVisibleName"]], "setname() (otsvm.exponentialrbf method)": [[5, "otsvm.ExponentialRBF.setName"]], "setshadowedid() (otsvm.exponentialrbf method)": [[5, "otsvm.ExponentialRBF.setShadowedId"]], "setvisibility() (otsvm.exponentialrbf method)": [[5, "otsvm.ExponentialRBF.setVisibility"]], "libsvmclassification (class in otsvm)": [[6, "otsvm.LibSVMClassification"]], "__init__() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.__init__"]], "classify() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.classify"]], "getclassname() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.getClassName"]], "getdimension() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.getDimension"]], "getid() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.getId"]], "getname() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.getName"]], "getnumberofclasses() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.getNumberOfClasses"]], "getshadowedid() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.getShadowedId"]], "getverbose() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.getVerbose"]], "getvisibility() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.getVisibility"]], "grade() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.grade"]], "hasname() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.hasName"]], "hasvisiblename() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.hasVisibleName"]], "isparallel() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.isParallel"]], "setname() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.setName"]], "setparallel() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.setParallel"]], "setshadowedid() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.setShadowedId"]], "setverbose() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.setVerbose"]], "setvisibility() (otsvm.libsvmclassification method)": [[6, "otsvm.LibSVMClassification.setVisibility"]], "libsvmregression (class in otsvm)": [[7, "otsvm.LibSVMRegression"]], "__init__() (otsvm.libsvmregression method)": [[7, "otsvm.LibSVMRegression.__init__"]], "getclassname() (otsvm.libsvmregression method)": [[7, "otsvm.LibSVMRegression.getClassName"]], "getid() (otsvm.libsvmregression method)": [[7, "otsvm.LibSVMRegression.getId"]], "getname() (otsvm.libsvmregression method)": [[7, "otsvm.LibSVMRegression.getName"]], "getshadowedid() (otsvm.libsvmregression method)": [[7, "otsvm.LibSVMRegression.getShadowedId"]], "getvisibility() (otsvm.libsvmregression method)": [[7, "otsvm.LibSVMRegression.getVisibility"]], "hasname() (otsvm.libsvmregression method)": [[7, "otsvm.LibSVMRegression.hasName"]], "hasvisiblename() (otsvm.libsvmregression method)": [[7, "otsvm.LibSVMRegression.hasVisibleName"]], "setname() (otsvm.libsvmregression method)": [[7, "otsvm.LibSVMRegression.setName"]], "setshadowedid() (otsvm.libsvmregression method)": [[7, "otsvm.LibSVMRegression.setShadowedId"]], "setvisibility() (otsvm.libsvmregression method)": [[7, "otsvm.LibSVMRegression.setVisibility"]], "linearkernel (class in otsvm)": [[8, "otsvm.LinearKernel"]], "__init__() (otsvm.linearkernel method)": [[8, "otsvm.LinearKernel.__init__"]], "getclassname() (otsvm.linearkernel method)": [[8, "otsvm.LinearKernel.getClassName"]], "getid() (otsvm.linearkernel method)": [[8, "otsvm.LinearKernel.getId"]], "getname() (otsvm.linearkernel method)": [[8, "otsvm.LinearKernel.getName"]], "getshadowedid() (otsvm.linearkernel method)": [[8, "otsvm.LinearKernel.getShadowedId"]], "getvisibility() (otsvm.linearkernel method)": [[8, "otsvm.LinearKernel.getVisibility"]], "hasname() (otsvm.linearkernel method)": [[8, "otsvm.LinearKernel.hasName"]], "hasvisiblename() (otsvm.linearkernel method)": [[8, "otsvm.LinearKernel.hasVisibleName"]], "setname() (otsvm.linearkernel method)": [[8, "otsvm.LinearKernel.setName"]], "setshadowedid() (otsvm.linearkernel method)": [[8, "otsvm.LinearKernel.setShadowedId"]], "setvisibility() (otsvm.linearkernel method)": [[8, "otsvm.LinearKernel.setVisibility"]], "normalrbf (class in otsvm)": [[9, "otsvm.NormalRBF"]], "__init__() (otsvm.normalrbf method)": [[9, "otsvm.NormalRBF.__init__"]], "getclassname() (otsvm.normalrbf method)": [[9, "otsvm.NormalRBF.getClassName"]], "getid() (otsvm.normalrbf method)": [[9, "otsvm.NormalRBF.getId"]], "getname() (otsvm.normalrbf method)": [[9, "otsvm.NormalRBF.getName"]], "getshadowedid() (otsvm.normalrbf method)": [[9, "otsvm.NormalRBF.getShadowedId"]], "getvisibility() (otsvm.normalrbf method)": [[9, "otsvm.NormalRBF.getVisibility"]], "hasname() (otsvm.normalrbf method)": [[9, "otsvm.NormalRBF.hasName"]], "hasvisiblename() (otsvm.normalrbf method)": [[9, "otsvm.NormalRBF.hasVisibleName"]], "setname() (otsvm.normalrbf method)": [[9, "otsvm.NormalRBF.setName"]], "setshadowedid() (otsvm.normalrbf method)": [[9, "otsvm.NormalRBF.setShadowedId"]], "setvisibility() (otsvm.normalrbf method)": [[9, "otsvm.NormalRBF.setVisibility"]], "polynomialkernel (class in otsvm)": [[10, "otsvm.PolynomialKernel"]], "__init__() (otsvm.polynomialkernel method)": [[10, "otsvm.PolynomialKernel.__init__"]], "getclassname() (otsvm.polynomialkernel method)": [[10, "otsvm.PolynomialKernel.getClassName"]], "getid() (otsvm.polynomialkernel method)": [[10, "otsvm.PolynomialKernel.getId"]], "getname() (otsvm.polynomialkernel method)": [[10, "otsvm.PolynomialKernel.getName"]], "getshadowedid() (otsvm.polynomialkernel method)": [[10, "otsvm.PolynomialKernel.getShadowedId"]], "getvisibility() (otsvm.polynomialkernel method)": [[10, "otsvm.PolynomialKernel.getVisibility"]], "hasname() (otsvm.polynomialkernel method)": [[10, "otsvm.PolynomialKernel.hasName"]], "hasvisiblename() (otsvm.polynomialkernel method)": [[10, "otsvm.PolynomialKernel.hasVisibleName"]], "setname() (otsvm.polynomialkernel method)": [[10, "otsvm.PolynomialKernel.setName"]], "setshadowedid() (otsvm.polynomialkernel method)": [[10, "otsvm.PolynomialKernel.setShadowedId"]], "setvisibility() (otsvm.polynomialkernel method)": [[10, "otsvm.PolynomialKernel.setVisibility"]], "rationalkernel (class in otsvm)": [[11, "otsvm.RationalKernel"]], "__init__() (otsvm.rationalkernel method)": [[11, "otsvm.RationalKernel.__init__"]], "getclassname() (otsvm.rationalkernel method)": [[11, "otsvm.RationalKernel.getClassName"]], "getid() (otsvm.rationalkernel method)": [[11, "otsvm.RationalKernel.getId"]], "getname() (otsvm.rationalkernel method)": [[11, "otsvm.RationalKernel.getName"]], "getshadowedid() (otsvm.rationalkernel method)": [[11, "otsvm.RationalKernel.getShadowedId"]], "getvisibility() (otsvm.rationalkernel method)": [[11, "otsvm.RationalKernel.getVisibility"]], "hasname() (otsvm.rationalkernel method)": [[11, "otsvm.RationalKernel.hasName"]], "hasvisiblename() (otsvm.rationalkernel method)": [[11, "otsvm.RationalKernel.hasVisibleName"]], "setname() (otsvm.rationalkernel method)": [[11, "otsvm.RationalKernel.setName"]], "setshadowedid() (otsvm.rationalkernel method)": [[11, "otsvm.RationalKernel.setShadowedId"]], "setvisibility() (otsvm.rationalkernel method)": [[11, "otsvm.RationalKernel.setVisibility"]], "sigmoidkernel (class in otsvm)": [[12, "otsvm.SigmoidKernel"]], "__init__() (otsvm.sigmoidkernel method)": [[12, "otsvm.SigmoidKernel.__init__"]], "getclassname() (otsvm.sigmoidkernel method)": [[12, "otsvm.SigmoidKernel.getClassName"]], "getid() (otsvm.sigmoidkernel method)": [[12, "otsvm.SigmoidKernel.getId"]], "getname() (otsvm.sigmoidkernel method)": [[12, "otsvm.SigmoidKernel.getName"]], "getshadowedid() (otsvm.sigmoidkernel method)": [[12, "otsvm.SigmoidKernel.getShadowedId"]], "getvisibility() (otsvm.sigmoidkernel method)": [[12, "otsvm.SigmoidKernel.getVisibility"]], "hasname() (otsvm.sigmoidkernel method)": [[12, "otsvm.SigmoidKernel.hasName"]], "hasvisiblename() (otsvm.sigmoidkernel method)": [[12, "otsvm.SigmoidKernel.hasVisibleName"]], "setname() (otsvm.sigmoidkernel method)": [[12, "otsvm.SigmoidKernel.setName"]], "setshadowedid() (otsvm.sigmoidkernel method)": [[12, "otsvm.SigmoidKernel.setShadowedId"]], "setvisibility() (otsvm.sigmoidkernel method)": [[12, "otsvm.SigmoidKernel.setVisibility"]]}})