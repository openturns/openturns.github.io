
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_methodFactory.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_methodFactory.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_methodFactory.py:


Demonstration of the Factory classes for reliability problems
=============================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-11

In this example, we show how to use various classes which provide an easy way to create an algorithm
to estimate a problem from a `ReliabilityBenchmarkProblem`.
This methods do not set the parameters of the algorithm and do not run it,
so that we can set specific settings for a given problem.

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: Python

    import openturns as ot
    import numpy as np
    import otbenchmark as otb








.. GENERATED FROM PYTHON SOURCE LINES 18-19

We consider the RP8 problem.

.. GENERATED FROM PYTHON SOURCE LINES 19-21

.. code-block:: Python

    problem = otb.ReliabilityProblem8()








.. GENERATED FROM PYTHON SOURCE LINES 22-24

Create a Monte-Carlo algorithm
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 26-29

The `buildMonteCarlo` method creates a `ProbabilitySimulationAlgorithm` based on MonteCarlo sampling.
Before running the algorithm, we set the number of outer iterations based on the `setMaximumOuterSampling` method.
This shows the main utility of the `Factory` classes.

.. GENERATED FROM PYTHON SOURCE LINES 31-38

.. code-block:: Python

    factory = otb.ProbabilitySimulationAlgorithmFactory()
    algo = factory.buildMonteCarlo(problem)
    algo.setMaximumOuterSampling(100000)
    algo.run()
    result = algo.getResult()
    result.getProbabilityEstimate()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0006900000000000031



.. GENERATED FROM PYTHON SOURCE LINES 39-41

Create a FORM algorithm
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 43-44

We use the `FORM` class applied to the `problem`.

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: Python

    nearestPointAlgorithm = ot.AbdoRackwitz()
    algo = otb.FORM(problem, nearestPointAlgorithm)








.. GENERATED FROM PYTHON SOURCE LINES 48-50

The `FORM` object of the otbenchmark module implements a `FORM` object from the OpenTURNS library.
Hence, it has a `run` method. If specific setting is required, we can do it now, prior to the call to the `run` method.

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: Python

    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 53-57

.. code-block:: Python

    result = algo.getResult()
    result.getEventProbability()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0006598990293278664



.. GENERATED FROM PYTHON SOURCE LINES 58-59

We can compare the previous estimate with the exact probability.

.. GENERATED FROM PYTHON SOURCE LINES 59-61

.. code-block:: Python

    problem.getProbability()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0007897927545597477



.. GENERATED FROM PYTHON SOURCE LINES 62-64

Create a SORM algorithm
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 66-67

The `SORM` class creates a `SORM` object.

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: Python

    nearestPointAlgorithm = ot.AbdoRackwitz()
    algo = otb.SORM(problem, nearestPointAlgorithm)








.. GENERATED FROM PYTHON SOURCE LINES 71-73

.. code-block:: Python

    algo.run()








.. GENERATED FROM PYTHON SOURCE LINES 74-77

.. code-block:: Python

    result = algo.getResult()
    result.getEventProbabilityBreitung()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.000783711312874782



.. GENERATED FROM PYTHON SOURCE LINES 78-80

Create a FORM-IS algorithm
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 82-85

The `buildFORMIS` method of the `ProbabilitySimulationAlgorithmFactory` class creates
a `ProbabilitySimulationAlgorithm` object, based on the Importance Sampling method
using the FORM design point with gaussian importance distribution.

.. GENERATED FROM PYTHON SOURCE LINES 87-95

.. code-block:: Python

    factory = otb.ProbabilitySimulationAlgorithmFactory()
    nearestPointAlgorithm = ot.AbdoRackwitz()
    algo = factory.buildFORMIS(problem, nearestPointAlgorithm)
    algo.run()
    result = algo.getResult()
    result.getProbabilityEstimate()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0005702210872887895



.. GENERATED FROM PYTHON SOURCE LINES 96-98

Create a SubsetSampling algorithm
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 100-105

.. code-block:: Python

    algo = otb.SubsetSampling(problem)
    algo.run()
    result = algo.getResult()
    result.getProbabilityEstimate()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0007323000000000017



.. GENERATED FROM PYTHON SOURCE LINES 106-108

Create a LHS algorithm
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 110-114

.. code-block:: Python

    algo = otb.LHS(problem)
    algo.run()
    result = algo.getResult()
    result.getProbabilityEstimate()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.417 seconds)


.. _sphx_glr_download_auto_examples_plot_methodFactory.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_methodFactory.ipynb <plot_methodFactory.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_methodFactory.py <plot_methodFactory.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_methodFactory.zip <plot_methodFactory.zip>`
