
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_example1.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_example1.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_example1.py:


Example 1
=========

.. GENERATED FROM PYTHON SOURCE LINES 7-20

Problem statement:

.. math::

    \begin{aligned}
    & \underset{x}{\text{minimize}}
    & & \mathbb{E}_{\cD}((x_0-2)^2 + 2x_1^2 -4x_1 + \Theta) \\
    & \text{subject to}
    & & \mathbb{P}_{\cD}(-x_0 + 4x_1 + \Theta -3 \leq 0) \geq 0.9 \\
    & & & \Theta \thicksim \cU(1, 3)
    \end{aligned}

Solution: :math:`\hat{x} = [2.2, 0.6]`

.. GENERATED FROM PYTHON SOURCE LINES 23-59

.. code-block:: Python

    import openturns as ot
    import otrobopt

    # ot.Log.Show(ot.Log.Info)
    calJ = ot.SymbolicFunction(
        ['x0', 'x1', 'theta'], ['(x0-2)^2 + 2*x1^2 - 4*x1 + theta'])
    calG = ot.SymbolicFunction(
        ['x0', 'x1', 'theta'], ['-(-x0 + 4*x1 + theta - 3)'])
    J = ot.ParametricFunction(calJ, [2], [2.0])
    g = ot.ParametricFunction(calG, [2], [2.0])

    dim = J.getInputDimension()

    solver = ot.Cobyla()
    solver.setIgnoreFailure(True)
    solver.setMaximumIterationNumber(1000)

    thetaDist = ot.Uniform(1.0, 3.0)
    robustnessMeasure = otrobopt.MeanMeasure(J, thetaDist)
    reliabilityMeasure = otrobopt.JointChanceMeasure(
        g, thetaDist, ot.Greater(), 0.9)
    problem = otrobopt.RobustOptimizationProblem(
        robustnessMeasure, reliabilityMeasure)
    bounds = ot.Interval([-10.0] * dim, [10.0] * dim)
    problem.setBounds(bounds)

    algo = otrobopt.SequentialMonteCarloRobustAlgorithm(problem, solver)
    algo.setMaximumIterationNumber(10)
    algo.setMaximumAbsoluteError(1e-3)
    algo.setInitialSamplingSize(10)
    algo.setInitialSearch(100)
    algo.run()
    result = algo.getResult()
    print('x*=', result.getOptimalPoint(),
          'J(x*)=', result.getOptimalValue(),
          'iteration=', result.getIterationNumber())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    x*= [2.1791,0.620063] J(x*)= [0.19849] iteration= 3





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.898 seconds)


.. _sphx_glr_download_auto_examples_plot_example1.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_example1.ipynb <plot_example1.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_example1.py <plot_example1.py>`
